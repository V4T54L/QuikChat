{
  ".env.example": "- **High-Level Purpose**: Provides an example configuration file for environment variables used by the application, detailing server, database, Redis, JWT, and file storage settings.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `SERVER_PORT`: (string) The port on which the server will listen.\n    - `DB_HOST`: (string) PostgreSQL database host.\n    - `DB_PORT`: (string) PostgreSQL database port.\n    - `DB_USER`: (string) PostgreSQL database user.\n    - `DB_PASSWORD`: (string) PostgreSQL database password.\n    - `DB_NAME`: (string) PostgreSQL database name.\n    - `DB_SSLMODE`: (string) PostgreSQL SSL mode (e.g., `disable`).\n    - `REDIS_ADDR`: (string) Redis server address.\n    - `JWT_SECRET`: (string) Secret key used for signing JWTs.\n    - `JWT_ACCESS_TOKEN_EXP_MIN`: (integer) Access token expiration time in minutes.\n    - `JWT_REFRESH_TOKEN_EXP_HOUR`: (integer) Refresh token expiration time in hours.\n    - `PROFILE_PIC_DIR`: (string) Local directory path for storing user profile pictures.\n    - `STATIC_FILES_DIR`: (string) Local directory path for general static files.\n    - `PROFILE_PIC_ROUTE`: (string) URL route prefix for serving profile pictures.\n",
  "Makefile": "- **High-Level Purpose**: Defines common commands for building, running, and managing the application's Docker containers.\n- **Definitions in the File**:\n  - **Functions / Methods**: (N/A, this is a build script)\n  - **Variables / Constants**: (N/A, uses shell commands)\n- **Notable Patterns or Logic**:\n  - `run`: Target to execute the Go backend server.\n  - `docker-up`: Target to start the application's services (PostgreSQL, Redis) using Docker Compose in detached mode.\n  - `docker-down`: Target to stop the application's services using Docker Compose.\n",
  "backend/adapter/filesystem/local_storage.go": "- **High-Level Purpose**: Implements the `FileRepository` interface to save uploaded files to the local filesystem and generate their public URLs.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `localStorage`: Private struct implementing `repository.FileRepository`.\n      - Fields:\n        - `storageDir` (string): The local directory path where files will be stored.\n        - `routePath` (string): The base URL path from which stored files will be served.\n  - **Functions / Methods**:\n    - `NewLocalStorage(storageDir, routePath string) repository.FileRepository`: Public constructor. Creates and returns a new `localStorage` instance.\n    - `(*localStorage) Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Public method. Saves an uploaded `multipart.File` to the configured `storageDir` with a newly generated UUID filename, preserving the original extension. Returns the public URL path to the saved file.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction for file storage.\n  - Local filesystem interaction: Uses `os.Create`, `io.Copy`, and `filepath` for file operations.\n  - Unique filenames: Generates UUIDs for filenames to prevent collisions.\n",
  "backend/adapter/handler/http/auth_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for authentication-related API endpoints, such as user login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `loginRequest`: Private struct for decoding the JSON payload of a login request.\n      - Fields: `Username` (string), `Password` (string).\n    - `loginResponse`: Private struct for encoding the JSON payload of a successful login response.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n    - `refreshRequest`: Private struct for decoding the JSON payload of a refresh token request.\n      - Fields: `RefreshToken` (string).\n    - `refreshResponse`: Private struct for encoding the JSON payload of a successful refresh token response.\n      - Fields: `AccessToken` (string).\n    - `logoutRequest`: Private struct for decoding the JSON payload of a logout request.\n      - Fields: `RefreshToken` (string).\n  - **Functions / Methods**:\n    - `(*AuthHandler) Login(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user login. Decodes the request body, calls the `AuthUsecase` to perform login, and responds with access/refresh tokens or appropriate error messages.\n    - `(*AuthHandler) Refresh(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for refreshing access tokens. Decodes the request body, calls the `AuthUsecase` to refresh the token, and responds with a new access token or error.\n    - `(*AuthHandler) Logout(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user logout. Decodes the request body, calls the `AuthUsecase` to invalidate the session, and responds with a success message or error.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `AuthUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses.\n",
  "backend/adapter/handler/http/handler.go": "- **High-Level Purpose**: Defines the base structs for HTTP handlers and their constructors, facilitating dependency injection of use case interfaces.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthHandler`: Public struct that holds the `AuthUsecase` dependency for authentication-related HTTP handlers.\n      - Fields: `authUsecase` (usecase.AuthUsecase).\n    - `UserHandler`: Public struct that holds the `UserUsecase` dependency for user-related HTTP handlers.\n      - Fields: `userUsecase` (usecase.UserUsecase).\n  - **Functions / Methods**:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: Public constructor. Creates and returns a new `AuthHandler` instance, injecting the `AuthUsecase`.\n    - `NewUserHandler(userUsecase usecase.UserUsecase) *UserHandler`: Public constructor. Creates and returns a new `UserHandler` instance, injecting the `UserUsecase`.\n- **Notable Patterns or Logic**:\n  - Dependency Injection: Handlers receive their business logic dependencies (use cases) through their constructors.\n  - Handler pattern: Provides a structured way to organize HTTP request handling logic.",
  "backend/adapter/handler/http/user_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for user-related API endpoints, including user registration, retrieving user profiles, and updating user profiles.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `registerRequest`: Private struct for decoding the JSON payload of a user registration request.\n      - Fields: `Username` (string), `Password` (string).\n  - **Functions / Methods**:\n    - `(*UserHandler) Register(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user registration. Decodes the request body, calls the `UserUsecase` to register the user, and responds with the created user details or appropriate error messages.\n    - `(*UserHandler) GetUserByUsername(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to retrieve a user by their username. Extracts the username from the URL path, calls the `UserUsecase`, and responds with user details or `http.StatusNotFound` if not found.\n    - `(*UserHandler) UpdateProfile(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP PUT requests to update a user's profile. It extracts the authenticated `userID` from the request context, parses multipart form data for optional username, password, and profile picture updates, calls the `UserUsecase`, and responds with the updated user details or various validation/conflict errors.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `UserUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Multipart form parsing: Handles file uploads for profile pictures.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n  - Context usage: Retrieves `userID` from the request context, which is set by authentication middleware.\n",
  "backend/adapter/middleware/auth.go": "- **High-Level Purpose**: Provides an HTTP middleware for authenticating requests using JWT access tokens and injecting the authenticated user's ID into the request context.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthMiddleware`: Public struct to hold the JWT secret.\n      - Fields:\n        - `jwtSecret` (string): The secret key used to validate JWTs.\n  - **Functions / Methods**:\n    - `NewAuthMiddleware(jwtSecret string) *AuthMiddleware`: Public constructor. Creates a new `AuthMiddleware` instance.\n    - `(*AuthMiddleware) Validate(next http.Handler) http.Handler`: Public method. Returns an `http.Handler` that acts as middleware. It validates the \"Authorization: Bearer \u003ctoken\u003e\" header, parses the JWT, verifies its signature and validity, extracts the `user_id` claim, and injects it into the request context. Responds with `http.StatusUnauthorized` if validation fails.\n  - **Variables / Constants**:\n    - `UserIDKey` (contextKey): A private constant key used to store and retrieve the authenticated user's UUID from the request context.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add authentication logic.\n  - JWT validation: Uses `github.com/golang-jwt/jwt/v5` for token parsing and validation.\n",
  "backend/adapter/middleware/logging.go": "- **High-Level Purpose**: Provides a simple HTTP middleware for logging incoming requests and their processing time.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `Logging(next http.Handler) http.Handler`: Public function. Returns an `http.Handler` that logs the HTTP method, request URI, and the duration of the request processing to standard output.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add logging functionality.\n",
  "backend/adapter/postgres/db.go": "- **High-Level Purpose**: Provides a function to establish and verify a connection to a PostgreSQL database.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `NewDB(cfg *config.Config) (*sql.DB, error)`: Public function. Connects to a PostgreSQL database using the provided configuration, opens the connection, and pings the database to ensure connectivity. Returns a `*sql.DB` instance or an error.\n",
  "backend/adapter/postgres/migrations/000001_init.sql": "- **High-Level Purpose**: SQL script for initializing the PostgreSQL database schema, creating tables for users and sessions, and setting up necessary indexes.\n- **Definitions in the File**:\n  - **Tables**:\n    - `users`: Stores user accounts with `id` (UUID primary key), `username` (unique, VARCHAR), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR), and `created_at` (TIMESTAMPTZ).\n    - `sessions`: Stores user sessions with `refresh_token` (UUID primary key), `user_id` (UUID foreign key referencing `users`), and `expires_at` (TIMESTAMPTZ).\n  - **Indexes**:\n    - `idx_users_username`: B-tree index on the lowercase `username` for efficient case-insensitive lookups.\n    - `idx_sessions_user_id`: B-tree index on `user_id` for efficient session retrieval by user.\n  - **Extensions**:\n    - `uuid-ossp`: Enables generation of UUIDs within PostgreSQL.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines the initial state of the database schema.\n  - Foreign key constraints: `sessions.user_id` references `users.id` with `ON DELETE CASCADE`.\n",
  "backend/adapter/postgres/session_repo.go": "- **High-Level Purpose**: Implements the `SessionRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresSessionRepository`: Private struct implementing `repository.SessionRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresSessionRepository(db *sql.DB) repository.SessionRepository`: Public constructor. Creates and returns a new `postgresSessionRepository` instance.\n    - `(*postgresSessionRepository) Create(ctx context.Context, session *models.Session) error`: Public method. Inserts a new session into the `sessions` table. If a session with the same `refresh_token` already exists, it updates the `expires_at` field (UPSERT).\n    - `(*postgresSessionRepository) Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Public method. Retrieves a session from the `sessions` table by its `refresh_token`. Returns `models.ErrSessionNotFound` if no session is found.\n    - `(*postgresSessionRepository) Delete(ctx context.Context, refreshToken uuid.UUID) error`: Public method. Deletes a session from the `sessions` table by its `refresh_token`.\n    - `(*postgresSessionRepository) DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Public method. Deletes all sessions associated with a given `user_id` from the `sessions` table.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for sessions.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - UPSERT logic for session creation/update.\n",
  "backend/adapter/postgres/user_repo.go": "- **High-Level Purpose**: Implements the `UserRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresUserRepository`: Private struct implementing `repository.UserRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresUserRepository(db *sql.DB) repository.UserRepository`: Public constructor. Creates and returns a new `postgresUserRepository` instance.\n    - `(*postgresUserRepository) Create(ctx context.Context, user *models.User) error`: Public method. Inserts a new user into the `users` table. Handles `unique_violation` errors for the username.\n    - `(*postgresUserRepository) FindByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their username (case-insensitive). Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their UUID. Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) Update(ctx context.Context, user *models.User) error`: Public method. Updates an existing user's `username`, `password_hash`, and `profile_pic_url` in the `users` table. Handles `unique_violation` errors for the username.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for users.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrUserNotFound` and PostgreSQL unique constraint errors to `models.ErrUsernameTaken`.\n",
  "backend/adapter/util/password.go": "- **High-Level Purpose**: Provides utility functions for securely hashing and verifying user passwords using bcrypt.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `HashPassword(password string) (string, error)`: Public function. Generates a bcrypt hash of the given plain-text password with a cost of 14.\n    - `CheckPasswordHash(password, hash string) bool`: Public function. Compares a plain-text password against a bcrypt hash, returning `true` if they match, `false` otherwise.\n",
  "backend/adapter/util/response.go": "- **High-Level Purpose**: Provides utility functions for sending standardized JSON and error HTTP responses.\n- **Functions / Methods**:\n  - `RespondWithError(w http.ResponseWriter, code int, message string)`: Public function. Sends an HTTP error response with a given status code and message, formatted as JSON.\n  - `RespondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Public function. Sends an HTTP JSON response with a given status code and payload.\n",
  "backend/adapter/util/token.go": "- **High-Level Purpose**: Provides an interface and implementation for generating JWT access tokens and UUID-based refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `TokenGenerator`: Interface for token generation.\n      - Methods:\n        - `GenerateAccessToken(userID uuid.UUID) (string, error)`: Generates a signed JWT access token.\n        - `GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Generates a UUID refresh token and its expiration time.\n        - `GetRefreshTokenExp() time.Duration`: Returns the configured refresh token expiration duration.\n  - **Classes / Structs**:\n    - `tokenGenerator`: Private struct implementing the `TokenGenerator` interface.\n      - Fields:\n        - `jwtSecret` (string): The secret key for signing JWTs.\n        - `accessTokenExp` (time.Duration): Duration for access token validity.\n        - `refreshTokenExp` (time.Duration): Duration for refresh token validity.\n  - **Functions / Methods**:\n    - `NewTokenGenerator(secret string, accessExp, refreshExp time.Duration) TokenGenerator`: Public constructor. Creates and returns a new `TokenGenerator` instance.\n    - `(*tokenGenerator) GenerateAccessToken(userID uuid.UUID) (string, error)`: Public method. Creates a new JWT with `user_id`, `exp` (expiration), and `iat` (issued at) claims, then signs it using HMAC-SHA256 with the configured secret.\n    - `(*tokenGenerator) GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Public method. Generates a new UUID and calculates its expiration time based on `refreshTokenExp`.\n    - `(*tokenGenerator) GetRefreshTokenExp() time.Duration`: Public method. Returns the configured `refreshTokenExp`.\n- **Notable Patterns or Logic**:\n  - Token generation utility: Centralizes the logic for creating different types of tokens.\n  - JWT (JSON Web Token) usage: Employs `github.com/golang-jwt/jwt/v5` for access token creation.\n",
  "backend/adapter/util/validation.go": "- **High-Level Purpose**: Provides utility functions for validating common input fields such as usernames, passwords, and uploaded profile pictures.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `ValidateUsername(username string) error`: Public function. Validates if a username adheres to a specific format (alphanumeric, underscore, 4-50 characters, lowercase).\n    - `ValidatePassword(password string) error`: Public function. Validates if a password meets minimum length requirements (at least 8 characters).\n    - `ValidateProfilePic(header *multipart.FileHeader) error`: Public function. Validates an uploaded profile picture's size (max 200KB) and content type (PNG, JPEG, WebP).\n  - **Variables / Constants**:\n    - `usernameRegex` (*regexp.Regexp): A module-level regular expression used for validating username format.\n",
  "backend/cmd/server/main.go": "- **High-Level Purpose**: The main entry point for the backend server application. It initializes all components (config, DB, repositories, use cases, handlers, middleware) and sets up the HTTP router to serve API endpoints and static files.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `main()`: The application's entry point.\n      - Loads configuration.\n      - Initializes PostgreSQL database connection.\n      - Instantiates concrete implementations of `UserRepository`, `SessionRepository`, and `FileRepository`.\n      - Instantiates `TokenGenerator`, `AuthUsecase`, and `UserUsecase` with their respective dependencies.\n      - Creates `AuthHandler` and `UserHandler` instances.\n      - Initializes `AuthMiddleware`.\n      - Configures `chi.NewRouter()` with `chi_middleware.Logger` and `cors.Handler`.\n      - Sets up static file serving for profile pictures.\n      - Defines public API routes (`/register`, `/login`, `/refresh`, `/logout`, `/users/{username}`).\n      - Defines protected API routes (`/profile`) using `authMiddleware.Validate`.\n      - Starts the HTTP server on the configured port.\n    - `fileServer(r chi.Router, path string, root http.FileSystem)`: Private helper function. Configures a `chi.Router` to serve static files from a given `http.FileSystem` at a specified URL path.\n- **Notable Patterns or Logic**:\n  - Application bootstrap: Orchestrates the setup of the entire application.\n  - Dependency Injection: Components are created and wired together in `main`.\n  - HTTP routing: Uses `github.com/go-chi/chi` for defining API routes.\n  - Middleware: Integrates `chi_middleware.Logger`, `cors.Handler`, and custom `AuthMiddleware`.\n  - Static file serving.\n",
  "backend/config/config.go": "- **High-Level Purpose**: Defines the application's configuration structure and provides a mechanism to load these settings from environment variables or a `.env` file.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Config`: Public struct holding all application configuration parameters.\n      - Fields: `ServerPort`, `DBHost`, `DBPort`, `DBUser`, `DBPassword`, `DBName`, `DBSslMode`, `RedisAddr`, `JWTSecret`, `AccessTokenExp` (time.Duration), `RefreshTokenExp` (time.Duration), `ProfilePicDir`, `ProfilePicRoute`.\n  - **Functions / Methods**:\n    - `Load() (*Config, error)`: Public function. Loads configuration from `.env` file (if present) and environment variables, applying default values if not explicitly set. It also ensures the `ProfilePicDir` exists.\n    - `getEnv(key, fallback string) string`: Private helper function. Retrieves the value of an environment variable by `key`, returning a `fallback` value if the variable is not set.\n- **Notable Patterns or Logic**:\n  - Configuration management: Centralized loading of application settings.\n  - Environment variable parsing: Uses `os.LookupEnv` and `strconv` for type conversion.\n  - `.env` file support: Uses `github.com/joho/godotenv` for local development.\n",
  "backend/models/error.go": "- **High-Level Purpose**: Defines a set of custom error variables used consistently across the application to represent specific business or operational failures.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `ErrUserNotFound`: (error) Indicates that a requested user could not be found.\n    - `ErrUsernameTaken`: (error) Indicates that a username is already in use during registration or update.\n    - `ErrInvalidCredentials`: (error) Indicates incorrect username or password during login.\n    - `ErrSessionNotFound`: (error) Indicates that a session (e.g., refresh token) was not found or has expired.\n    - `ErrInvalidToken`: (error) Indicates that a provided token is malformed or invalid.\n    - `ErrUnauthorized`: (error) General error for unauthorized access.\n    - `ErrInternalServer`: (error) General error for unexpected server-side issues.\n    - `ErrBadRequest`: (error) General error for malformed or invalid client requests.\n",
  "backend/models/session.go": "- **High-Level Purpose**: Defines the data structure representing a user session, primarily used for refresh tokens.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Session`: Public struct representing a user's session.\n      - Fields:\n        - `RefreshToken` (uuid.UUID): The unique identifier for the refresh token.\n        - `UserID` (uuid.UUID): The ID of the user associated with this session.\n        - `ExpiresAt` (time.Time): The timestamp when this session expires.\n",
  "backend/models/user.go": "- **High-Level Purpose**: Defines the data structure representing a user entity in the application.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `User`: Public struct representing a user.\n      - Fields:\n        - `ID` (uuid.UUID): The unique identifier for the user.\n        - `Username` (string): The user's unique username.\n        - `PasswordHash` (string): The bcrypt hash of the user's password (excluded from JSON serialization).\n        - `ProfilePicURL` (string): The URL or path to the user's profile picture.\n        - `CreatedAt` (time.Time): The timestamp when the user account was created.\n",
  "backend/repository/file_repository.go": "- **High-Level Purpose**: Defines the interface for file storage operations within the repository layer.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FileRepository`: Interface for saving files.\n      - Methods:\n        - `Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Saves a file and returns its unique identifier or URL.\n",
  "backend/repository/session_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user sessions, typically managed by refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `SessionRepository`: Interface for managing user sessions.\n      - Methods:\n        - `Create(ctx context.Context, session *models.Session) error`: Creates a new session or updates an existing one.\n        - `Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Retrieves a session by its refresh token.\n        - `Delete(ctx context.Context, refreshToken uuid.UUID) error`: Deletes a session by its refresh token.\n        - `DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Deletes all sessions associated with a specific user ID.\n",
  "backend/repository/user_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user entities.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserRepository`: Interface for managing user data.\n      - Methods:\n        - `Create(ctx context.Context, user *models.User) error`: Creates a new user record.\n        - `FindByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Retrieves a user by their unique ID.\n        - `Update(ctx context.Context, user *models.User) error`: Updates an existing user's record.\n",
  "backend/usecase/auth_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user authentication, including login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `AuthUsecase`: Interface defining authentication operations.\n      - Methods:\n        - `Login(ctx context.Context, username, password string) (accessToken string, refreshToken string, err error)`: Authenticates a user and generates access and refresh tokens.\n        - `Refresh(ctx context.Context, refreshToken string) (newAccessToken string, err error)`: Refreshes an expired access token using a valid refresh token.\n        - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a user's session by deleting the refresh token.\n  - **Classes / Structs**:\n    - `authUsecase`: Private struct implementing the `AuthUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `sessionRepo` (repository.SessionRepository): Dependency for session data access.\n        - `tokenGen` (util.TokenGenerator): Dependency for generating tokens.\n  - **Functions / Methods**:\n    - `NewAuthUsecase(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, tokenGen util.TokenGenerator) AuthUsecase`: Public constructor. Creates and returns a new `AuthUsecase` instance with injected dependencies.\n    - `(*authUsecase) Login(ctx context.Context, username, password string) (string, string, error)`: Public method. Handles user login, validates credentials, generates access and refresh tokens, and creates a session. It enforces a single-device policy by deleting old sessions.\n    - `(*authUsecase) Refresh(ctx context.Context, refreshTokenStr string) (string, error)`: Public method. Refreshes an access token using a refresh token, validates the session's expiry, and extends its validity (sliding window).\n    - `(*authUsecase) Logout(ctx context.Context, refreshTokenStr string) error`: Public method. Invalidates a user's session by deleting the provided refresh token.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for repositories and token generation.\n  - Single-device policy for sessions during login.\n  - Sliding window for refresh token expiry.\n",
  "backend/usecase/user_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user management, including registration, retrieving user details, and updating user profiles.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserUsecase`: Interface defining user management operations.\n      - Methods:\n        - `Register(ctx context.Context, username, password string) (*models.User, error)`: Registers a new user.\n        - `GetByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Updates a user's profile information.\n  - **Classes / Structs**:\n    - `userUsecase`: Private struct implementing the `UserUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `fileRepo` (repository.FileRepository): Dependency for file storage operations.\n  - **Functions / Methods**:\n    - `NewUserUsecase(userRepo repository.UserRepository, fileRepo repository.FileRepository) UserUsecase`: Public constructor. Creates and returns a new `UserUsecase` instance with injected dependencies.\n    - `(*userUsecase) Register(ctx context.Context, username, password string) (*models.User, error)`: Public method. Registers a new user after validating username and password, checking for username uniqueness, hashing the password, and persisting the user.\n    - `(*userUsecase) GetByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user's details by their username.\n    - `(*userUsecase) UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Public method. Updates a user's profile, allowing changes to username (with uniqueness check), password (with hashing), and profile picture (with validation and storage).\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for user and file repositories.\n  - Input validation: Utilizes `util.ValidateUsername`, `util.ValidatePassword`, and `util.ValidateProfilePic`.\n",
  "docker-compose.yml": "- **High-Level Purpose**: Defines and configures Docker services for the application's core dependencies: PostgreSQL for the database and Redis for caching/session management.\n- **Definitions in the File**:\n  - **Services**:\n    - `postgres`: Defines a PostgreSQL database service.\n      - Image: `postgres:13`.\n      - Environment: Configured with `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB` from environment variables or defaults.\n      - Ports: Maps host port `DB_PORT` (default 5432) to container port 5432.\n      - Volumes: Persists database data to `postgres_data` volume and mounts SQL migration scripts to be run on startup.\n      - Restart policy: `unless-stopped`.\n    - `redis`: Defines a Redis in-memory data store service.\n      - Image: `redis:6.2-alpine`.\n      - Ports: Maps host port 6379 to container port 6379.\n      - Restart policy: `unless-stopped`.\n  - **Volumes**:\n    - `postgres_data`: A named Docker volume for persistent PostgreSQL data storage.\n- **Notable Patterns or Logic**:\n  - Docker Compose: Used for defining and running multi-container Docker applications.\n  - Environment variable interpolation: Uses `${VAR:-default}` syntax to allow configuration via `.env` files.\n  - Database migrations: Automatically applies SQL scripts from `./backend/adapter/postgres/migrations` on container startup.\n"
}