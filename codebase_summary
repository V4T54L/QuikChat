{
  "Makefile": "- File Path: Makefile\n- High-Level Purpose: Provides a set of convenient commands (targets) for managing the development lifecycle of the chat application, including Docker operations, database migrations, and Go application build/run.\n- Definitions in the File:\n  - Targets:\n    - `up`: Starts Docker containers defined in `docker-compose.yml`.\n    - `down`: Stops Docker containers.\n    - `logs`: Tails logs from Docker containers.\n    - `psql`: Connects to the PostgreSQL container using `psql`.\n    - `migrate-up`: Applies database migration SQL scripts to the PostgreSQL database.\n    - `run`: Executes the Go backend application directly.\n    - `build`: Compiles the Go backend application into an executable binary.\n- Notable Patterns or Logic: This is a standard Makefile, used for automating common development and deployment tasks.\n",
  "backend/cmd/server/main.go": "- File Path: backend/cmd/server/main.go\n- High-Level Purpose: The main entry point for the backend Go application, responsible for initializing all core components and starting the HTTP server.\n- Definitions in the File:\n  - Functions / Methods:\n    - `main()`: The primary function that executes when the program starts. It loads configuration, initializes PostgreSQL database connection, creates user and session repositories, sets up the authentication service (use case), configures the HTTP router, and starts the HTTP server.\n- Notable Patterns or Logic: This file demonstrates the application's bootstrap process, including dependency injection (manual) and server startup.\n",
  "backend/go.mod": "- File Path: backend/go.mod\n- High-Level Purpose: Defines the Go module path and the required Go version for the `chat-app` project.\n- Definitions in the File:\n  - Module: `chat-app`\n  - Go Version: `1.24.0`\n- Notable Patterns or Logic: This is a standard Go module definition file, managing project dependencies and Go version.\n",
  "backend/internal/adapter/postgres/postgres.go": "- File Path: backend/internal/adapter/postgres/postgres.go\n- High-Level Purpose: Provides a utility function to establish and verify a connection to a PostgreSQL database.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewDB(databaseURL string) *pgxpool.Pool`: A public function that creates a new PostgreSQL connection pool using the provided `databaseURL`, pings the database to ensure connectivity, and returns the connection pool. It logs fatal errors if connection fails.\n- Notable Patterns or Logic: This file acts as a database connection factory, centralizing the logic for connecting to PostgreSQL.\n",
  "backend/internal/adapter/postgres/session_repository.go": "- File Path: backend/internal/adapter/postgres/session_repository.go\n- High-Level Purpose: Implements the `SessionRepository` interface using PostgreSQL as the persistent storage.\n- Definitions in the File:\n  - Structs:\n    - `postgresSessionRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresSessionRepository(db *pgxpool.Pool) repository.SessionRepository`: A public constructor function that returns a new instance of `postgresSessionRepository` as a `repository.SessionRepository` interface.\n    - `Store(ctx context.Context, session *domain.Session) error`: A public method on `postgresSessionRepository` that inserts a new session record into the `sessions` table.\n    - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: A public method on `postgresSessionRepository` that retrieves a session by its ID from the `sessions` table. Returns `nil, nil` if not found.\n    - `Delete(ctx context.Context, id string) error`: A public method on `postgresSessionRepository` that deletes a session by its ID from the `sessions` table.\n    - `DeleteAllForUser(ctx context.Context, userID string) error`: A public method on `postgresSessionRepository` that deletes all sessions associated with a specific user ID from the `sessions` table.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `SessionRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for session management.\n",
  "backend/internal/adapter/postgres/user_repository.go": "- File Path: backend/internal/adapter/postgres/user_repository.go\n- High-Level Purpose: Implements the `UserRepository` interface using PostgreSQL as the persistent storage.\n- Definitions in the File:\n  - Structs:\n    - `postgresUserRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresUserRepository(db *pgxpool.Pool) repository.UserRepository`: A public constructor function that returns a new instance of `postgresUserRepository` as a `repository.UserRepository` interface.\n    - `Create(ctx context.Context, user *domain.User) error`: A public method on `postgresUserRepository` that inserts a new user record into the `users` table.\n    - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their username from the `users` table. Returns `nil, nil` if not found.\n    - `GetByID(ctx context.Context, id string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their ID from the `users` table. Returns `nil, nil` if not found.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `UserRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for user management.\n",
  "backend/internal/delivery/http/handler/auth_handler.go": "- File Path: backend/internal/delivery/http/handler/auth_handler.go\n- High-Level Purpose: Implements HTTP handlers for authentication-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - Structs:\n    - `AuthHandler`: Holds a reference to the `usecase.AuthUsecase` to perform authentication operations.\n  - Functions / Methods:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: A public constructor function that creates and returns a new `AuthHandler` instance.\n    - `SignUp(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user registration. It decodes the request body, calls the `SignUp` use case, and responds with the created user or an error.\n    - `Login(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user login. It decodes the request body, calls the `Login` use case, and responds with authentication tokens or an error.\n    - `Refresh(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for refreshing authentication tokens. It decodes the refresh token from the request body, calls the `Refresh` use case, and responds with new tokens or an error.\n    - `Logout(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user logout. It decodes the refresh token, calls the `Logout` use case, and responds with a `204 No Content` status or an error.\n    - `handleAuthError(w http.ResponseWriter, err error)`: An internal helper function that maps specific authentication service errors to appropriate HTTP status codes and error messages for client responses.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern, acting as the entry point for HTTP requests and orchestrating the interaction with the use case layer.\n",
  "backend/internal/delivery/http/middleware/auth_middleware.go": "- File Path: backend/internal/delivery/http/middleware/auth_middleware.go\n- High-Level Purpose: Provides an HTTP middleware function to authenticate incoming requests using JWTs and inject the authenticated user's ID into the request context.\n- Definitions in the File:\n  - Types:\n    - `contextKey`: A custom string type used for context keys to avoid collisions.\n  - Constants:\n    - `UserIDContextKey`: A `contextKey` constant used to store and retrieve the authenticated user's ID from the request context.\n  - Functions / Methods:\n    - `AuthMiddleware(cfg *config.Config) func(next http.Handler) http.Handler`: A public function that returns an `http.Handler` middleware. This middleware extracts a Bearer token from the Authorization header, validates it using the JWT secret from the config, and if valid, adds the `UserID` from the token claims to the request context before passing it to the next handler.\n- Notable Patterns or Logic: This file implements an HTTP middleware pattern, specifically for authentication and context enrichment.\n",
  "backend/internal/delivery/http/router.go": "- File Path: backend/internal/delivery/http/router.go\n- High-Level Purpose: Configures and sets up the main HTTP router for the application, including global middleware and specific API routes for authentication.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewRouter(authUsecase usecase.AuthUsecase) http.Handler`: A public function that initializes a `chi.Router`. It applies global middleware such as `Logger`, `Recoverer`, and `Heartbeat`. It then defines a route group for `/api/v1/auth` and registers `AuthHandler` methods (`SignUp`, `Login`, `Refresh`, `Logout`) to their respective HTTP paths.\n- Notable Patterns or Logic: This file implements the \"Router\" pattern, centralizing the definition of HTTP endpoints and applying common middleware.\n",
  "backend/internal/domain/session.go": "- File Path: backend/internal/domain/session.go\n- High-Level Purpose: Defines the `Session` domain entity, representing a user's active session.\n- Definitions in the File:\n  - Structs:\n    - `Session`: Represents a user session.\n      - Fields: `ID` (string, acts as the refresh token), `UserID` (string), `ExpiresAt` (time.Time), `CreatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for session management.\n",
  "backend/internal/domain/user.go": "- File Path: backend/internal/domain/user.go\n- High-Level Purpose: Defines the `User` domain entity, representing a user in the system.\n- Definitions in the File:\n  - Structs:\n    - `User`: Represents a user account.\n      - Fields: `ID` (string), `Username` (string), `PasswordHash` (string, marked to be ignored in JSON serialization), `ProfilePicURL` (string), `CreatedAt` (time.Time), `UpdatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for user management.\n",
  "backend/internal/repository/session_repo.go": "- File Path: backend/internal/repository/session_repo.go\n- High-Level Purpose: Defines the interface for session data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `SessionRepository`: An interface defining methods for interacting with session data.\n      - `Store(ctx context.Context, session *domain.Session) error`: Stores a new session.\n      - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: Retrieves a session by its ID.\n      - `Delete(ctx context.Context, id string) error`: Deletes a session by its ID.\n      - `DeleteAllForUser(ctx context.Context, userID string) error`: Deletes all sessions for a specific user.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for session entities.\n",
  "backend/internal/repository/user_repo.go": "- File Path: backend/internal/repository/user_repo.go\n- High-Level Purpose: Defines the interface for user data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `UserRepository`: An interface defining methods for interacting with user data.\n      - `Create(ctx context.Context, user *domain.User) error`: Stores a new user.\n      - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: Retrieves a user by their username.\n      - `GetByID(ctx context.Context, id string) (*domain.User, error)`: Retrieves a user by their unique ID.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for user entities.\n",
  "backend/internal/service/auth_service.go": "- File Path: backend/internal/service/auth_service.go\n- High-Level Purpose: Implements the `AuthUsecase` interface, containing the core business logic for user authentication, registration, and session management.\n- Definitions in the File:\n  - Variables:\n    - `ErrUserExists`, `ErrUserNotFound`, `ErrInvalidCredentials`, `ErrInvalidUsername`, `ErrInvalidPassword`, `ErrSessionNotFound`, `ErrSessionExpired`: Public error constants representing specific authentication-related business logic errors.\n  - Structs:\n    - `authService`: An internal struct that holds dependencies: `UserRepository`, `SessionRepository`, and `Config`.\n  - Functions / Methods:\n    - `NewAuthService(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, cfg *config.Config) usecase.AuthUsecase`: A public constructor function that creates and returns a new `authService` instance as an `usecase.AuthUsecase` interface.\n    - `SignUp(ctx context.Context, input usecase.SignUpInput) (*domain.User, error)`: A public method on `authService` that handles user registration. It validates username and password, checks for existing users, hashes the password, and creates a new user in the repository.\n    - `Login(ctx context.Context, input usecase.LoginInput) (*usecase.AuthTokens, error)`: A public method on `authService` that handles user login. It retrieves the user, verifies the password hash, deletes any existing sessions for the user (single device policy), and creates a new session.\n    - `Refresh(ctx context.Context, refreshToken string) (*usecase.AuthTokens, error)`: A public method on `authService` that refreshes authentication tokens. It retrieves and validates the existing session (refresh token), checks for expiration, deletes the old session, and creates a new one.\n    - `Logout(ctx context.Context, refreshToken string) error`: A public method on `authService` that handles user logout by deleting the specified refresh token (session).\n    - `createSession(ctx context.Context, userID string) (*usecase.AuthTokens, error)`: An internal helper method that generates a new access token and creates a new session (refresh token) in the repository for a given user ID.\n    - `validateUsername(username string) error`: An internal helper function that validates the format and length of a username using a regular expression.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic and orchestrating interactions between repositories and utility functions. It also defines and handles specific business errors.",
  "backend/internal/usecase/auth_ucase.go": "- File Path: backend/internal/usecase/auth_ucase.go\n- High-Level Purpose: Defines the interface for authentication-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `SignUpInput`: DTO for user registration requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `LoginInput`: DTO for user login requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `AuthTokens`: DTO for returning authentication tokens.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n  - Interfaces:\n    - `AuthUsecase`: An interface defining the core authentication operations.\n      - `SignUp(ctx context.Context, input SignUpInput) (*domain.User, error)`: Registers a new user.\n      - `Login(ctx context.Context, input LoginInput) (*AuthTokens, error)`: Authenticates a user and issues tokens.\n      - `Refresh(ctx context.Context, refreshToken string) (*AuthTokens, error)`: Refreshes access and refresh tokens.\n      - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a refresh token/session.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input/output DTOs, separating business logic from delivery mechanisms.\n",
  "backend/migrations/000001_create_users_table.up.sql": "- File Path: backend/migrations/000001_create_users_table.up.sql\n- High-Level Purpose: SQL script to create the `users` table and related extensions/indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `users`: Stores user information.\n      - Columns: `id` (UUID, primary key, default generated), `username` (CITEXT, unique, not null), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR, default empty), `created_at` (TIMESTAMPTZ, default now), `updated_at` (TIMESTAMPTZ, default now).\n  - Extensions:\n    - `uuid-ossp`: Enables UUID generation functions.\n    - `citext`: Provides a case-insensitive text type.\n  - Indexes:\n    - `users_username_idx`: An index on the `username` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/migrations/000002_create_sessions_table.up.sql": "- File Path: backend/migrations/000002_create_sessions_table.up.sql\n- High-Level Purpose: SQL script to create the `sessions` table and related indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `sessions`: Stores user session information.\n      - Columns: `id` (UUID, primary key), `user_id` (UUID, not null, foreign key referencing `users` with cascade delete), `expires_at` (TIMESTAMPTZ, not null), `created_at` (TIMESTAMPTZ, default now).\n  - Indexes:\n    - `sessions_user_id_idx`: An index on the `user_id` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/pkg/config/config.go": "- File Path: backend/pkg/config/config.go\n- High-Level Purpose: Manages the loading and provision of application configuration settings from environment variables or a `.env` file.\n- Definitions in the File:\n  - Structs:\n    - `Config`: A struct holding various application configuration parameters.\n      - Fields: `Port` (string), `DatabaseURL` (string), `RedisURL` (string), `JWTSecret` (string), `AccessTokenTTL` (time.Duration), `RefreshTokenTTL` (time.Duration).\n  - Functions / Methods:\n    - `Load() *Config`: A public function that attempts to load environment variables from a `.env` file (if present) and then populates a `Config` struct with values from environment variables or provided fallbacks.\n    - `getEnv(key, fallback string) string`: An internal helper function that retrieves an environment variable by `key` or returns a `fallback` value if not found.\n- Notable Patterns or Logic: Implements a configuration loading pattern, prioritizing environment variables and providing sensible defaults.\n",
  "backend/pkg/util/hash.go": "- File Path: backend/pkg/util/hash.go\n- High-Level Purpose: Provides utility functions for securely hashing passwords and comparing plain text passwords against hashes using bcrypt.\n- Definitions in the File:\n  - Functions / Methods:\n    - `HashPassword(password string) (string, error)`: A public function that takes a plain text password and returns its bcrypt hash.\n    - `CheckPasswordHash(password, hash string) bool`: A public function that compares a plain text password with a bcrypt hash, returning `true` if they match, `false` otherwise.\n- Notable Patterns or Logic: This file contains cryptographic utility functions, specifically for password management.\n",
  "backend/pkg/util/jwt.go": "- File Path: backend/pkg/util/jwt.go\n- High-Level Purpose: Provides utility functions for generating and validating JSON Web Tokens (JWTs) for authentication.\n- Definitions in the File:\n  - Structs:\n    - `Claims`: A custom struct embedding `jwt.RegisteredClaims` and adding a `UserID` field, used for JWT payload.\n  - Functions / Methods:\n    - `GenerateAccessToken(userID, secret string, ttl time.Duration) (string, error)`: A public function that creates and signs a new JWT (access token) with the given user ID, secret key, and time-to-live (TTL).\n    - `ValidateToken(tokenString, secret string) (*Claims, error)`: A public function that parses and validates a JWT string using the provided secret key. It returns the custom `Claims` if the token is valid, otherwise an error.\n- Notable Patterns or Logic: This file encapsulates JWT-related operations, providing a clear interface for token management.\n",
  "backend/pkg/util/uuid.go": "- File Path: backend/pkg/util/uuid.go\n- High-Level Purpose: Provides utility functions for generating new UUIDs and parsing UUID strings.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewUUID() string`: A public function that generates and returns a new universally unique identifier (UUID) as a string.\n    - `ParseUUID(s string) (uuid.UUID, error)`: A public function that attempts to parse a string into a `uuid.UUID` type, returning an error if the string is not a valid UUID.\n- Notable Patterns or Logic: This file contains general utility functions for UUID management.\n",
  "docker-compose.yml": "- File Path: docker-compose.yml\n- High-Level Purpose: Defines and configures the multi-container Docker environment for the chat application, including PostgreSQL and Redis services.\n- Definitions in the File:\n  - Services:\n    - `postgres`: A PostgreSQL database service.\n      - Image: `postgres:13`\n      - Restart policy: `always`\n      - Environment variables: `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB`.\n      - Ports: `5432:5432` (exposes Postgres port to host).\n      - Volumes: `postgres_data` (for persistent data).\n    - `redis`: A Redis in-memory data store service.\n      - Image: `redis:6-alpine`\n      - Restart policy: `always`\n      - Ports: `6379:6379` (exposes Redis port to host).\n      - Volumes: `redis_data` (for persistent data).\n  - Volumes:\n    - `postgres_data`: A named Docker volume for PostgreSQL data persistence.\n    - `redis_data`: A named Docker volume for Redis data persistence.\n- Notable Patterns or Logic: This is a standard Docker Compose configuration file, used for defining and running multi-container Docker applications.\n"
}