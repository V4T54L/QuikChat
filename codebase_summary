{
  ".env.example": "- **High-Level Purpose**: Provides an example configuration file for environment variables, detailing settings for the server, PostgreSQL database, Redis, JWT authentication, and file storage paths.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `SERVER_PORT` (string): The port on which the HTTP server will listen (default: 8080).\n    - `DB_HOST`, `DB_PORT`, `DB_USER`, `DB_PASSWORD`, `DB_NAME`, `DB_SSLMODE` (strings): Configuration parameters for connecting to the PostgreSQL database.\n    - `REDIS_ADDR`, `REDIS_PASSWORD` (strings): Configuration parameters for connecting to the Redis server.\n    - `JWT_SECRET` (string): The secret key used for signing and verifying JSON Web Tokens.\n    - `JWT_ACCESS_TOKEN_EXP_MIN` (int): The expiration time for access tokens in minutes (default: 10).\n    - `JWT_REFRESH_TOKEN_EXP_HOUR` (int): The expiration time for refresh tokens in hours (default: 8).\n    - `PROFILE_PIC_DIR` (string): The local filesystem directory where user profile pictures are stored.\n    - `STATIC_FILES_DIR` (string): The local directory for serving general static web files.\n    - `PROFILE_PIC_ROUTE` (string): The URL path under which profile pictures will be served.\n- **Notable Patterns or Logic**:\n  - Environment Variable Configuration: Standard practice for managing application settings that vary between environments.\n",
  "Makefile": "- **High-Level Purpose**: Defines common commands for building, running, and managing the application's Docker containers.\n- **Definitions in the File**:\n  - **Functions / Methods**: (N/A, this is a build script)\n  - **Variables / Constants**: (N/A, uses shell commands)\n- **Notable Patterns or Logic**:\n  - `run`: Target to execute the Go backend server.\n  - `docker-up`: Target to start the application's services (PostgreSQL, Redis) using Docker Compose in detached mode.\n  - `docker-down`: Target to stop the application's services using Docker Compose.\n",
  "backend/adapter/filesystem/local_storage.go": "- **High-Level Purpose**: Implements the `FileRepository` interface to save uploaded files to the local filesystem and generate their public URLs.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `localStorage`: Private struct implementing `repository.FileRepository`.\n      - Fields:\n        - `storageDir` (string): The local directory path where files will be stored.\n        - `routePath` (string): The base URL path from which stored files will be served.\n  - **Functions / Methods**:\n    - `NewLocalStorage(storageDir, routePath string) repository.FileRepository`: Public constructor. Creates and returns a new `localStorage` instance.\n    - `(*localStorage) Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Public method. Saves an uploaded `multipart.File` to the configured `storageDir` with a newly generated UUID filename, preserving the original extension. Returns the public URL path to the saved file.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction for file storage.\n  - Local filesystem interaction: Uses `os.Create`, `io.Copy`, and `filepath` for file operations.\n  - Unique filenames: Generates UUIDs for filenames to prevent collisions.\n",
  "backend/adapter/handler/http/auth_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for authentication-related API endpoints, such as user login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `loginRequest`: Private struct for decoding the JSON payload of a login request.\n      - Fields: `Username` (string), `Password` (string).\n    - `loginResponse`: Private struct for encoding the JSON payload of a successful login response.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n    - `refreshRequest`: Private struct for decoding the JSON payload of a refresh token request.\n      - Fields: `RefreshToken` (string).\n    - `refreshResponse`: Private struct for encoding the JSON payload of a successful refresh token response.\n      - Fields: `AccessToken` (string).\n    - `logoutRequest`: Private struct for decoding the JSON payload of a logout request.\n      - Fields: `RefreshToken` (string).\n  - **Functions / Methods**:\n    - `(*AuthHandler) Login(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user login. Decodes the request body, calls the `AuthUsecase` to perform login, and responds with access/refresh tokens or appropriate error messages.\n    - `(*AuthHandler) Refresh(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for refreshing access tokens. Decodes the request body, calls the `AuthUsecase` to refresh the token, and responds with a new access token or error.\n    - `(*AuthHandler) Logout(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user logout. Decodes the request body, calls the `AuthUsecase` to invalidate the session, and responds with a success message or error.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `AuthUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses.\n",
  "backend/adapter/handler/http/friend_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for friend-related API endpoints, enabling users to send, accept, reject, and list friend requests, as well as unfriend other users.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `req` (anonymous struct in `SendRequest`): Private struct for decoding the JSON payload of a friend request.\n      - Fields: `Username` (string).\n    - `req` (anonymous struct in `RespondToRequest`): Private struct for decoding the JSON payload of a friend request response.\n      - Fields: `Action` (string, \"accept\" or \"reject\").\n  - **Functions / Methods**:\n    - `(*FriendHandler) SendRequest(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to send a friend request to another user by username. Extracts the sender's ID from the context and the target username from the request body. Responds with `http.StatusCreated` or appropriate error codes (e.g., `StatusNotFound`, `StatusConflict`).\n    - `(*FriendHandler) RespondToRequest(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP PUT requests to accept or reject a pending friend request. Extracts the recipient's ID from the context, the requester's ID from the URL parameter, and the action (\"accept\"/\"reject\") from the request body. Responds with `http.StatusOK` or `StatusNotFound`.\n    - `(*FriendHandler) Unfriend(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP DELETE requests to remove an existing friend. Extracts the user's ID from the context and the friend's ID from the URL parameter. Responds with `http.StatusNoContent` or `StatusNotFound`.\n    - `(*FriendHandler) ListFriends(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to list all accepted friends of the authenticated user. Extracts the user's ID from the context. Responds with `http.StatusOK` and a list of user profiles.\n    - `(*FriendHandler) ListPendingRequests(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to list all pending friend requests for the authenticated user. Extracts the user's ID from the context. Responds with `http.StatusOK` and a list of user profiles.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `FriendUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Context usage: Retrieves authenticated `userID` from the request context, set by authentication middleware.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n",
  "backend/adapter/handler/http/group_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for group-related API endpoints, enabling users to create, join, leave, add/remove members from groups, and search for groups.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `req` (anonymous struct in `JoinGroup`, `AddMember`): Private struct for decoding JSON payloads.\n      - Fields: `Handle` (string) for `JoinGroup`, `Username` (string) for `AddMember`.\n  - **Variables / Constants**:\n    - `maxGroupPhotoSize` (int): Constant defining the maximum allowed size for group photos (200 KB).\n  - **Functions / Methods**:\n    - `(*GroupHandler) CreateGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to create a new group. Expects multipart form data for `handle`, `name`, and an optional `photo` file. Extracts the owner's ID from the context. Responds with `http.StatusCreated` and the new group details or appropriate error codes.\n    - `(*GroupHandler) JoinGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to join an existing group by its handle. Extracts the user's ID from the context and the group handle from the request body. Responds with `http.StatusOK` or `StatusNotFound`/`StatusConflict`.\n    - `(*GroupHandler) LeaveGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to leave a group. Extracts the user's ID from the context and the `groupID` from the URL parameter. Responds with `http.StatusOK` or `StatusNotFound`.\n    - `(*GroupHandler) AddMember(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to add a member to a group. Extracts the adder's ID from the context, `groupID` from the URL, and the new member's username from the request body. Responds with `http.StatusCreated` or `StatusForbidden`/`StatusConflict`.\n    - `(*GroupHandler) RemoveMember(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP DELETE requests to remove a member from a group. Extracts the owner's ID from the context, `groupID` and `memberID` from URL parameters. Responds with `http.StatusNoContent` or `StatusForbidden`/`StatusNotFound`.\n    - `(*GroupHandler) SearchGroups(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to search for groups by a query string in their handle. Extracts the query from URL parameters. Responds with `http.StatusOK` and a list of matching groups.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `GroupUsecase`.\n  - Multipart form parsing: Handles file uploads for group photos.\n  - Context usage: Retrieves authenticated `userID` (or `ownerID`/`adderID`) from the request context.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n",
  "backend/adapter/handler/http/handler.go": "- **High-Level Purpose**: Defines the base structs for various HTTP handlers and their constructors, facilitating dependency injection of use cases.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthHandler`: Public struct to hold the `AuthUsecase` dependency.\n      - Fields: `authUsecase` (usecase.AuthUsecase).\n    - `UserHandler`: Public struct to hold the `UserUsecase` dependency.\n      - Fields: `userUsecase` (usecase.UserUsecase).\n    - `FriendHandler`: Public struct to hold the `FriendUsecase` dependency.\n      - Fields: `friendUsecase` (usecase.FriendUsecase).\n    - `GroupHandler`: Public struct to hold the `GroupUsecase` dependency.\n      - Fields: `groupUsecase` (usecase.GroupUsecase).\n  - **Functions / Methods**:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: Public constructor. Creates a new `AuthHandler` instance.\n    - `NewUserHandler(userUsecase usecase.UserUsecase) *UserHandler`: Public constructor. Creates a new `UserHandler` instance.\n    - `NewFriendHandler(friendUsecase usecase.FriendUsecase) *FriendHandler`: Public constructor. Creates a new `FriendHandler` instance.\n    - `NewGroupHandler(groupUsecase usecase.GroupUsecase) *GroupHandler`: Public constructor. Creates a new `GroupHandler` instance.\n- **Notable Patterns or Logic**:\n  - Dependency Injection: Handlers are constructed with their required use case interfaces, promoting loose coupling.\n  - Handler Composition: Each handler struct encapsulates the logic for a specific domain (Auth, User, Friend, Group).\n",
  "backend/adapter/handler/http/user_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for user-related API endpoints, including user registration, retrieving user profiles, and updating user profiles.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `registerRequest`: Private struct for decoding the JSON payload of a user registration request.\n      - Fields: `Username` (string), `Password` (string).\n  - **Functions / Methods**:\n    - `(*UserHandler) Register(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user registration. Decodes the request body, calls the `UserUsecase` to register the user, and responds with the created user details or appropriate error messages.\n    - `(*UserHandler) GetUserByUsername(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to retrieve a user by their username. Extracts the username from the URL path, calls the `UserUsecase`, and responds with user details or `http.StatusNotFound` if not found.\n    - `(*UserHandler) UpdateProfile(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP PUT requests to update a user's profile. It extracts the authenticated `userID` from the request context, parses multipart form data for optional username, password, and profile picture updates, calls the `UserUsecase`, and responds with the updated user details or various validation/conflict errors.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `UserUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Multipart form parsing: Handles file uploads for profile pictures.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n  - Context usage: Retrieves `userID` from the request context, which is set by authentication middleware.\n",
  "backend/adapter/handler/http/web_handler.go": "- **High-Level Purpose**: Serves the main `app.html` template for the web frontend, acting as the entry point for the single-page application.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `WebHandler`: Public struct.\n      - Fields: `templates` (*template.Template): Stores the parsed HTML templates.\n  - **Functions / Methods**:\n    - `NewWebHandler(templatesDir string) *WebHandler`: Public constructor. Initializes a `WebHandler` by parsing all `.html` files in the specified `templatesDir`. Logs a fatal error if template parsing fails.\n    - `(*WebHandler) ServeApp(w http.ResponseWriter, r *http.Request)`: Public method. Executes the `app.html` template and writes the rendered HTML to the HTTP response. Logs and sends an `Internal Server Error` if template execution fails.\n- **Notable Patterns or Logic**:\n  - HTML Templating: Uses Go's `html/template` package to serve dynamic HTML.\n  - HTTP Handler: Implements `http.Handler` implicitly for serving web content.\n",
  "backend/adapter/handler/ws/client.go": "- **High-Level Purpose**: Represents a single connected WebSocket client, managing its communication (reading inbound messages, writing outbound messages) and maintaining its lifecycle within the WebSocket `Hub`.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Client`: Public struct. Represents an individual WebSocket client connection.\n      - Fields:\n        - `hub` (*Hub): A pointer to the central WebSocket hub.\n        - `conn` (*websocket.Conn): The underlying Gorilla WebSocket connection.\n        - `send` (chan []byte): A buffered channel for messages to be sent to this client.\n        - `userID` (uuid.UUID): The authenticated ID of the user associated with this client.\n  - **Functions / Methods**:\n    - `(*Client) readPump()`: Private method. Continuously reads messages from the WebSocket connection, sets read deadlines, handles pong messages, and sends received messages to the `Hub`'s broadcast channel. It unregisters the client and closes the connection on error or disconnect.\n    - `(*Client) writePump()`: Private method. Continuously writes messages from the `send` channel to the WebSocket connection. It handles write deadlines, sends ping messages periodically, and aggregates multiple queued messages into a single WebSocket frame for efficiency.\n  - **Variables / Constants**:\n    - `writeWait` (time.Duration): Private constant. Time allowed to write a message to the peer.\n    - `pongWait` (time.Duration): Private constant. Time allowed to read the next pong message from the peer.\n    - `pingPeriod` (time.Duration): Private constant. Send pings to peer with this period. Must be less than `pongWait`.\n    - `maxMessageSize` (int): Private constant. Maximum message size allowed from peer.\n    - `newline`, `space` ([]byte): Private constants. Byte slices for newline and space characters, used for message trimming.\n- **Notable Patterns or Logic**:\n  - Concurrency: Uses separate goroutines (`readPump`, `writePump`) for reading from and writing to the WebSocket connection.\n  - Heartbeat: Implements ping/pong messages to keep the connection alive and detect unresponsive clients.\n  - Buffered Channel: `send` channel buffers outbound messages, allowing the `Hub` to send messages without blocking.\n",
  "backend/adapter/handler/ws/handler.go": "- **High-Level Purpose**: Provides the HTTP handler responsible for upgrading incoming HTTP requests to WebSocket connections and integrating new clients into the WebSocket `Hub`.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `ServeWs(hub *Hub, w http.ResponseWriter, r *http.Request)`: Public function. Handles the WebSocket upgrade. It extracts the authenticated `userID` from the request context, upgrades the HTTP connection to a WebSocket, creates a new `Client` instance, registers it with the `Hub`, and starts `readPump` and `writePump` goroutines for the client.\n  - **Variables / Constants**:\n    - `upgrader` (websocket.Upgrader): Private global variable. Configures the WebSocket upgrader with buffer sizes and allows all origins for now.\n- **Notable Patterns or Logic**:\n  - WebSocket Handler: Uses `gorilla/websocket` to manage WebSocket connections.\n  - Context Usage: Retrieves `userID` from the request context, which is typically set by an authentication middleware.\n",
  "backend/adapter/handler/ws/hub.go": "- **High-Level Purpose**: Manages the lifecycle of WebSocket clients, broadcasts messages, and processes inbound client messages, relaying them as events to recipients and storing them durably.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `ClientMessage`: Public struct. Represents a message received from a client, containing the `Client` and the raw `message` bytes.\n    - `Hub`: Public struct. The central WebSocket hub.\n      - Fields:\n        - `clients` (map[uuid.UUID]*Client): Map of registered clients, keyed by `userID`.\n        - `broadcast` (chan *ClientMessage): Channel for inbound messages from clients.\n        - `register` (chan *Client): Channel for new client registration requests.\n        - `unregister` (chan *Client): Channel for client unregistration requests.\n        - `eventUsecase` (usecase.EventUsecase): Dependency for event management.\n        - `groupUsecase` (usecase.GroupUsecase): Dependency for group details and member listing.\n        - `mu` (sync.RWMutex): Mutex for protecting access to the `clients` map.\n  - **Functions / Methods**:\n    - `NewHub(eventUsecase usecase.EventUsecase, groupUsecase usecase.GroupUsecase) *Hub`: Public constructor. Creates and returns a new `Hub` instance with injected dependencies.\n    - `(*Hub) Run()`: Public method. The main event loop for the hub. It continuously listens on `register`, `unregister`, and `broadcast` channels and processes requests accordingly.\n    - `(*Hub) GetClientCount() int`: Public method. Returns the current number of connected clients.\n    - `(*Hub) handleMessage(sender *Client, rawMessage []byte)`: Private method. Unmarshals incoming raw WebSocket messages, dispatches them based on `msg.Type`, and calls `processAndRelayMessage` for \"message_sent\" types.\n    - `(*Hub) processAndRelayMessage(senderID uuid.UUID, inbound InboundMessage)`: Private method. Processes an inbound message: constructs an `OutboundMessage` payload, determines recipients (individual user or all group members), creates and stores `EventMessageSent` events for all recipients via `eventUsecase`, delivers these events to online clients, and sends a `EventMessageAck` event back to the sender.\n    - `(*Hub) DeliverEvent(event *models.Event)`: Public method. Attempts to send a marshaled `models.Event` to the `send` channel of the target client if they are currently connected. If the client's buffer is full, it unregisters the client.\n- **Notable Patterns or Logic**:\n  - Concurrency: Uses channels (`broadcast`, `register`, `unregister`) to safely communicate with clients and manage their state.\n  - Centralized Message Handling: The `Run` method acts as a central dispatcher for all client-related operations.\n  - Event-driven communication: Relays messages as `models.Event` objects, leveraging the `EventUsecase` for persistence and `DeliverEvent` for real-time delivery.\n  - Group Messaging: Logic to determine if a message is for a group and then fan out to all group members.\n  - Message Acknowledgment: Sends an `EventMessageAck` back to the sender.\n",
  "backend/adapter/handler/ws/message.go": "- **High-Level Purpose**: Defines the data structures used for communication over WebSocket connections, categorizing messages into generic, inbound (client to server), and outbound (server to client) formats.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Message`: Public struct representing a generic WebSocket message.\n      - Fields:\n        - `Type` (string): The type of the message (e.g., \"message_sent\").\n        - `Payload` (json.RawMessage): A raw JSON payload containing message-specific data.\n    - `InboundMessage`: Public struct representing a message received from a client.\n      - Fields:\n        - `Content` (string): The textual content of the message.\n        - `RecipientID` (uuid.UUID): The ID of the intended recipient, which can be a user or a group.\n    - `OutboundMessage`: Public struct representing a message sent to a client.\n      - Fields:\n        - `ID` (uuid.UUID): Unique identifier for the message.\n        - `Content` (string): The textual content of the message.\n        - `SenderID` (uuid.UUID): The ID of the user who sent the message.\n        - `RecipientID` (uuid.UUID): The ID of the recipient (user or group).\n        - `Timestamp` (string): The timestamp when the message was sent.\n- **Notable Patterns or Logic**:\n  - Data Transfer Objects (DTOs): Structures are designed for JSON serialization/deserialization for WebSocket payloads.\n",
  "backend/adapter/middleware/auth.go": "- **High-Level Purpose**: Provides an HTTP middleware for authenticating requests using JWT access tokens and injecting the authenticated user's ID into the request context.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthMiddleware`: Public struct to hold the JWT secret.\n      - Fields:\n        - `jwtSecret` (string): The secret key used to validate JWTs.\n  - **Functions / Methods**:\n    - `NewAuthMiddleware(jwtSecret string) *AuthMiddleware`: Public constructor. Creates a new `AuthMiddleware` instance.\n    - `(*AuthMiddleware) Validate(next http.Handler) http.Handler`: Public method. Returns an `http.Handler` that acts as middleware. It validates the \"Authorization: Bearer \u003ctoken\u003e\" header, parses the JWT, verifies its signature and validity, extracts the `user_id` claim, and injects it into the request context. Responds with `http.StatusUnauthorized` if validation fails.\n  - **Variables / Constants**:\n    - `UserIDKey` (contextKey): A private constant key used to store and retrieve the authenticated user's UUID from the request context.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add authentication logic.\n  - JWT validation: Uses `github.com/golang-jwt/jwt/v5` for token parsing and validation.\n",
  "backend/adapter/middleware/logging.go": "- **High-Level Purpose**: Provides a simple HTTP middleware for logging incoming requests and their processing time.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `Logging(next http.Handler) http.Handler`: Public function. Returns an `http.Handler` that logs the HTTP method, request URI, and the duration of the request processing to standard output.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add logging functionality.\n",
  "backend/adapter/middleware/ratelimit.go": "- **High-Level Purpose**: Provides an HTTP middleware for rate-limiting incoming requests based on the client's IP address, preventing abuse and ensuring fair resource usage.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `client`: Private struct. Represents a rate-limited client.\n      - Fields:\n        - `limiter` (*rate.Limiter): The `rate.Limiter` instance for this client.\n        - `lastSeen` (time.Time): Timestamp of the client's last activity.\n  - **Variables / Constants**:\n    - `clients` (map[string]*client): Private global map. Stores `client` structs, keyed by IP address.\n    - `mu` (sync.Mutex): Private global mutex. Protects access to the `clients` map.\n  - **Functions / Methods**:\n    - `init()`: Private function. Automatically called on package initialization. Starts the `cleanupClients` goroutine.\n    - `getClient(ip string) *rate.Limiter`: Private function. Retrieves or creates a `rate.Limiter` for a given IP address. Updates the `lastSeen` timestamp.\n    - `cleanupClients()`: Private function. A goroutine that periodically (every minute) iterates through the `clients` map and removes clients that haven't been seen for more than 3 minutes, preventing memory leaks.\n    - `RateLimit(next http.Handler) http.Handler`: Public function. Returns an `http.Handler` middleware. It extracts the client's IP, retrieves its `rate.Limiter`, and if the request exceeds the allowed rate (5 requests/second with a burst of 10), it responds with `http.StatusTooManyRequests`. Otherwise, it passes the request to the next handler.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add rate-limiting functionality.\n  - Concurrency: Uses a `sync.Mutex` to protect the shared `clients` map and a goroutine for background cleanup.\n  - Rate Limiting: Employs `golang.org/x/time/rate` for token bucket-based rate limiting.\n  - IP-based Limiting: Tracks requests per client IP address.\n  - Client Cleanup: Prevents memory exhaustion by removing inactive client entries.\n",
  "backend/adapter/postgres/db.go": "- **High-Level Purpose**: Provides a function to establish and verify a connection to a PostgreSQL database.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `NewDB(cfg *config.Config) (*sql.DB, error)`: Public function. Connects to a PostgreSQL database using the provided configuration, opens the connection, and pings the database to ensure connectivity. Returns a `*sql.DB` instance or an error.\n",
  "backend/adapter/postgres/event_repo.go": "- **High-Level Purpose**: Implements the `EventRepository` interface using PostgreSQL as the durable data store for application events.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresEventRepository`: Private struct implementing `repository.EventRepository`.\n      - Fields: `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresEventRepository(db *sql.DB) repository.EventRepository`: Public constructor. Creates and returns a new `postgresEventRepository` instance.\n    - `(*postgresEventRepository) Store(ctx context.Context, event *models.Event) error`: Public method. Inserts a single event record into the `events` table.\n    - `(*postgresEventRepository) StoreBatch(ctx context.Context, events []*models.Event) error`: Public method. Inserts a batch of events into the `events` table using PostgreSQL's `COPY` protocol within a transaction for efficient bulk insertion.\n    - `(*postgresEventRepository) FetchUndelivered(ctx context.Context, userID uuid.UUID, cursor time.Time, limit int) ([]*models.Event, error)`: Public method. Retrieves a list of undelivered events for a specific `userID`, ordered by `created_at` and filtered by a `cursor` timestamp.\n    - `(*postgresEventRepository) Delete(ctx context.Context, eventID uuid.UUID) error`: Public method. Deletes a specific event from the `events` table by its ID.\n    - `(*postgresEventRepository) BufferEvent(ctx context.Context, event *models.Event) error`: Public method. No-op, as this implementation is for durable storage, not Redis buffering.\n    - `(*postgresEventRepository) GetBufferedEvents(ctx context.Context, count int) ([]*models.Event, error)`: Public method. No-op.\n    - `(*postgresEventRepository) DeleteBufferedEvents(ctx context.Context, events []*models.Event) error`: Public method. No-op.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction for event data access.\n  - PostgreSQL Interaction: Uses `database/sql` for executing SQL queries.\n  - Batch Insertion: Employs `pq.CopyIn` for high-performance bulk data insertion.\n  - Transaction Management: `StoreBatch` uses a transaction to ensure atomicity.\n",
  "backend/adapter/postgres/friendship_repo.go": "- **High-Level Purpose**: Implements the `FriendshipRepository` interface, providing PostgreSQL-specific data access operations for managing user friendships and friend requests.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresFriendshipRepository`: Private struct implementing `repository.FriendshipRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresFriendshipRepository(db *sql.DB) repository.FriendshipRepository`: Public constructor. Creates and returns a new `postgresFriendshipRepository` instance.\n    - `normalizeUserIDs(userID1, userID2 uuid.UUID) (uuid.UUID, uuid.UUID)`: Private helper function. Ensures that `userID1` is always lexicographically smaller than `userID2` to maintain a canonical order for friendship records, preventing duplicate entries (e.g., A-B and B-A).\n    - `(*postgresFriendshipRepository) Create(ctx context.Context, friendship *models.Friendship) error`: Public method. Inserts a new friendship record into the `friendships` table. Handles `unique_violation` errors by returning `models.ErrFriendRequestExists`.\n    - `(*postgresFriendshipRepository) UpdateStatus(ctx context.Context, userID1, userID2 uuid.UUID, status models.FriendshipStatus) error`: Public method. Updates the status of an existing friendship record. Returns `models.ErrFriendRequestNotFound` if no record is updated.\n    - `(*postgresFriendshipRepository) Delete(ctx context.Context, userID1, userID2 uuid.UUID) error`: Public method. Deletes a friendship record from the `friendships` table. Returns `models.ErrNotFriends` if no record is deleted.\n    - `(*postgresFriendshipRepository) Find(ctx context.Context, userID1, userID2 uuid.UUID) (*models.Friendship, error)`: Public method. Retrieves a friendship record by the two user IDs. Returns `models.ErrFriendRequestNotFound` if no record is found.\n    - `(*postgresFriendshipRepository) ListByUserID(ctx context.Context, userID uuid.UUID, status models.FriendshipStatus) ([]*models.User, error)`: Public method. Lists users involved in friendships with a given `userID` that match a specific `status` (e.g., accepted friends, pending requests).\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for friendships.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Canonical ID ordering: `normalizeUserIDs` ensures consistent storage and retrieval of friendship pairs.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrFriendRequestNotFound` and PostgreSQL unique constraint errors to `models.ErrFriendRequestExists`.\n",
  "backend/adapter/postgres/group_repo.go": "- **High-Level Purpose**: Implements the `GroupRepository` interface, providing PostgreSQL-specific data access operations for managing groups and their members.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresGroupRepository`: Private struct implementing `repository.GroupRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresGroupRepository(db *sql.DB) repository.GroupRepository`: Public constructor. Creates and returns a new `postgresGroupRepository` instance.\n    - `(*postgresGroupRepository) Create(ctx context.Context, group *models.Group) error`: Public method. Inserts a new group into the `groups` table and immediately adds the owner as a member in a single transaction. Handles `unique_violation` errors for group handles.\n    - `(*postgresGroupRepository) Update(ctx context.Context, group *models.Group) error`: Public method. Updates a group's `name`, `photo_url`, and `owner_id`. Returns `models.ErrGroupNotFound` if no group is updated.\n    - `(*postgresGroupRepository) Delete(ctx context.Context, groupID uuid.UUID) error`: Public method. Deletes a group by its ID.\n    - `(*postgresGroupRepository) FindByID(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Public method. Retrieves a group from the `groups` table by its UUID. Returns `models.ErrGroupNotFound` if no group is found.\n    - `(*postgresGroupRepository) FindByHandle(ctx context.Context, handle string) (*models.Group, error)`: Public method. Retrieves a group from the `groups` table by its handle (case-insensitive). Returns `models.ErrGroupNotFound` if no group is found.\n    - `(*postgresGroupRepository) FuzzySearchByHandle(ctx context.Context, query string, limit int) ([]*models.Group, error)`: Public method. Performs a case-insensitive `LIKE` search on group handles.\n    - `(*postgresGroupRepository) AddMember(ctx context.Context, member *models.GroupMember) error`: Public method. Inserts a new member into the `group_members` table. Handles `unique_violation` errors by returning `models.ErrAlreadyGroupMember`.\n    - `(*postgresGroupRepository) RemoveMember(ctx context.Context, groupID, userID uuid.UUID) error`: Public method. Deletes a member from the `group_members` table. Returns `models.ErrNotGroupMember` if no member is removed.\n    - `(*postgresGroupRepository) FindMember(ctx context.Context, groupID, userID uuid.UUID) (*models.GroupMember, error)`: Public method. Retrieves a specific group member record. Returns `models.ErrNotGroupMember` if not found.\n    - `(*postgresGroupRepository) ListMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Public method. Lists all users who are members of a specific group, ordered by join time.\n    - `(*postgresGroupRepository) GetOldestMember(ctx context.Context, groupID uuid.UUID) (*models.User, error)`: Public method. Retrieves the user who joined the group earliest. Returns `models.ErrGroupNotFound` if no members are found.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for groups and members.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Transaction management: `Create` uses a transaction to ensure atomicity of group creation and owner membership.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrGroupNotFound`/`models.ErrNotGroupMember` and PostgreSQL unique constraint errors to `models.ErrGroupHandleTaken`/`models.ErrAlreadyGroupMember`.\n",
  "backend/adapter/postgres/migrations/000001_init.sql": "- **High-Level Purpose**: SQL script for initializing the PostgreSQL database schema, creating tables for users and sessions, and setting up necessary indexes.\n- **Definitions in the File**:\n  - **Tables**:\n    - `users`: Stores user accounts with `id` (UUID primary key), `username` (unique, VARCHAR), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR), and `created_at` (TIMESTAMPTZ).\n    - `sessions`: Stores user sessions with `refresh_token` (UUID primary key), `user_id` (UUID foreign key referencing `users`), and `expires_at` (TIMESTAMPTZ).\n  - **Indexes**:\n    - `idx_users_username`: B-tree index on the lowercase `username` for efficient case-insensitive lookups.\n    - `idx_sessions_user_id`: B-tree index on `user_id` for efficient session retrieval by user.\n  - **Extensions**:\n    - `uuid-ossp`: Enables generation of UUIDs within PostgreSQL.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines the initial state of the database schema.\n  - Foreign key constraints: `sessions.user_id` references `users.id` with `ON DELETE CASCADE`.\n",
  "backend/adapter/postgres/migrations/000002_add_social_features.sql": "- **High-Level Purpose**: SQL migration script to extend the database schema with tables and types required for social features, specifically friendships and groups.\n- **Definitions in the File**:\n  - **Types**:\n    - `friendship_status`: An ENUM type defining possible states for a friendship (`pending`, `accepted`).\n  - **Tables**:\n    - `friendships`: Stores friendship relationships between users.\n      - Columns: `user_id1` (UUID, foreign key to `users`), `user_id2` (UUID, foreign key to `users`), `status` (friendship_status), `created_at` (TIMESTAMPTZ).\n      - Constraints: Primary key on (`user_id1`, `user_id2`), `ON DELETE CASCADE` for user IDs, `CHECK (user_id1 \u003c user_id2)` for canonical ordering.\n    - `groups`: Stores information about chat groups.\n      - Columns: `id` (UUID primary key), `handle` (VARCHAR, unique), `name` (VARCHAR), `photo_url` (VARCHAR), `owner_id` (UUID, foreign key to `users`), `created_at` (TIMESTAMPTZ).\n      - Constraints: `ON DELETE SET NULL` for `owner_id`.\n    - `group_members`: Stores the many-to-many relationship between groups and users.\n      - Columns: `group_id` (UUID, foreign key to `groups`), `user_id` (UUID, foreign key to `users`), `joined_at` (TIMESTAMPTZ).\n      - Constraints: Primary key on (`group_id`, `user_id`), `ON DELETE CASCADE` for both foreign keys.\n  - **Indexes**:\n    - `idx_friendships_user_id1`: B-tree index on `user_id1` in `friendships`.\n    - `idx_friendships_user_id2`: B-tree index on `user_id2` in `friendships`.\n    - `idx_groups_handle`: B-tree index on the lowercase `handle` in `groups` for case-insensitive lookups.\n    - `idx_group_members_group_id`: B-tree index on `group_id` in `group_members`.\n    - `idx_group_members_user_id`: B-tree index on `user_id` in `group_members`.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines schema changes using `+migrate Up` and `+migrate Down` directives.\n  - ENUM type: Introduces a custom type for friendship status.\n  - Canonical ordering: The `CHECK (user_id1 \u003c user_id2)` constraint on `friendships` ensures that each pair of users has only one friendship record, regardless of the order of IDs provided.\n  - Foreign key constraints: Ensures data integrity and defines cascading behavior on deletion.\n",
  "backend/adapter/postgres/migrations/000003_add_events.sql": "- **High-Level Purpose**: SQL migration script to create the `events` table in the PostgreSQL database, designed for durable storage of application events.\n- **Definitions in the File**:\n  - **Tables**:\n    - `events`: Stores application events.\n      - Columns:\n        - `id` (UUID, PRIMARY KEY, DEFAULT uuid_generate_v4()): Unique identifier for the event.\n        - `type` (VARCHAR(50), NOT NULL): The category or type of the event.\n        - `payload` (JSONB, NOT NULL): A JSONB field to store event-specific data.\n        - `recipient_id` (UUID, NOT NULL, REFERENCES users(id) ON DELETE CASCADE): The ID of the user intended to receive this event.\n        - `sender_id` (UUID, REFERENCES users(id) ON DELETE SET NULL): Optional ID of the user who initiated the event.\n        - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT NOW()): Timestamp of when the event was created.\n  - **Indexes**:\n    - `idx_events_recipient_id_created_at`: B-tree index on `recipient_id` and `created_at` (descending) to optimize queries for events targeting a specific user, ordered by creation time.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines schema changes using `+migrate Up` and `+migrate Down` directives.\n  - Foreign key constraints: Ensures data integrity with `users` table and defines cascading delete behavior.\n",
  "backend/adapter/postgres/session_repo.go": "- **High-Level Purpose**: Implements the `SessionRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresSessionRepository`: Private struct implementing `repository.SessionRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresSessionRepository(db *sql.DB) repository.SessionRepository`: Public constructor. Creates and returns a new `postgresSessionRepository` instance.\n    - `(*postgresSessionRepository) Create(ctx context.Context, session *models.Session) error`: Public method. Inserts a new session into the `sessions` table. If a session with the same `refresh_token` already exists, it updates the `expires_at` field (UPSERT).\n    - `(*postgresSessionRepository) Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Public method. Retrieves a session from the `sessions` table by its `refresh_token`. Returns `models.ErrSessionNotFound` if no session is found.\n    - `(*postgresSessionRepository) Delete(ctx context.Context, refreshToken uuid.UUID) error`: Public method. Deletes a session from the `sessions` table by its `refresh_token`.\n    - `(*postgresSessionRepository) DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Public method. Deletes all sessions associated with a given `user_id` from the `sessions` table.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for sessions.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - UPSERT logic for session creation/update.\n",
  "backend/adapter/postgres/user_repo.go": "- **High-Level Purpose**: Implements the `UserRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresUserRepository`: Private struct implementing `repository.UserRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresUserRepository(db *sql.DB) repository.UserRepository`: Public constructor. Creates and returns a new `postgresUserRepository` instance.\n    - `(*postgresUserRepository) Create(ctx context.Context, user *models.User) error`: Public method. Inserts a new user into the `users` table. Handles `unique_violation` errors for the username.\n    - `(*postgresUserRepository) FindByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their username (case-insensitive). Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their UUID. Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) Update(ctx context.Context, user *models.User) error`: Public method. Updates an existing user's `username`, `password_hash`, and `profile_pic_url` in the `users` table. Handles `unique_violation` errors for the username.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for users.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrUserNotFound` and PostgreSQL unique constraint errors to `models.ErrUsernameTaken`.\n",
  "backend/adapter/redis/event_repo.go": "- **High-Level Purpose**: Implements the `EventRepository` interface using Redis, primarily for buffering application events in a sorted set before they are durably stored.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `redisEventRepository`: Private struct implementing `repository.EventRepository`.\n      - Fields: `rdb` (*redis.Client): The Redis client connection.\n  - **Functions / Methods**:\n    - `NewRedisEventRepository(rdb *redis.Client) repository.EventRepository`: Public constructor. Creates and returns a new `redisEventRepository` instance.\n    - `(*redisEventRepository) BufferEvent(ctx context.Context, event *models.Event) error`: Public method. Marshals an event to JSON and adds it to a Redis sorted set (`eventBufferKey`) using its `CreatedAt` timestamp as the score, allowing ordered retrieval.\n    - `(*redisEventRepository) GetBufferedEvents(ctx context.Context, count int) ([]*models.Event, error)`: Public method. Retrieves a specified number of events from the Redis sorted set, unmarshaling them into `models.Event` slices.\n    - `(*redisEventRepository) DeleteBufferedEvents(ctx context.Context, events []*models.Event) error`: Public method. Removes a batch of events from the Redis sorted set.\n    - `(*redisEventRepository) Store(ctx context.Context, event *models.Event) error`: Public method. No-op, as this implementation is for Redis buffering, not durable storage.\n    - `(*redisEventRepository) FetchUndelivered(ctx context.Context, userID uuid.UUID, cursor time.Time, limit int) ([]*models.Event, error)`: Public method. No-op.\n    - `(*redisEventRepository) Delete(ctx context.Context, eventID uuid.UUID) error`: Public method. No-op.\n    - `(*redisEventRepository) StoreBatch(ctx context.Context, events []*models.Event) error`: Public method. No-op.\n  - **Variables / Constants**:\n    - `eventBufferKey` (string): Private constant. The Redis key used for the sorted set that buffers events.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction for event buffering.\n  - Redis Sorted Set: Utilizes Redis's sorted set data structure for efficient ordered storage and retrieval of events.\n  - No-op methods: Explicitly implements parts of the interface that are handled by other repository implementations.\n",
  "backend/adapter/redis/redis.go": "- **High-Level Purpose**: Provides a utility function to initialize and configure a Redis client connection based on the application's configuration.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `NewRedisClient(cfg *config.Config) *redis.Client`: Public function. Creates a new `*redis.Client` instance using the Redis address and password specified in the provided `config.Config`.\n- **Notable Patterns or Logic**:\n  - Centralized Client Initialization: Encapsulates the logic for setting up the Redis client.\n",
  "backend/adapter/util/password.go": "- **High-Level Purpose**: Provides utility functions for securely hashing and verifying user passwords using bcrypt.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `HashPassword(password string) (string, error)`: Public function. Generates a bcrypt hash of the given plain-text password with a cost of 14.\n    - `CheckPasswordHash(password, hash string) bool`: Public function. Compares a plain-text password against a bcrypt hash, returning `true` if they match, `false` otherwise.\n",
  "backend/adapter/util/response.go": "- **High-Level Purpose**: Provides utility functions for sending standardized JSON and error HTTP responses.\n- **Functions / Methods**:\n  - `RespondWithError(w http.ResponseWriter, code int, message string)`: Public function. Sends an HTTP error response with a given status code and message, formatted as JSON.\n  - `RespondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Public function. Sends an HTTP JSON response with a given status code and payload.\n",
  "backend/adapter/util/token.go": "- **High-Level Purpose**: Provides an interface and implementation for generating JWT access tokens and UUID-based refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `TokenGenerator`: Interface for token generation.\n      - Methods:\n        - `GenerateAccessToken(userID uuid.UUID) (string, error)`: Generates a signed JWT access token.\n        - `GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Generates a UUID refresh token and its expiration time.\n        - `GetRefreshTokenExp() time.Duration`: Returns the configured refresh token expiration duration.\n  - **Classes / Structs**:\n    - `tokenGenerator`: Private struct implementing the `TokenGenerator` interface.\n      - Fields:\n        - `jwtSecret` (string): The secret key for signing JWTs.\n        - `accessTokenExp` (time.Duration): Duration for access token validity.\n        - `refreshTokenExp` (time.Duration): Duration for refresh token validity.\n  - **Functions / Methods**:\n    - `NewTokenGenerator(secret string, accessExp, refreshExp time.Duration) TokenGenerator`: Public constructor. Creates and returns a new `TokenGenerator` instance.\n    - `(*tokenGenerator) GenerateAccessToken(userID uuid.UUID) (string, error)`: Public method. Creates a new JWT with `user_id`, `exp` (expiration), and `iat` (issued at) claims, then signs it using HMAC-SHA256 with the configured secret.\n    - `(*tokenGenerator) GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Public method. Generates a new UUID and calculates its expiration time based on `refreshTokenExp`.\n    - `(*tokenGenerator) GetRefreshTokenExp() time.Duration`: Public method. Returns the configured `refreshTokenExp`.\n- **Notable Patterns or Logic**:\n  - Token generation utility: Centralizes the logic for creating different types of tokens.\n  - JWT (JSON Web Token) usage: Employs `github.com/golang-jwt/jwt/v5` for access token creation.\n",
  "backend/adapter/util/validation.go": "- **High-Level Purpose**: Provides utility functions for validating common input patterns and file properties, such as usernames, group handles, passwords, and profile pictures.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `usernameRegex` (*regexp.Regexp): Private regular expression for validating usernames (4-50 lowercase letters, digits, underscores).\n    - `groupHandleRegex` (*regexp.Regexp): Private regular expression for validating the group name part of a handle (4-50 lowercase letters, digits, underscores).\n  - **Functions / Methods**:\n    - `ValidateUsername(username string) error`: Public function. Validates if a username matches the defined regex pattern and length constraints.\n    - `ValidateGroupHandle(handle string) error`: Public function. Validates if a group handle is in the format \"prefix#groupname\" and if the \"groupname\" part matches the defined regex pattern and length constraints.\n    - `ValidatePassword(password string) error`: Public function. Validates if a password meets minimum length requirements (at least 8 characters).\n    - `ValidateProfilePic(header *multipart.FileHeader) error`: Public function. Validates the size (max 200 KB) and content type (png, jpg, jpeg, webp) of an uploaded profile picture.\n- **Notable Patterns or Logic**:\n  - Input Validation: Centralizes validation logic to ensure data integrity and security.\n  - Regular Expressions: Uses `regexp` package for pattern matching.\n  - File Validation: Checks both size and MIME type for uploaded files.\n",
  "backend/cmd/server/main.go": "- **High-Level Purpose**: The main entry point for the backend Go application. It initializes configuration, sets up database and Redis connections, wires together repositories, usecases, and HTTP/WebSocket handlers, defines API routes, starts a WebSocket hub, runs a background event persistence worker, and manages the HTTP server lifecycle.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `fileServer(r chi.Router, path string, root http.FileSystem)`: Private helper function. Configures a `chi.Router` to serve static files from a given `root` directory at a specified `path`.\n    - `main()`: Public function.\n      - Loads application configuration.\n      - Initializes PostgreSQL and Redis client connections.\n      - Instantiates all repository implementations (PostgreSQL, filesystem, Redis).\n      - Initializes `TokenGenerator` utility.\n      - Instantiates all usecase implementations, injecting their dependencies.\n      - Instantiates all HTTP handlers, injecting their respective usecases.\n      - Initializes and starts the WebSocket `Hub` in a goroutine.\n      - Starts a background goroutine for event persistence: periodically fetches buffered events from Redis and stores them durably in PostgreSQL, then deletes them from Redis.\n      - Configures the main HTTP router (`chi.NewRouter`) with middleware (recovery, logging, CORS, rate limiting, authentication).\n      - Defines public API routes (register, login, refresh, logout).\n      - Defines protected API routes (user profile, friends, groups, WebSocket endpoint), secured by `AuthMiddleware`.\n      - Serves static files and profile pictures.\n      - Serves the main web application (`app.html`).\n      - Starts the HTTP server and handles graceful shutdown on OS signals.\n- **Notable Patterns or Logic**:\n  - Dependency Injection: Extensive use of DI to wire components together.\n  - Layered Architecture: Clearly separates configuration, adapters (repositories, handlers), and business logic (usecases).\n  - HTTP Routing: Uses `go-chi/chi` for defining API and static file routes.\n  - Middleware: Applies logging, recovery, CORS, rate limiting, and JWT authentication middleware.\n  - WebSocket Integration: Sets up a WebSocket endpoint and integrates with a `Hub` for real-time communication.\n  - Background Worker: Implements a goroutine for asynchronous event persistence from Redis to PostgreSQL.\n  - Graceful Shutdown: Handles `SIGINT` and `SIGTERM` signals to gracefully shut down the HTTP server.\n  - Health Check and Metrics: Provides `/healthz` and `/metrics` endpoints.\n",
  "backend/config/config.go": "- **High-Level Purpose**: Manages the loading and parsing of application configuration settings from environment variables or a `.env` file.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Config`: Public struct. Holds all application configuration values.\n      - Fields:\n        - `ServerPort` (string): HTTP server listening port.\n        - `DBHost`, `DBPort`, `DBUser`, `DBPassword`, `DBName`, `DBSslMode` (strings): PostgreSQL connection details.\n        - `RedisAddr`, `RedisPassword` (strings): Redis connection details.\n        - `JWTSecret` (string): Secret key for JWT signing.\n        - `AccessTokenExp` (time.Duration): Access token expiration duration.\n        - `RefreshTokenExp` (time.Duration): Refresh token expiration duration.\n        - `ProfilePicDir` (string): Local directory for profile pictures.\n        - `ProfilePicRoute` (string): URL route for serving profile pictures.\n  - **Functions / Methods**:\n    - `getEnv(key, fallback string) string`: Private helper function. Retrieves an environment variable's value, providing a fallback if it's not set.\n    - `Load() (*Config, error)`: Public function. Loads environment variables (from `.env` if present), parses string values into appropriate types (e.g., `time.Duration`), and creates the `ProfilePicDir` if it doesn't exist.\n- **Notable Patterns or Logic**:\n  - Configuration Management: Centralizes the loading and parsing of all application settings.\n  - Environment Variable Loading: Uses `github.com/joho/godotenv` to support `.env` files for local development.\n",
  "backend/models/error.go": "- **High-Level Purpose**: Defines a collection of custom, application-specific error variables used throughout the codebase to provide more granular and descriptive error handling.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `ErrUserNotFound` (error): Indicates a user could not be found.\n    - `ErrUsernameTaken` (error): Indicates a username is already in use.\n    - `ErrInvalidCredentials` (error): Indicates incorrect username or password during authentication.\n    - `ErrSessionNotFound` (error): Indicates a session is not found or has expired.\n    - `ErrInvalidToken` (error): Indicates a JWT token is invalid.\n    - `ErrUnauthorized` (error): Indicates a user is not authorized to perform an action.\n    - `ErrInternalServer` (error): Generic error for unexpected server issues.\n    - `ErrBadRequest` (error): Generic error for malformed requests.\n    - `ErrFriendRequestExists` (error): Indicates a friend request between two users already exists.\n    - `ErrAlreadyFriends` (error): Indicates two users are already friends.\n    - `ErrNotFriends` (error): Indicates two users are not friends.\n    - `ErrFriendRequestNotFound` (error): Indicates a specific friend request could not be found.\n    - `ErrCannotFriendSelf` (error): Indicates a user attempted to send a friend request to themselves.\n    - `ErrGroupNotFound` (error): Indicates a group could not be found.\n    - `ErrGroupHandleTaken` (error): Indicates a group handle is already in use.\n    - `ErrNotGroupOwner` (error): Indicates a user is not the owner of a group.\n    - `ErrNotGroupMember` (error): Indicates a user is not a member of a group.\n    - `ErrAlreadyGroupMember` (error): Indicates a user is already a member of a group.\n    - `ErrCannotRemoveOwner` (error): Indicates an attempt to remove the group owner from a group.\n- **Notable Patterns or Logic**:\n  - Custom Error Definitions: Uses `errors.New` to create distinct error types.\n  - Centralized Error Management: Provides a single file for defining common application errors, promoting consistency.\n",
  "backend/models/event.go": "- **High-Level Purpose**: Defines the data structure for an application event and enumerates various types of events that can occur within the system.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Event`: Public struct representing a generic application event.\n      - Fields:\n        - `ID` (uuid.UUID): Unique identifier for the event.\n        - `Type` (EventType): The category of the event.\n        - `Payload` (json.RawMessage): Raw JSON data specific to the event's content.\n        - `RecipientID` (uuid.UUID): The ID of the user who is the primary recipient of this event.\n        - `CreatedAt` (time.Time): The timestamp when the event was created.\n        - `SenderID` (*uuid.UUID, optional): The ID of the user who initiated or sent the event.\n  - **Variables / Constants**:\n    - `EventType` (string): Public type alias for event categories.\n    - `EventMessageSent` (EventType): Constant for a message sent event.\n    - `EventMessageAck` (EventType): Constant for a message acknowledgment event.\n    - `EventFriendRequestReceived` (EventType): Constant for a friend request received event.\n    - `EventFriendRequestAccepted` (EventType): Constant for a friend request accepted event.\n    - `EventFriendRequestRejected` (EventType): Constant for a friend request rejected event.\n    - `EventUnfriended` (EventType): Constant for an unfriended event.\n    - `EventAddedToGroup` (EventType): Constant for a user being added to a group.\n    - `EventRemovedFromGroup` (EventType): Constant for a user being removed from a group.\n    - `EventUserJoinedGroup` (EventType): Constant for a user joining a group.\n    - `EventUserLeftGroup` (EventType): Constant for a user leaving a group.\n- **Notable Patterns or Logic**:\n  - Custom Type for Enum: Uses `EventType` string type for clear, self-documenting event categories.\n  - JSON Marshalling: Uses `json:\"-\"` to exclude `RecipientID` from JSON output and `omitempty` for `SenderID`.\n",
  "backend/models/friendship.go": "- **High-Level Purpose**: Defines the data structure for a friendship relationship between two users and enumerates possible friendship statuses.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Friendship`: Public struct representing a friendship or friend request.\n      - Fields:\n        - `UserID1` (uuid.UUID): The ID of the first user in the friendship.\n        - `UserID2` (uuid.UUID): The ID of the second user in the friendship.\n        - `Status` (FriendshipStatus): The current status of the friendship (e.g., pending, accepted).\n        - `CreatedAt` (time.Time): The timestamp when the friendship record was created.\n  - **Variables / Constants**:\n    - `FriendshipStatusPending` (FriendshipStatus): Constant indicating a pending friend request.\n    - `FriendshipStatusAccepted` (FriendshipStatus): Constant indicating an accepted friendship.\n",
  "backend/models/group.go": "- **High-Level Purpose**: Defines the data structures for a chat group and its members.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Group`: Public struct representing a chat group.\n      - Fields:\n        - `ID` (uuid.UUID): The unique identifier for the group.\n        - `Handle` (string): A unique, user-friendly handle for the group.\n        - `Name` (string): The display name of the group.\n        - `PhotoURL` (string): The URL or path to the group's profile picture.\n        - `OwnerID` (uuid.UUID): The ID of the user who owns the group.\n        - `CreatedAt` (time.Time): The timestamp when the group was created.\n    - `GroupMember`: Public struct representing a member's association with a group.\n      - Fields:\n        - `GroupID` (uuid.UUID): The ID of the group.\n        - `UserID` (uuid.UUID): The ID of the user who is a member.\n        - `JoinedAt` (time.Time): The timestamp when the user joined the group.\n",
  "backend/models/session.go": "- **High-Level Purpose**: Defines the data structure representing a user session, primarily used for refresh tokens.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Session`: Public struct representing a user's session.\n      - Fields:\n        - `RefreshToken` (uuid.UUID): The unique identifier for the refresh token.\n        - `UserID` (uuid.UUID): The ID of the user associated with this session.\n        - `ExpiresAt` (time.Time): The timestamp when this session expires.\n",
  "backend/models/user.go": "- **High-Level Purpose**: Defines the data structure representing a user entity in the application.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `User`: Public struct representing a user.\n      - Fields:\n        - `ID` (uuid.UUID): The unique identifier for the user.\n        - `Username` (string): The user's unique username.\n        - `PasswordHash` (string): The bcrypt hash of the user's password (excluded from JSON serialization).\n        - `ProfilePicURL` (string): The URL or path to the user's profile picture.\n        - `CreatedAt` (time.Time): The timestamp when the user account was created.\n",
  "backend/repository/event_repository.go": "- **High-Level Purpose**: Defines the `EventRepository` interface, which abstracts the operations for managing application events across different storage mechanisms (e.g., temporary buffering in Redis and durable storage in PostgreSQL).\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `EventRepository`: Public interface for event data access.\n      - Methods:\n        - `BufferEvent(ctx context.Context, event *models.Event) error`: Buffers an event for temporary storage.\n        - `GetBufferedEvents(ctx context.Context, count int) ([]*models.Event, error)`: Retrieves a batch of buffered events.\n        - `DeleteBufferedEvents(ctx context.Context, events []*models.Event) error`: Deletes a batch of buffered events.\n        - `Store(ctx context.Context, event *models.Event) error`: Stores a single event durably.\n        - `FetchUndelivered(ctx context.Context, userID uuid.UUID, cursor time.Time, limit int) ([]*models.Event, error)`: Fetches undelivered events for a specific user.\n        - `Delete(ctx context.Context, eventID uuid.UUID) error`: Deletes a durably stored event.\n        - `StoreBatch(ctx context.Context, events []*models.Event) error`: Stores a batch of events durably.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction layer for event data operations.\n  - Interface Segregation: Combines methods for both temporary (buffering) and durable (storage) event management, allowing different implementations to focus on their respective concerns.\n",
  "backend/repository/file_repository.go": "- **High-Level Purpose**: Defines the interface for file storage operations within the repository layer.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FileRepository`: Interface for saving files.\n      - Methods:\n        - `Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Saves a file and returns its unique identifier or URL.\n",
  "backend/repository/friendship_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to friendship entities. This interface abstracts the underlying data storage mechanism for friend requests and accepted friendships.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FriendshipRepository`: Interface for managing friendship data.\n      - Methods:\n        - `Create(ctx context.Context, friendship *models.Friendship) error`: Creates a new friendship record (e.g., a pending request).\n        - `UpdateStatus(ctx context.Context, userID1, userID2 uuid.UUID, status models.FriendshipStatus) error`: Updates the status of an existing friendship (e.g., from pending to accepted).\n        - `Delete(ctx context.Context, userID1, userID2 uuid.UUID) error`: Deletes a friendship record.\n        - `Find(ctx context.Context, userID1, userID2 uuid.UUID) (*models.Friendship, error)`: Retrieves a friendship record between two specific users.\n        - `ListByUserID(ctx context.Context, userID uuid.UUID, status models.FriendshipStatus) ([]*models.User, error)`: Lists users involved in friendships with a given `userID` that match a specific status.",
  "backend/repository/group_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to groups and their members. This interface abstracts the underlying data storage mechanism for group-related entities.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `GroupRepository`: Interface for managing group data and membership.\n      - Methods:\n        - `Create(ctx context.Context, group *models.Group) error`: Creates a new group record.\n        - `Update(ctx context.Context, group *models.Group) error`: Updates an existing group's details.\n        - `Delete(ctx context.Context, groupID uuid.UUID) error`: Deletes a group by its ID.\n        - `FindByID(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Retrieves a group by its unique ID.\n        - `FindByHandle(ctx context.Context, handle string) (*models.Group, error)`: Retrieves a group by its unique handle.\n        - `FuzzySearchByHandle(ctx context.Context, query string, limit int) ([]*models.Group, error)`: Searches for groups whose handles partially match a given query, with a result limit.\n        - `AddMember(ctx context.Context, member *models.GroupMember) error`: Adds a user as a member to a group.\n        - `RemoveMember(ctx context.Context, groupID, userID uuid.UUID) error`: Removes a user from a group.\n        - `FindMember(ctx context.Context, groupID, userID uuid.UUID) (*models.GroupMember, error)`: Retrieves a specific group member record.\n        - `ListMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Lists all users who are members of a specific group.\n        - `GetOldestMember(ctx context.Context, groupID uuid.UUID) (*models.User, error)`: Retrieves the user who has been a member of the group for the longest time.\n",
  "backend/repository/session_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user sessions, typically managed by refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `SessionRepository`: Interface for managing user sessions.\n      - Methods:\n        - `Create(ctx context.Context, session *models.Session) error`: Creates a new session or updates an existing one.\n        - `Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Retrieves a session by its refresh token.\n        - `Delete(ctx context.Context, refreshToken uuid.UUID) error`: Deletes a session by its refresh token.\n        - `DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Deletes all sessions associated with a specific user ID.\n",
  "backend/repository/user_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user entities.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserRepository`: Interface for managing user data.\n      - Methods:\n        - `Create(ctx context.Context, user *models.User) error`: Creates a new user record.\n        - `FindByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Retrieves a user by their unique ID.\n        - `Update(ctx context.Context, user *models.User) error`: Updates an existing user's record.\n",
  "backend/usecase/auth_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user authentication, including login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `AuthUsecase`: Interface defining authentication operations.\n      - Methods:\n        - `Login(ctx context.Context, username, password string) (accessToken string, refreshToken string, err error)`: Authenticates a user and generates access and refresh tokens.\n        - `Refresh(ctx context.Context, refreshToken string) (newAccessToken string, err error)`: Refreshes an expired access token using a valid refresh token.\n        - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a user's session by deleting the refresh token.\n  - **Classes / Structs**:\n    - `authUsecase`: Private struct implementing the `AuthUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `sessionRepo` (repository.SessionRepository): Dependency for session data access.\n        - `tokenGen` (util.TokenGenerator): Dependency for generating tokens.\n  - **Functions / Methods**:\n    - `NewAuthUsecase(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, tokenGen util.TokenGenerator) AuthUsecase`: Public constructor. Creates and returns a new `AuthUsecase` instance with injected dependencies.\n    - `(*authUsecase) Login(ctx context.Context, username, password string) (string, string, error)`: Public method. Handles user login, validates credentials, generates access and refresh tokens, and creates a session. It enforces a single-device policy by deleting old sessions.\n    - `(*authUsecase) Refresh(ctx context.Context, refreshTokenStr string) (string, error)`: Public method. Refreshes an access token using a refresh token, validates the session's expiry, and extends its validity (sliding window).\n    - `(*authUsecase) Logout(ctx context.Context, refreshTokenStr string) error`: Public method. Invalidates a user's session by deleting the provided refresh token.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for repositories and token generation.\n  - Single-device policy for sessions during login.\n  - Sliding window for refresh token expiry.\n",
  "backend/usecase/event_usecase.go": "- **High-Level Purpose**: Implements the core business logic for managing application events, acting as an intermediary between the temporary Redis buffer and the durable PostgreSQL storage.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `EventUsecase`: Public interface defining event management operations.\n      - Methods:\n        - `StoreEvent(ctx context.Context, event *models.Event) error`: Stores an event, typically buffering it first.\n        - `GetUndeliveredEvents(ctx context.Context, userID uuid.UUID, cursor time.Time, limit int) ([]*models.Event, error)`: Retrieves events that have not yet been delivered to a specific user.\n        - `MarkEventAsDelivered(ctx context.Context, eventID uuid.UUID) error`: Marks an event as delivered, usually by deleting it from durable storage.\n  - **Classes / Structs**:\n    - `eventUsecase`: Private struct implementing the `EventUsecase` interface.\n      - Fields:\n        - `redisRepo` (repository.EventRepository): Dependency for Redis-based event buffering.\n        - `dbRepo` (repository.EventRepository): Dependency for database-based durable event storage.\n  - **Functions / Methods**:\n    - `NewEventUsecase(redisRepo, dbRepo repository.EventRepository) EventUsecase`: Public constructor. Creates and returns a new `eventUsecase` instance with injected Redis and DB event repository dependencies.\n    - `(*eventUsecase) StoreEvent(ctx context.Context, event *models.Event) error`: Public method. Buffers the event in the Redis repository.\n    - `(*eventUsecase) GetUndeliveredEvents(ctx context.Context, userID uuid.UUID, cursor time.Time, limit int) ([]*models.Event, error)`: Public method. Fetches undelivered events from the durable PostgreSQL repository.\n    - `(*eventUsecase) MarkEventAsDelivered(ctx context.Context, eventID uuid.UUID) error`: Public method. Deletes the event from the durable PostgreSQL repository.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates event-related business logic.\n  - Dependency Injection: Uses two different `EventRepository` implementations (Redis for buffering, Postgres for durable storage) to manage event lifecycle.\n  - Two-stage persistence: Events are first buffered in Redis for immediate processing/delivery, then asynchronously moved to PostgreSQL for durable storage and later retrieval if undelivered.\n",
  "backend/usecase/friend_usecase.go": "- **High-Level Purpose**: Implements the core business logic for managing user friendships, including sending, accepting, rejecting requests, unfriending, and listing friend relationships. It integrates with the event system to notify users of friendship-related actions.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FriendUsecase`: Public interface defining friendship management operations.\n      - Methods:\n        - `SendRequest(ctx context.Context, fromUserID uuid.UUID, toUsername string) error`: Sends a friend request.\n        - `AcceptRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Accepts a pending friend request.\n        - `RejectRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Rejects a pending friend request.\n        - `Unfriend(ctx context.Context, userID, friendID uuid.UUID) error`: Removes an existing friendship.\n        - `ListFriends(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Lists all accepted friends for a user.\n        - `ListPendingRequests(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Lists all pending friend requests for a user.\n  - **Classes / Structs**:\n    - `friendUsecase`: Private struct implementing the `FriendUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `friendRepo` (repository.FriendshipRepository): Dependency for friendship data access.\n        - `eventUsecase` (EventUsecase): Dependency for event management.\n  - **Functions / Methods**:\n    - `NewFriendUsecase(userRepo repository.UserRepository, friendRepo repository.FriendshipRepository, eventUsecase EventUsecase) FriendUsecase`: Public constructor. Creates and returns a new `friendUsecase` instance.\n    - `(*friendUsecase) SendRequest(ctx context.Context, fromUserID uuid.UUID, toUsername string) error`: Public method. Validates the target user, checks for existing friendships/requests, creates a pending `Friendship` record, and stores an `EventFriendRequestReceived` for the recipient. Prevents self-friending.\n    - `(*friendUsecase) AcceptRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Public method. Verifies a pending request exists, updates its status to `Accepted`, and stores an `EventFriendRequestAccepted` for the original requester.\n    - `(*friendUsecase) RejectRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Public method. Verifies a pending request exists, deletes the `Friendship` record, and stores an `EventFriendRequestRejected` for the original requester.\n    - `(*friendUsecase) Unfriend(ctx context.Context, userID, friendID uuid.UUID) error`: Public method. Verifies an accepted friendship exists, deletes the `Friendship` record, and stores an `EventUnfriended` for the unfriended user.\n    - `(*friendUsecase) ListFriends(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Public method. Retrieves a list of users who are accepted friends with the given `userID`.\n    - `(*friendUsecase) ListPendingRequests(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Public method. Retrieves a list of users who have sent pending friend requests to the given `userID`.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates business rules for friendship management.\n  - Dependency Injection: Relies on `UserRepository`, `FriendshipRepository`, and `EventUsecase` interfaces.\n  - Event-driven: Generates and stores events for various friendship actions to facilitate real-time notifications.\n",
  "backend/usecase/group_usecase.go": "- **High-Level Purpose**: Implements the core business logic for managing chat groups, including creation, updates, membership (joining, leaving, adding, removing), ownership transfer, and searching. It integrates with event management for notifications.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `GroupUsecase`: Public interface defining group management operations.\n      - Methods:\n        - `CreateGroup(ctx context.Context, ownerID uuid.UUID, handle, name string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Creates a new group.\n        - `UpdateGroup(ctx context.Context, userID, groupID uuid.UUID, name *string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Updates group details (name, photo).\n        - `JoinGroup(ctx context.Context, userID uuid.UUID, groupHandle string) error`: Adds a user to a group.\n        - `LeaveGroup(ctx context.Context, userID, groupID uuid.UUID) error`: Removes a user from a group.\n        - `AddMember(ctx context.Context, adderID uuid.UUID, newMemberUsername string, groupID uuid.UUID) error`: Adds a specific user as a member to a group.\n        - `RemoveMember(ctx context.Context, ownerID, memberID, groupID uuid.UUID) error`: Removes a specific member from a group.\n        - `TransferOwnership(ctx context.Context, currentOwnerID, newOwnerID, groupID uuid.UUID) error`: Transfers group ownership to another member.\n        - `SearchGroups(ctx context.Context, query string) ([]*models.Group, error)`: Searches for groups by handle.\n        - `GetGroupDetails(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Retrieves details of a specific group.\n        - `ListGroupMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Lists all members of a group.\n  - **Classes / Structs**:\n    - `groupUsecase`: Private struct implementing the `GroupUsecase` interface.\n      - Fields:\n        - `groupRepo` (repository.GroupRepository): Dependency for group data access.\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `friendRepo` (repository.FriendshipRepository): Dependency for friendship data access (used for `AddMember` to check if users are friends).\n        - `fileRepo` (repository.FileRepository): Dependency for file storage (for group photos).\n        - `eventUsecase` (EventUsecase): Dependency for event management (for notifications).\n  - **Functions / Methods**:\n    - `NewGroupUsecase(groupRepo repository.GroupRepository, userRepo repository.UserRepository, friendRepo repository.FriendshipRepository, fileRepo repository.FileRepository, eventUsecase EventUsecase) GroupUsecase`: Public constructor. Creates and returns a new `groupUsecase` instance with injected dependencies.\n    - `(*groupUsecase) CreateGroup(ctx context.Context, ownerID uuid.UUID, handle, name string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Public method. Validates group handle and name, saves an optional group photo, creates a new `models.Group` and persists it.\n    - `(*groupUsecase) UpdateGroup(ctx context.Context, userID, groupID uuid.UUID, name *string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Public method. Updates a group's name or photo. Requires the `userID` to be the group owner.\n    - `(*groupUsecase) JoinGroup(ctx context.Context, userID uuid.UUID, groupHandle string) error`: Public method. Finds a group by handle, adds the `userID` as a member, and notifies other group members of the new joiner.\n    - `(*groupUsecase) LeaveGroup(ctx context.Context, userID, groupID uuid.UUID) error`: Public method. Removes a user from a group. If the leaving user is the owner, it transfers ownership to the oldest remaining member or deletes the group if no members are left. Notifies remaining members.\n    - `(*groupUsecase) AddMember(ctx context.Context, adderID uuid.UUID, newMemberUsername string, groupID uuid.UUID) error`: Public method. Adds a user to a group. Requires the `adderID` to be a member and the `adderID` and `newMemberUsername` to be friends. Notifies the new member and other group members.\n    - `(*groupUsecase) RemoveMember(ctx context.Context, ownerID, memberID, groupID uuid.UUID) error`: Public method. Removes a member from a group. Requires the `ownerID` to be the group owner and prevents removing the owner. Notifies the removed member and other group members.\n    - `(*groupUusecase) TransferOwnership(ctx context.Context, currentOwnerID, newOwnerID, groupID uuid.UUID) error`: Public method. Transfers ownership of a group to another existing member. Requires `currentOwnerID` to be the current owner.\n    - `(*groupUsecase) SearchGroups(ctx context.Context, query string) ([]*models.Group, error)`: Public method. Delegates to the `groupRepo` for fuzzy searching groups by handle.\n    - `(*groupUsecase) GetGroupDetails(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Public method. Delegates to the `groupRepo` to find a group by ID.\n    - `(*groupUsecase) ListGroupMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Public method. Delegates to the `groupRepo` to list group members.\n    - `(*groupUsecase) notifyGroupMembers(ctx context.Context, groupID, subjectUserID uuid.UUID, eventType models.EventType, payload map[string]interface{})`: Private helper method. Sends an event to all members of a group (excluding the subject user) via the `eventUsecase`.\n    - `(*groupUsecase) notifyUser(ctx context.Context, recipientID, senderID uuid.UUID, eventType models.EventType, payload map[string]interface{})`: Private helper method. Sends a single event to a specific user via the `eventUsecase`.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates complex business rules for group management.\n  - Dependency Injection: Constructor takes multiple repository and usecase interfaces.\n  - Event-driven notifications: Uses `EventUsecase` to send real-time notifications to users and group members about group actions.\n  - Ownership transfer logic: Handles the special case of an owner leaving a group by transferring ownership or deleting the group.\n  - Input validation: Uses `util.ValidateGroupHandle` and `util.ValidateProfilePic`.\n",
  "backend/usecase/user_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user management, including registration, retrieving user details, and updating user profiles.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserUsecase`: Interface defining user management operations.\n      - Methods:\n        - `Register(ctx context.Context, username, password string) (*models.User, error)`: Registers a new user.\n        - `GetByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Updates a user's profile information.\n  - **Classes / Structs**:\n    - `userUsecase`: Private struct implementing the `UserUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `fileRepo` (repository.FileRepository): Dependency for file storage operations.\n  - **Functions / Methods**:\n    - `NewUserUsecase(userRepo repository.UserRepository, fileRepo repository.FileRepository) UserUsecase`: Public constructor. Creates and returns a new `UserUsecase` instance with injected dependencies.\n    - `(*userUsecase) Register(ctx context.Context, username, password string) (*models.User, error)`: Public method. Registers a new user after validating username and password, checking for username uniqueness, hashing the password, and persisting the user.\n    - `(*userUsecase) GetByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user's details by their username.\n    - `(*userUsecase) UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Public method. Updates a user's profile, allowing changes to username (with uniqueness check), password (with hashing), and profile picture (with validation and storage).\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for user and file repositories.\n  - Input validation: Utilizes `util.ValidateUsername`, `util.ValidatePassword`, and `util.ValidateProfilePic`.\n",
  "docker-compose.yml": "- **High-Level Purpose**: Defines and configures the multi-container Docker environment for the application's PostgreSQL database and Redis server, facilitating easy setup and management of these dependencies.\n- **Definitions in the File**:\n  - **Services**:\n    - `postgres`: Defines the PostgreSQL database service.\n      - `image`: `postgres:13`\n      - `container_name`: `quikchat_postgres`\n      - `environment`: Sets PostgreSQL user, password, and database name using environment variables with default values.\n      - `ports`: Maps host port 5432 to container port 5432.\n      - `volumes`: Mounts a named volume for persistent data and the PostgreSQL migration scripts for initial database setup.\n      - `restart`: `unless-stopped`\n      - `healthcheck`: Defines a command to check if the PostgreSQL database is ready.\n    - `redis`: Defines the Redis server service.\n      - `image`: `redis:6.2-alpine`\n      - `container_name`: `quikchat_redis`\n      - `ports`: Maps host port 6379 to container port 6379.\n      - `restart`: `unless-stopped`\n      - `command`: Starts the Redis server with an optional password.\n      - `healthcheck`: Defines a command to check if the Redis server is ready.\n  - **Volumes**:\n    - `postgres_data`: A named Docker volume for persisting PostgreSQL data.\n- **Notable Patterns or Logic**:\n  - Docker Compose: Orchestrates multiple Docker containers.\n  - Environment Variable Interpolation: Uses `${VAR:-default}` syntax to allow configuration via `.env` files.\n  - Data Persistence: Uses named volumes to ensure database data is not lost when containers are stopped or removed.\n  - Health Checks: Configures health checks for both services to ensure they are fully operational before the application attempts to connect.\n",
  "tailwind.config.js": "- **High-Level Purpose**: Configures Tailwind CSS for the project, specifying which files to scan for utility classes and extending the default theme with a custom color palette.\n- **Definitions in the File**:\n  - **Configuration Object**:\n    - `content` (string[]): An array of file paths where Tailwind should look for class names to generate its CSS.\n    - `theme.extend.colors` (object): Defines custom color variables:\n      - `primary`, `secondary`, `accent`, `text-main`, `text-dim`, `highlight`: Custom color names mapped to specific hex values, primarily from Tailwind's slate and teal palettes.\n- **Notable Patterns or Logic**:\n  - Tailwind CSS Configuration: Standard configuration file for a Tailwind CSS project.\n  - Custom Theme: Extends Tailwind's default theme to provide a consistent color scheme for the application.\n",
  "web/static/css/input.css": "- **High-Level Purpose**: This file serves as the entry point for Tailwind CSS, importing its base, components, and utility styles.\n- **Definitions in the File**:\n  - **CSS Directives**:\n    - `@tailwind base;`: Imports Tailwind's base styles.\n    - `@tailwind components;`: Imports Tailwind's component styles.\n    - `@tailwind utilities;`: Imports Tailwind's utility classes.\n- **Notable Patterns or Logic**:\n  - Tailwind CSS: Utilizes the Tailwind CSS framework for styling.\n",
  "web/static/css/style.css": "- **High-Level Purpose**: Defines custom CSS styles for specific UI elements, particularly for scrollbars, and imports Tailwind CSS directives.\n- **Definitions in the File**:\n  - **CSS Directives**:\n    - `@tailwind base;`, `@tailwind components;`, `@tailwind utilities;`: Imports Tailwind's core styles.\n  - **CSS Classes**:\n    - `.chat-scrollbar`: Customizes the appearance of scrollbars for elements with this class, defining track and thumb colors and hover effects.\n- **Notable Patterns or Logic**:\n  - Tailwind CSS Integration: Extends Tailwind's utility-first approach with custom styles.\n  - Custom Scrollbar Styling: Provides a themed scrollbar for chat areas.\n",
  "web/static/js/api.js": "- **High-Level Purpose**: Provides a JavaScript client for interacting with the backend's HTTP API, handling authentication headers and standardized error responses.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `BASE_URL` (string): Private constant. The base URL for all API requests (`/api/v1`).\n  - **Functions / Methods**:\n    - `request(endpoint, options = {})`: Private async function. A generic utility to make `fetch` requests, automatically adding `Content-Type: application/json` and `Authorization: Bearer \u003ctoken\u003e` headers if an access token is present. It handles JSON parsing, HTTP error responses, and `204 No Content` responses.\n    - `api` (object): Public object. Exposes specific API call methods:\n      - `login(username, password)`: Sends a POST request to `/login` with user credentials.\n      - `register(username, password)`: Sends a POST request to `/register` with user credentials.\n      - `logout(refreshToken)`: Sends a POST request to `/logout` with the refresh token.\n      - `getFriends()`: Sends a GET request to `/friends`.\n      - `getGroups()`: Sends a GET request to `/groups`, currently mocked and logs a warning.\n      - `getMessages(chatId)`: Sends a GET request to `/messages`, currently mocked and logs a warning.\n- **Notable Patterns or Logic**:\n  - API Client: Centralizes HTTP request logic for the frontend.\n  - Token-based Authentication: Automatically includes JWT access tokens in `Authorization` headers.\n  - Error Handling: Standardizes error response parsing from the backend.\n  - Mocking: Includes mocked endpoints for features not yet implemented on the backend.\n",
  "web/static/js/main.js": "- **High-Level Purpose**: The main JavaScript entry point for the frontend application. It orchestrates user interactions, handles authentication flows (login, register, logout), manages sending and receiving chat messages via WebSocket, and initializes the application state and UI.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `loginForm`, `registerForm`, `messageForm`, `logoutBtn`, `loginTabBtn`, `registerTabBtn`: DOM elements for various interactive parts of the UI.\n  - **Functions / Methods**:\n    - `handleLogin(e)`: Private async function. Handles login form submission. Calls `api.login`, updates global state with tokens, and initializes the app. Displays auth errors.\n    - `handleRegister(e)`: Private async function. Handles registration form submission. Calls `api.register`, shows a success alert, resets the form, and switches to the login tab. Displays auth errors.\n    - `handleLogout()`: Private async function. Handles user logout. Attempts to call `api.logout` with the refresh token, disconnects the WebSocket, clears the global state, and switches back to the authentication view.\n    - `handleSendMessage(e)`: Private function. Handles message form submission. Constructs a WebSocket payload with message content and recipient ID, sends it via `ws.sendMessage`, and clears the input.\n    - `setupWsListeners()`: Private function. Registers WebSocket event listeners: `message_sent` (renders incoming messages if they belong to the active chat) and `message_ack` (logs message acknowledgments).\n    - `initializeApp()`: Private async function. Initializes the chat application after successful authentication. Shows the chat view, mocks current user from JWT, connects to WebSocket, sets up listeners, fetches and renders friends and groups. Calls `handleLogout` on initialization failure.\n- **Notable Patterns or Logic**:\n  - Event-Driven UI: Attaches event listeners to DOM elements to respond to user actions.\n  - Asynchronous Operations: Uses `async/await` for API calls and other potentially long-running tasks.\n  - State Management: Interacts with `state.js` to read and update the global application state.\n  - API Client Integration: Uses `api.js` for HTTP API calls.\n  - WebSocket Integration: Uses `ws.js` for real-time communication.\n  - UI Rendering: Uses `ui.js` for updating the user interface.\n  - Initial Application Flow: Defines the sequence of actions taken after a user logs in or registers.",
  "web/static/js/state.js": "- **High-Level Purpose**: Manages the global application state for the frontend, providing a centralized store and methods to access and update it.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `state` (import('./types.js').AppState): Private module-level variable. Holds the current application state, initialized with default values.\n  - **Functions / Methods**:\n    - `getState()`: Public function. Returns a shallow copy of the current application state.\n    - `setState(newState: Partial\u003cimport('./types.js').AppState\u003e)`: Public function. Merges a partial `newState` object into the current `state`, updating its properties.\n- **Notable Patterns or Logic**:\n  - Global State Management: Provides a simple, centralized mechanism for managing application data.\n  - Immutability: `getState` returns a copy, and `setState` creates a new state object, promoting predictable state changes.\n  - JSDoc Type Hinting: Uses JSDoc to define the structure of the `AppState`.\n",
  "web/static/js/templates.js": "- **High-Level Purpose**: Provides JavaScript functions that generate HTML strings for various UI components, facilitating dynamic rendering of user profiles, friend lists, group lists, and chat messages.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `userProfileTemplate(user: import('./types.js').User)`: Public function. Generates HTML for displaying a user's profile, including their image and username.\n    - `friendListTemplate(friends: import('./types.js').User[])`: Public function. Generates HTML for a list of friends, each with an image, username, and data attributes for ID and username.\n    - `groupListTemplate(groups: import('./types.js').Group[])`: Public function. Generates HTML for a list of groups, each with an image, name, and data attributes for ID and name.\n    - `messageTemplate(message: import('./types.js').Message, isOwnMessage: boolean)`: Public function. Generates HTML for a single chat message, styling it differently based on whether it's the user's own message.\n- **Notable Patterns or Logic**:\n  - Frontend Templating: Uses JavaScript template literals to construct HTML.\n  - JSDoc Type Hinting: Employs JSDoc comments to define expected parameter types, referencing types from `types.js`.\n",
  "web/static/js/types.js": "- **High-Level Purpose**: Defines JSDoc `@typedef` types for the core data structures used throughout the frontend JavaScript application, enhancing type safety and readability.\n- **Definitions in the File**:\n  - **Type Definitions (typedef objects)**:\n    - `User`: Represents a user with `id`, `username`, and `profilePicUrl`.\n    - `Group`: Represents a chat group with `id`, `name`, `handle`, and `photoUrl`.\n    - `Message`: Represents a chat message with `id`, `content`, `senderId`, `recipientId`, and `timestamp`.\n    - `ActiveChat`: Represents the currently selected chat, with `id`, `name`, and `type` ('user' or 'group').\n    - `AppState`: Represents the global application state, including `currentUser`, `accessToken`, `refreshToken`, `friends`, `groups`, and `activeChat`.\n- **Notable Patterns or Logic**:\n  - JSDoc for Type Definition: Uses standard JSDoc syntax to define custom types, which can be leveraged by IDEs for better autocompletion and error checking.\n  - Data Transfer Objects (DTOs): Defines the expected shape of data exchanged within the frontend.\n",
  "web/static/js/ui.js": "- **High-Level Purpose**: Provides a set of JavaScript functions to manipulate the DOM and render various UI components of the chat application, such as switching views, displaying errors, rendering lists of friends/groups, and displaying chat messages.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `authView`, `chatView`, `authError`, `loginForm`, `registerForm`, `loginTabBtn`, `registerTabBtn`: DOM elements related to authentication.\n    - `userProfileContainer`, `friendsListContainer`, `groupsListContainer`: DOM elements for the sidebar.\n    - `messagesContainer`, `chatTitle`, `messageInput`, `messageForm`, `messageFormBtn`: DOM elements for the main chat area.\n  - **Functions / Methods**:\n    - `setActiveChat(chat: import('./types.js').ActiveChat)`: Private function. Sets the currently active chat, updates the chat title, clears messages, enables the message input, and focuses on it. Updates global state via `setState`.\n    - `ui` (object): Public object exposing UI manipulation methods:\n      - `showView(view: 'auth' | 'chat')`: Toggles visibility between the authentication and chat views.\n      - `showAuthError(message: string)`: Displays or hides an authentication error message.\n      - `switchAuthTab(tab: 'login' | 'register')`: Switches between login and registration forms, updating button styles and clearing errors.\n      - `toggleButton(button: HTMLButtonElement, disabled: boolean)`: Enables or disables a given HTML button, applying appropriate styling.\n      - `clearMessageInput()`: Clears the text from the message input field.\n      - `renderUserProfile(user: import('./types.js').User)`: Renders the user's profile information in the designated container.\n      - `renderFriendList(friends: import('./types.js').User[])`: Renders a list of friends, making each item clickable to set it as the active chat.\n      - `renderGroupList(groups: import('./types.js').Group[])`: Renders a list of groups, making each item clickable to set it as the active chat.\n      - `renderMessage(message: import('./types.js').Message, isOwnMessage: boolean)`: Renders a single chat message, appending it to the messages container and scrolling to the bottom.\n- **Notable Patterns or Logic**:\n  - DOM Manipulation: Directly interacts with the HTML DOM to update the user interface.\n  - Frontend Templating: Uses functions from `templates.js` to generate HTML strings.\n  - Event Handling: Attaches click listeners to dynamically rendered friend/group list items.\n  - State Integration: Uses `setState` from `state.js` to update the global application state when an active chat is selected.\n  - JSDoc Type Hinting: Uses JSDoc for type definitions, referencing `types.js`.\n",
  "web/static/js/ws.js": "- **High-Level Purpose**: Manages the WebSocket connection for real-time communication with the backend, including connecting, disconnecting, sending messages, and dispatching incoming events to registered listeners.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `socket` (WebSocket | null): Private module-level variable. Holds the active WebSocket connection instance.\n    - `eventListeners` (Map\u003cstring, Function[]\u003e): Private module-level map. Stores arrays of callback functions, keyed by WebSocket event types.\n  - **Functions / Methods**:\n    - `handleMessage(event: MessageEvent)`: Private function. Parses incoming WebSocket messages (expected to be JSON), extracts the `type` and `payload`, and dispatches the payload to all registered callbacks for that `type`. Logs warnings for unhandled types and errors for parsing issues.\n    - `ws` (object): Public object. Exposes WebSocket control methods:\n      - `connect(token: string)`: Establishes a new WebSocket connection to the backend. Sends an initial `auth` message with the provided JWT `token` upon successful connection. Sets up `onopen`, `onmessage`, `onclose`, and `onerror` handlers.\n      - `disconnect()`: Closes the active WebSocket connection if one exists.\n      - `sendMessage(message: object)`: Sends a JSON-stringified message over the WebSocket if the connection is open. Logs an error if not connected.\n      - `onEvent(eventType: string, callback: Function)`: Registers a `callback` function to be invoked whenever a WebSocket message of the specified `eventType` is received.\n- **Notable Patterns or Logic**:\n  - WebSocket Client: Implements a client for `WebSocket` API.\n  - Event-Driven Architecture: Uses a map of event listeners to dispatch incoming WebSocket messages based on their type.\n  - Token-based Authentication: Sends a JWT token immediately after connection for WebSocket authentication.",
  "web/templates/app.html": "- **High-Level Purpose**: The main HTML file for the single-page chat application, defining the overall layout, including authentication forms and the main chat interface.\n- **Definitions in the File**:\n  - **HTML Structure**:\n    - `auth-view`: Contains login and registration forms with tabs to switch between them.\n    - `chat-view`: Contains the main chat interface, which is initially hidden.\n      - `aside` (Sidebar): Holds user profile, friends list, groups list, and a logout button.\n      - `main` (Main Chat Area): Contains the chat header, messages container, and message input form.\n  - **Elements with IDs**: `auth-view`, `chat-view`, `login-tab-btn`, `register-tab-btn`, `login-form`, `register-form`, `auth-error`, `user-profile-container`, `friends-list-container`, `groups-list-container`, `logout-btn`, `chat-header`, `chat-title`, `messages-container`, `message-form`, `message-input`. These IDs are used by JavaScript for DOM manipulation.\n- **Notable Patterns or Logic**:\n  - Single-Page Application (SPA) Structure: Uses two main views (`auth-view`, `chat-view`) toggled by JavaScript.\n  - Tailwind CSS Integration: Heavily uses Tailwind utility classes for styling.\n  - JavaScript Module Inclusion: Imports `main.js` as a module for frontend logic.\n"
}