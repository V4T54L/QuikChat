{
  "Makefile": "- File Path: Makefile\n- High-Level Purpose: Provides a set of convenient commands (targets) for managing the development lifecycle of the chat application, including Docker operations, database migrations, and Go application build/run.\n- Definitions in the File:\n  - Targets:\n    - `up`: Starts Docker containers defined in `docker-compose.yml`.\n    - `down`: Stops Docker containers.\n    - `logs`: Tails logs from Docker containers.\n    - `psql`: Connects to the PostgreSQL container using `psql`.\n    - `migrate-up`: Applies database migration SQL scripts to the PostgreSQL database.\n    - `run`: Executes the Go backend application directly.\n    - `build`: Compiles the Go backend application into an executable binary.\n- Notable Patterns or Logic: This is a standard Makefile, used for automating common development and deployment tasks.\n",
  "backend/cmd/server/main.go": "- File Path: backend/cmd/server/main.go\n- High-Level Purpose: The main entry point of the backend application, responsible for initializing all core components, setting up dependencies, and starting the HTTP server and background workers.\n- Definitions in the File:\n  - Functions / Methods:\n    - `main()`: The application's entry point. It loads configuration, initializes PostgreSQL and Redis connections, creates instances of all repositories (user, session, file, event, friend, group, message), instantiates all use cases/services (auth, user, event, friend, group, message), sets up the WebSocket `Hub`, starts a background goroutine for event persistence, initializes the HTTP router, and finally starts the HTTP server. It includes robust error handling for critical startup steps.\n- Notable Patterns or Logic: This file acts as the \"Application Bootstrap\" or \"Composition Root\". It demonstrates a clear pattern of Dependency Injection by creating and passing concrete implementations of repositories and use cases to their consumers. It also orchestrates background tasks, such as event persistence, using goroutines and tickers.\n",
  "backend/go.mod": "- File Path: backend/go.mod\n- High-Level Purpose: Defines the Go module path and the required Go version for the `chat-app` project.\n- Definitions in the File:\n  - Module: `chat-app`\n  - Go Version: `1.24.0`\n- Notable Patterns or Logic: This is a standard Go module definition file, managing project dependencies and Go version.\n",
  "backend/internal/adapter/localfile/file_repository.go": "- File Path: backend/internal/adapter/localfile/file_repository.go\n- High-Level Purpose: Implements the `FileRepository` interface to save files (specifically profile pictures) to the local filesystem.\n- Definitions in the File:\n  - Structs:\n    - `localFileRepository`: An internal struct that stores the base directory for file uploads (`uploadDir`).\n  - Functions / Methods:\n    - `NewLocalFileRepository(uploadDir string) (repository.FileRepository, error)`: A public constructor function that creates the specified `uploadDir` if it doesn't exist and returns a new `localFileRepository` instance as a `repository.FileRepository` interface.\n    - `SaveProfilePicture(_ context.Context, fileData []byte, fileType string) (string, error)`: A public method on `localFileRepository` that saves the provided `fileData` to the `uploadDir`. It determines the file extension based on `fileType`, generates a unique filename using a UUID, and writes the file to disk.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `FileRepository` interface, providing a concrete implementation for local filesystem storage. It handles file I/O operations and ensures the upload directory exists.\n",
  "backend/internal/adapter/postgres/event_repository.go": "- File Path: backend/internal/adapter/postgres/event_repository.go\n- High-Level Purpose: Implements the `EventRepository` interface for PostgreSQL, providing methods to store events, retrieve undelivered events for a user, and mark events as delivered.\n- Definitions in the File:\n  - Structs:\n    - `postgresEventRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresEventRepository(db *pgxpool.Pool) repository.EventRepository`: A public constructor function that returns a new instance of `postgresEventRepository` as a `repository.EventRepository` interface.\n    - `StoreEvents(ctx context.Context, events []*domain.Event) error`: A public method on `postgresEventRepository` that stores a batch of events into the `events` table within a single transaction.\n    - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: A public method on `postgresEventRepository` that retrieves all events for a specific `userID` that have not yet been marked as delivered, ordered by creation time.\n    - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: A public method on `postgresEventRepository` that updates the `is_delivered` status to `TRUE` for a given list of event IDs.\n    - `BufferEvent(ctx context.Context, event *domain.Event) error`: An internal no-op method, as this functionality is handled by the Redis event repository.\n    - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: An internal no-op method, as this functionality is handled by the Redis event repository.\n    - `ClearUserBuffer(ctx context.Context, userID string) error`: An internal no-op method, as this functionality is handled by the Redis event repository.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `EventRepository` interface, providing a concrete PostgreSQL implementation. It uses database transactions for batch inserts and handles querying and updating event delivery status. It explicitly marks Redis-specific methods as no-ops.\n",
  "backend/internal/adapter/postgres/friend_repository.go": "- File Path: backend/internal/adapter/postgres/friend_repository.go\n- High-Level Purpose: Implements the `FriendRepository` interface using PostgreSQL, providing concrete data access logic for managing friend requests and friendships.\n- Definitions in the File:\n  - Structs:\n    - `postgresFriendRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresFriendRepository(db *pgxpool.Pool) repository.FriendRepository`: A public constructor function that returns a new instance of `postgresFriendRepository` as a `repository.FriendRepository` interface.\n    - `CreateRequest(ctx context.Context, req *domain.FriendRequest) error`: A public method on `postgresFriendRepository` that inserts a new friend request into the `friend_requests` table. It handles `unique_violation` errors by returning `repository.ErrFriendRequestExists`.\n    - `GetRequestByID(ctx context.Context, id string) (*domain.FriendRequest, error)`: A public method on `postgresFriendRepository` that retrieves a friend request by its ID. It returns `repository.ErrNotFound` if no rows are found.\n    - `UpdateRequestStatus(ctx context.Context, id, status string) error`: A public method on `postgresFriendRepository` that updates the `status` and `updated_at` fields of a friend request. It returns `repository.ErrNotFound` if no rows are affected.\n    - `AreFriends(ctx context.Context, userID1, userID2 string) (bool, error)`: A public method on `postgresFriendRepository` that checks if two users are friends by querying the `friendships` table. It canonicalizes `userID1` and `userID2` before querying.\n    - `AddFriendship(ctx context.Context, userID1, userID2 string) error`: A public method on `postgresFriendRepository` that inserts a new friendship into the `friendships` table. It canonicalizes user IDs and uses `ON CONFLICT DO NOTHING` for idempotency.\n    - `RemoveFriendship(ctx context.Context, userID1, userID2 string) error`: A public method on `postgresFriendRepository` that deletes a friendship from the `friendships` table, canonicalizing user IDs.\n    - `GetPendingRequests(ctx context.Context, userID string) ([]*domain.FriendRequest, error)`: A public method on `postgresFriendRepository` that retrieves all pending friend requests (both sent and received) for a given user, joining with the `users` table to include sender and receiver details.\n    - `GetFriendsByUserID(ctx context.Context, userID string) ([]*domain.User, error)`: A public method on `postgresFriendRepository` that retrieves a list of users who are friends with the given `userID`, joining with the `users` table.\n    - `HasPendingRequest(ctx context.Context, userID1, userID2 string) (bool, error)`: A public method on `postgresFriendRepository` that checks if a pending friend request exists between two users, regardless of who sent it.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `FriendRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for friend requests and friendships, including error mapping, canonicalization of user IDs for friendship storage, and SQL joins for retrieving enriched data.\n",
  "backend/internal/adapter/postgres/group_repository.go": "- File Path: backend/internal/adapter/postgres/group_repository.go\n- High-Level Purpose: Implements the `GroupRepository` interface using PostgreSQL, providing concrete data access logic for managing groups and their members.\n- Definitions in the File:\n  - Structs:\n    - `postgresGroupRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresGroupRepository(db *pgxpool.Pool) repository.GroupRepository`: A public constructor function that returns a new instance of `postgresGroupRepository`.\n    - `Create(ctx context.Context, group *domain.Group) error`: A public method on `postgresGroupRepository` that inserts a new group record into the `groups` table. It handles `unique_violation` errors by returning `repository.ErrGroupHandleExists`.\n    - `CreateMember(ctx context.Context, member *domain.GroupMember) error`: A public method on `postgresGroupRepository` that inserts a new group member record into the `group_members` table. It handles `unique_violation` errors by returning `repository.ErrGroupMemberExists`.\n    - `GetByID(ctx context.Context, id string) (*domain.Group, error)`: A public method on `postgresGroupRepository` that retrieves a group by its ID from the `groups` table. Returns `repository.ErrNotFound` if no rows are found.\n    - `GetByHandle(ctx context.Context, handle string) (*domain.Group, error)`: A public method on `postgresGroupRepository` that retrieves a group by its handle from the `groups` table. Returns `repository.ErrNotFound` if no rows are found.\n    - `Update(ctx context.Context, group *domain.Group) error`: A public method on `postgresGroupRepository` that updates a group's `name`, `owner_id`, `profile_pic_url`, and `updated_at` fields in the `groups` table.\n    - `FindMember(ctx context.Context, groupID, userID string) (*domain.GroupMember, error)`: A public method on `postgresGroupRepository` that finds a specific group member in the `group_members` table. Returns `repository.ErrNotFound` if not found.\n    - `RemoveMember(ctx context.Context, groupID, userID string) error`: A public method on `postgresGroupRepository` that deletes a group member record from the `group_members` table. Returns `repository.ErrNotFound` if no rows were affected.\n    - `GetMembersWithUserDetails(ctx context.Context, groupID string) ([]*domain.GroupMember, error)`: A public method on `postgresGroupRepository` that retrieves all members of a group, joining with the `users` table to include user details.\n    - `GetGroupsByUserID(ctx context.Context, userID string) ([]*domain.Group, error)`: A public method on `postgresGroupRepository` that retrieves all groups a user is a member of, joining with the `group_members` table.\n    - `SearchByHandle(ctx context.Context, query string) ([]*domain.Group, error)`: A public method on `postgresGroupRepository` that searches for groups by their handle using a case-insensitive `ILIKE` query.\n    - `GetOldestMember(ctx context.Context, groupID, excludeUserID string) (*domain.GroupMember, error)`: A public method on `postgresGroupRepository` that retrieves the oldest member of a group (by `created_at`), excluding a specified user. Returns `repository.ErrNotFound` if no other members exist.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `GroupRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for group and member management, including error mapping for unique constraints and SQL joins for retrieving enriched data.\n",
  "backend/internal/adapter/postgres/message_repository.go": "- File Path: backend/internal/adapter/postgres/message_repository.go\n- High-Level Purpose: Implements the `MessageRepository` interface using PostgreSQL, providing concrete data access logic for storing and retrieving chat messages.\n- Definitions in the File:\n  - Structs:\n    - `postgresMessageRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresMessageRepository(db *pgxpool.Pool) repository.MessageRepository`: A public constructor function that returns a new instance of `postgresMessageRepository` as a `repository.MessageRepository` interface.\n    - `Create(ctx context.Context, message *domain.Message) error`: A public method on `postgresMessageRepository` that inserts a new message record into the `messages` table.\n    - `GetByConversationID(ctx context.Context, conversationID string, before time.Time, limit int) ([]*domain.Message, error)`: A public method on `postgresMessageRepository` that retrieves a paginated list of messages for a given `conversationID`. It joins with the `users` table to include sender details and returns messages in ascending order of `created_at`.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `MessageRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for message management, including SQL joins for enriched data and reversing the result set to provide messages in chronological order.\n",
  "backend/internal/adapter/postgres/postgres.go": "- File Path: backend/internal/adapter/postgres/postgres.go\n- High-Level Purpose: Provides a utility function to establish and verify a connection to a PostgreSQL database.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewDB(databaseURL string) *pgxpool.Pool`: A public function that creates a new PostgreSQL connection pool using the provided `databaseURL`, pings the database to ensure connectivity, and returns the connection pool. It logs fatal errors if connection fails.\n- Notable Patterns or Logic: This file acts as a database connection factory, centralizing the logic for connecting to PostgreSQL.\n",
  "backend/internal/adapter/postgres/session_repository.go": "- File Path: backend/internal/adapter/postgres/session_repository.go\n- High-Level Purpose: Implements the `SessionRepository` interface using PostgreSQL as the persistent storage.\n- Definitions in the File:\n  - Structs:\n    - `postgresSessionRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresSessionRepository(db *pgxpool.Pool) repository.SessionRepository`: A public constructor function that returns a new instance of `postgresSessionRepository` as a `repository.SessionRepository` interface.\n    - `Store(ctx context.Context, session *domain.Session) error`: A public method on `postgresSessionRepository` that inserts a new session record into the `sessions` table.\n    - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: A public method on `postgresSessionRepository` that retrieves a session by its ID from the `sessions` table. Returns `nil, nil` if not found.\n    - `Delete(ctx context.Context, id string) error`: A public method on `postgresSessionRepository` that deletes a session by its ID from the `sessions` table.\n    - `DeleteAllForUser(ctx context.Context, userID string) error`: A public method on `postgresSessionRepository` that deletes all sessions associated with a specific user ID from the `sessions` table.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `SessionRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for session management.\n",
  "backend/internal/adapter/postgres/user_repository.go": "- File Path: backend/internal/adapter/postgres/user_repository.go\n- High-Level Purpose: Implements the `UserRepository` interface using PostgreSQL as the persistent storage for user data.\n- Definitions in the File:\n  - Structs:\n    - `postgresUserRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresUserRepository(db *pgxpool.Pool) repository.UserRepository`: A public constructor function that returns a new instance of `postgresUserRepository` as a `repository.UserRepository` interface.\n    - `Create(ctx context.Context, user *domain.User) error`: A public method on `postgresUserRepository` that inserts a new user record into the `users` table.\n    - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their username from the `users` table. Returns `nil, nil` if not found.\n    - `GetByID(ctx context.Context, id string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their ID from the `users` table. Returns `nil, nil` if not found.\n    - `Update(ctx context.Context, user *domain.User) error`: A public method on `postgresUserRepository` that updates an existing user's `username`, `password_hash`, `profile_pic_url`, and `updated_at` fields in the `users` table.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `UserRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for user management, including creating, retrieving, and updating user records.\n",
  "backend/internal/adapter/redis/event_repository.go": "- File Path: backend/internal/adapter/redis/event_repository.go\n- High-Level Purpose: Implements the `EventRepository` interface for Redis, specifically for buffering real-time events for offline users.\n- Definitions in the File:\n  - Constants:\n    - `userEventBufferKeyPrefix`: A string constant used as a prefix for Redis keys storing user event buffers.\n    - `bufferTTL`: A `time.Duration` constant defining the time-to-live for buffered events in Redis (48 hours).\n  - Structs:\n    - `redisEventRepository`: An internal struct that holds the Redis client (`client`).\n  - Functions / Methods:\n    - `NewRedisEventRepository(client *redis.Client) repository.EventRepository`: A public constructor function that returns a new instance of `redisEventRepository` as a `repository.EventRepository` interface.\n    - `userBufferKey(userID string) string`: An internal helper method that generates the Redis key for a user's event buffer.\n    - `BufferEvent(ctx context.Context, event *domain.Event) error`: A public method on `redisEventRepository` that marshals an event to JSON, pushes it to the left of a Redis list (acting as a buffer) for the recipient user, and sets an expiration for the list.\n    - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: A public method on `redisEventRepository` that retrieves all buffered events for a given user from their Redis list, unmarshaling them back into `domain.Event` objects.\n    - `ClearUserBuffer(ctx context.Context, userID string) error`: A public method on `redisEventRepository` that deletes the Redis list containing buffered events for a specific user.\n    - `StoreEvents(ctx context.Context, events []*domain.Event) error`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n    - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n    - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `EventRepository` interface, providing a concrete Redis implementation for event buffering. It uses Redis lists as a message queue/buffer and sets TTLs for temporary storage. It explicitly marks PostgreSQL-specific methods as no-ops.\n",
  "backend/internal/adapter/redis/redis.go": "- File Path: backend/internal/adapter/redis/redis.go\n- High-Level Purpose: Provides a utility function to establish and verify a connection to a Redis server.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewClient(redisURL string) *redis.Client`: A public function that parses a Redis connection URL, creates a new Redis client, pings the Redis server to ensure connectivity, and returns the client. It logs fatal errors if connection fails.\n- Notable Patterns or Logic: This file acts as a Redis client factory, centralizing the logic for connecting to Redis.\n",
  "backend/internal/delivery/http/handler/auth_handler.go": "- File Path: backend/internal/delivery/http/handler/auth_handler.go\n- High-Level Purpose: Implements HTTP handlers for authentication-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - Structs:\n    - `AuthHandler`: Holds a reference to the `usecase.AuthUsecase` to perform authentication operations.\n  - Functions / Methods:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: A public constructor function that creates and returns a new `AuthHandler` instance.\n    - `SignUp(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user registration. It decodes the request body, calls the `SignUp` use case, and responds with the created user or an error.\n    - `Login(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user login. It decodes the request body, calls the `Login` use case, and responds with authentication tokens or an error.\n    - `Refresh(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for refreshing authentication tokens. It decodes the refresh token from the request body, calls the `Refresh` use case, and responds with new tokens or an error.\n    - `Logout(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user logout. It decodes the refresh token, calls the `Logout` use case, and responds with a `204 No Content` status or an error.\n    - `handleAuthError(w http.ResponseWriter, err error)`: An internal helper function that maps specific authentication service errors to appropriate HTTP status codes and error messages for client responses.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern, acting as the entry point for HTTP requests and orchestrating the interaction with the use case layer.\n",
  "backend/internal/delivery/http/handler/friend_handler.go": "- File Path: backend/internal/delivery/http/handler/friend_handler.go\n- High-Level Purpose: Implements HTTP handlers for friend-related API endpoints, translating incoming HTTP requests into calls to the `FriendUsecase` and formatting HTTP responses.\n- Definitions in the File:\n  - Structs:\n    - `FriendHandler`: An internal struct that holds a reference to the `usecase.FriendUsecase` to perform friend management operations.\n  - Functions / Methods:\n    - `NewFriendHandler(uc usecase.FriendUsecase) *FriendHandler`: A public constructor function that creates and returns a new `FriendHandler` instance.\n    - `SendRequest(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP POST requests to `/friends/requests`. It decodes the receiver's username from the request body, calls the `SendFriendRequest` use case, and responds with the created friend request or an error.\n    - `GetPendingRequests(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP GET requests to `/friends/requests/pending`. It calls the `GetPendingRequests` use case and responds with a list of pending friend requests.\n    - `AcceptRequest(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP PUT requests to `/friends/requests/{requestID}/accept`. It extracts the `requestID` from the URL, calls the `AcceptFriendRequest` use case, and responds with `204 No Content` or an error.\n    - `RejectRequest(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP PUT requests to `/friends/requests/{requestID}/reject`. It extracts the `requestID` from the URL, calls the `RejectFriendRequest` use case, and responds with `204 No Content` or an error.\n    - `Unfriend(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP DELETE requests to `/friends/{userID}`. It extracts the `friendID` from the URL, calls the `Unfriend` use case, and responds with `204 No Content` or an error.\n    - `ListFriends(w http.ResponseWriter, r *http.Request)`: A public method on `FriendHandler` that handles HTTP GET requests to `/friends`. It calls the `ListFriends` use case and responds with a list of the user's friends.\n    - `handleFriendError(w http.ResponseWriter, err error)`: An internal helper function that maps specific errors returned by the `friendService` to appropriate HTTP status codes and error messages for client responses.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern, acting as the entry point for HTTP requests related to friend management. It extracts user IDs from the request context (set by authentication middleware), decodes request bodies, calls the appropriate use case methods, and provides structured error responses by mapping business logic errors to HTTP status codes.",
  "backend/internal/delivery/http/handler/group_handler.go": "- File Path: backend/internal/delivery/http/handler/group_handler.go\n- High-Level Purpose: Implements HTTP handlers for group-related API endpoints, translating incoming HTTP requests into calls to the `GroupUsecase` and formatting HTTP responses.\n- Definitions in the File:\n  - Structs:\n    - `GroupHandler`: An internal struct that holds a reference to the `usecase.GroupUsecase` to perform group management operations.\n  - Functions / Methods:\n    - `NewGroupHandler(uc usecase.GroupUsecase) *GroupHandler`: A public constructor function that creates and returns a new `GroupHandler` instance.\n    - `CreateGroup(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP POST requests to `/groups`. It parses multipart form data (handle, name, photo), extracts the `userID` from the request context, calls the `CreateGroup` use case, and responds with the created group or an error.\n    - `SearchGroups(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP GET requests to `/groups/search`. It extracts the `q` query parameter, calls the `SearchGroups` use case, and responds with a list of matching groups.\n    - `JoinGroup(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP POST requests to `/groups/{handle}/join`. It extracts the group `handle` from the URL, extracts the `userID` from context, calls the `JoinGroup` use case, and responds with the joined group or an error.\n    - `GetGroupDetails(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP GET requests to `/groups/{group_id}`. It extracts the `group_id` from the URL, calls the `GetGroupDetails` use case, and responds with detailed group information.\n    - `UpdateGroup(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP PUT requests to `/groups/{group_id}`. It parses multipart form data (name, photo), extracts IDs from context/URL, calls the `UpdateGroup` use case, and responds with the updated group or an error.\n    - `TransferOwnership(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP PUT requests to `/groups/{group_id}/transfer-ownership`. It decodes the `new_owner_id` from the request body, extracts IDs from context/URL, calls the `TransferOwnership` use case, and responds with `204 No Content` or an error.\n    - `AddMember(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP POST requests to `/groups/{group_id}/members`. It decodes the `friend_id` from the request body, extracts IDs from context/URL, calls the `AddMember` use case, and responds with `204 No Content` or an error.\n    - `RemoveMember(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP DELETE requests to `/groups/{group_id}/members/{member_id}`. It extracts IDs from context/URL, calls the `RemoveMember` use case, and responds with `204 No Content` or an error.\n    - `LeaveGroup(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP POST requests to `/groups/{group_id}/leave`. It extracts IDs from context/URL, calls the `LeaveGroup` use case, and responds with `204 No Content` or an error.\n    - `ListMyGroups(w http.ResponseWriter, r *http.Request)`: A public method on `GroupHandler` that handles HTTP GET requests to `/groups/me`. It extracts the `userID` from the request context, calls the `ListUserGroups` use case, and responds with a list of groups the user is a member of.\n    - `handleGroupError(w http.ResponseWriter, err error)`: An internal helper function that maps specific errors returned by the `groupService` and `groupRepository` to appropriate HTTP status codes (e.g., 400, 403, 404, 409) and error messages for client responses.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern, acting as the entry point for HTTP requests related to group management. It extracts user IDs from the request context (set by authentication middleware), handles multipart form data for file uploads, decodes JSON request bodies, calls the appropriate use case methods, and provides structured error responses by mapping business logic errors to HTTP status codes.\n",
  "backend/internal/delivery/http/handler/message_handler.go": "- File Path: backend/internal/delivery/http/handler/message_handler.go\n- High-Level Purpose: Implements HTTP handlers for message-related API endpoints, specifically for retrieving message history within a conversation.\n- Definitions in the File:\n  - Structs:\n    - `MessageHandler`: An internal struct that holds a reference to the `usecase.MessageUsecase` to perform message operations.\n  - Functions / Methods:\n    - `NewMessageHandler(uc usecase.MessageUsecase) *MessageHandler`: A public constructor function that creates and returns a new `MessageHandler` instance.\n    - `GetHistory(w http.ResponseWriter, r *http.Request)`: A public method on `MessageHandler` that handles HTTP GET requests to retrieve message history for a given `conversation_id`. It extracts the `userID` from the request context, parses `conversation_id` from the URL, and `before` timestamp and `limit` from query parameters. It then calls the `GetMessageHistory` use case and responds with a JSON array of messages or an error.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern for message history retrieval. It demonstrates how to extract parameters from URL paths and query strings, retrieve user context from middleware, and serialize responses to JSON.\n",
  "backend/internal/delivery/http/handler/user_handler.go": "- File Path: backend/internal/delivery/http/handler/user_handler.go\n- High-Level Purpose: Implements HTTP handlers for user-related API endpoints, including fetching user profiles and updating the authenticated user's profile.\n- Definitions in the File:\n  - Structs:\n    - `UserHandler`: Holds a reference to the `usecase.UserUsecase` to perform user-related operations.\n  - Functions / Methods:\n    - `NewUserHandler(uc usecase.UserUsecase) *UserHandler`: A public constructor function that creates and returns a new `UserHandler` instance.\n    - `GetMyProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP GET requests for the authenticated user's profile. It extracts the user ID from the request context and calls the `GetProfile` use case.\n    - `GetUserProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP GET requests for a user's profile by username. It extracts the username from the URL parameter and calls the `GetUserByUsername` use case.\n    - `UpdateMyProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP PUT requests for updating the authenticated user's profile. It parses multipart form data for username, password, and profile picture, calls the `UpdateProfile` and `UpdateProfilePicture` use cases, and responds with the updated user or an error.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern for user management, acting as the entry point for HTTP requests and orchestrating interaction with the user use case layer. It specifically handles multipart form data for file uploads.\n",
  "backend/internal/delivery/http/handler/websocket_handler.go": "- File Path: backend/internal/delivery/http/handler/websocket_handler.go\n- High-Level Purpose: Provides an HTTP handler responsible for upgrading standard HTTP requests to WebSocket connections and integrating new WebSocket clients into the application's real-time `Hub`.\n- Definitions in the File:\n  - Variables:\n    - `upgrader`: A global `websocket.Upgrader` instance configured for WebSocket handshake, allowing all origins for development.\n  - Structs:\n    - `WebSocketHandler`: An internal struct that holds a reference to the `websocket.Hub`.\n  - Functions / Methods:\n    - `NewWebSocketHandler(hub *ws.Hub) *WebSocketHandler`: A public constructor function that creates and returns a new `WebSocketHandler` instance.\n    - `ServeWS(w http.ResponseWriter, r *http.Request)`: A public method on `WebSocketHandler` that serves the WebSocket endpoint. It extracts the `userID` from the request context (set by authentication middleware), upgrades the HTTP connection to a WebSocket, creates a new `websocket.Client`, registers it with the `Hub`, and starts `readPump` and `writePump` goroutines for the client.\n- Notable Patterns or Logic: This file acts as an HTTP handler for WebSocket connections, leveraging the `gorilla/websocket` library. It integrates with the authentication middleware to secure WebSocket connections and uses a `Hub` to manage multiple clients.\n",
  "backend/internal/delivery/http/middleware/auth_middleware.go": "- File Path: backend/internal/delivery/http/middleware/auth_middleware.go\n- High-Level Purpose: Provides an HTTP middleware function to authenticate incoming requests using JWTs and inject the authenticated user's ID into the request context.\n- Definitions in the File:\n  - Types:\n    - `contextKey`: A custom string type used for context keys to avoid collisions.\n  - Constants:\n    - `UserIDContextKey`: A `contextKey` constant used to store and retrieve the authenticated user's ID from the request context.\n  - Functions / Methods:\n    - `AuthMiddleware(cfg *config.Config) func(next http.Handler) http.Handler`: A public function that returns an `http.Handler` middleware. This middleware extracts a Bearer token from the Authorization header, validates it using the JWT secret from the config, and if valid, adds the `UserID` from the token claims to the request context before passing it to the next handler.\n- Notable Patterns or Logic: This file implements an HTTP middleware pattern, specifically for authentication and context enrichment.\n",
  "backend/internal/delivery/http/router.go": "- File Path: backend/internal/delivery/http/router.go\n- High-Level Purpose: Configures and sets up the main HTTP router for the application, defining all API endpoints, applying middleware, and serving static frontend files with SPA routing capabilities.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewRouter(cfg *config.Config, authUsecase usecase.AuthUsecase, userUsecase usecase.UserUsecase, friendUsecase usecase.FriendUsecase, groupUsecase usecase.GroupUsecase, messageUsecase usecase.MessageUsecase, hub *websocket.Hub) http.Handler`: A public constructor function that initializes all HTTP handlers, applies global middleware (logger, recoverer), defines public and authenticated API routes, and sets up static file serving.\n    - `FileServer(r chi.Router, path string, root http.FileSystem)`: A public helper function that serves static files from a given root directory. It includes logic to redirect paths without trailing slashes and to serve `chat.html` as a fallback for SPA routing if a requested file is not found.\n- Notable Patterns or Logic: This file implements the \"Router\" pattern using `go-chi/chi`, centralizing API route definitions. It integrates authentication middleware for protected routes and includes a flexible static file server with Single Page Application (SPA) routing support.\n",
  "backend/internal/delivery/websocket/client.go": "- File Path: backend/internal/delivery/websocket/client.go\n- High-Level Purpose: Represents a single WebSocket client connection, managing its lifecycle, reading incoming messages, writing outgoing messages, and integrating with the `Hub` for event processing.\n- Definitions in the File:\n  - Constants:\n    - `writeWait`, `pongWait`, `pingPeriod`, `maxMessageSize`: Timeouts and limits for WebSocket operations.\n    - `newline`, `space`: Byte slices for message processing.\n  - Structs:\n    - `Client`: An internal struct representing an individual WebSocket client.\n      - Fields: `hub` (*Hub), `conn` (*websocket.Conn), `send` (chan []byte, buffered channel for outbound messages), `userID` (string, authenticated user ID).\n    - `IncomingEvent`: An internal struct for unmarshalling JSON events received from clients.\n      - Fields: `Type` (string), `Payload` (json.RawMessage).\n  - Functions / Methods:\n    - `readPump()`: An internal method on `Client` that continuously reads messages from the WebSocket connection. It sets read deadlines, handles pong messages, unmarshals incoming JSON events into `IncomingEvent`, and sends them to the `Hub`'s broadcast channel. It defers unregistration and connection closure.\n    - `writePump()`: An internal method on `Client` that continuously writes messages from the `send` channel to the WebSocket connection. It handles write deadlines, sends ping messages periodically, and aggregates multiple queued messages into a single WebSocket frame. It defers connection closure.\n    - `SendEvent(event interface{})`: A public method on `Client` that marshals a given event payload to JSON and attempts to send it to the client's `send` channel. If the channel is full, it logs an error, closes the channel, and unregisters the client.\n- Notable Patterns or Logic: This file implements a \"WebSocket Client\" pattern, using goroutines (`readPump`, `writePump`) for concurrent reading and writing. It incorporates heartbeat (ping/pong) mechanisms for connection liveness and handles message buffering and error conditions.\n",
  "backend/internal/delivery/websocket/hub.go": "- File Path: backend/internal/delivery/websocket/hub.go\n- High-Level Purpose: Manages the lifecycle of all active WebSocket clients, processes incoming events from clients, and broadcasts events to specific users or buffers them for offline delivery.\n- Definitions in the File:\n  - Structs:\n    - `HubEvent`: An internal struct representing an event received from a WebSocket client.\n      - Fields: `Client` (*Client), `Type` (string), `Payload` (json.RawMessage).\n    - `Hub`: An internal struct that maintains the state of the WebSocket system.\n      - Fields: `clients` (map[string]*Client, stores registered clients by `userID`), `broadcast` (chan *HubEvent, channel for incoming client events), `register` (chan *Client, channel for new client registrations), `unregister` (chan *Client, channel for client disconnections), `eventUsecase` (usecase.EventUsecase), `messageUsecase` (usecase.MessageUsecase).\n  - Functions / Methods:\n    - `NewHub(eventUsecase usecase.EventUsecase, messageUsecase usecase.MessageUsecase) *Hub`: A public constructor function that creates and returns a new `Hub` instance, initializing its channels and dependencies.\n    - `Run()`: A public method on `Hub` that runs the main event loop. It continuously listens on the `register`, `unregister`, and `broadcast` channels, handling client connections, disconnections, and incoming events respectively.\n    - `handleIncomingEvent(event *HubEvent)`: An internal method on `Hub` that processes events received from WebSocket clients. It uses a `switch` statement to handle different event types (e.g., \"send_message\"), unmarshals their payloads, and calls the appropriate use case methods (e.g., `messageUsecase.SendMessage`).\n    - `BroadcastEvent(ctx context.Context, eventType string, payload interface{}, recipientID string)`: A public method on `Hub` that attempts to send an event to a specific `recipientID`. If the recipient is online (has an active WebSocket client), the event is sent directly. Otherwise, the event is buffered using the `eventUsecase` for offline delivery.\n- Notable Patterns or Logic: This file implements a \"WebSocket Hub\" pattern, acting as a central message broker for real-time communication. It uses Go channels for concurrent, safe communication between clients and the hub. It integrates with the `EventUsecase` for buffering events for offline users and the `MessageUsecase` for processing chat messages.\n",
  "backend/internal/domain/event.go": "- File Path: backend/internal/domain/event.go\n- High-Level Purpose: Defines the `Event` domain entity, representing a real-time event that can be sent to users or persisted.\n- Definitions in the File:\n  - Structs:\n    - `Event`: Represents a real-time event within the application.\n      - Fields:\n        - `ID` (string): Unique identifier for the event.\n        - `Type` (string): The type of event (e.g., \"new_message\", \"friend_request\").\n        - `Payload` (json.RawMessage): The actual data associated with the event, stored as raw JSON.\n        - `RecipientID` (string): The ID of the user intended to receive this event.\n        - `IsDelivered` (bool): A flag indicating whether the event has been delivered to the recipient.\n        - `CreatedAt` (time.Time): Timestamp when the event was created.\n- Notable Patterns or Logic: This is a standard domain entity definition, central to the application's event-driven architecture. The use of `json.RawMessage` for `Payload` allows for flexible event data structures.",
  "backend/internal/domain/friend_request.go": "- File Path: backend/internal/domain/friend_request.go\n- High-Level Purpose: Defines the `FriendRequest` domain entity, representing a request from one user to another to establish a friendship, along with its possible status values.\n- Definitions in the File:\n  - Structs:\n    - `FriendRequest`: Represents a friend request.\n      - Fields: `ID` (string), `SenderID` (string), `ReceiverID` (string), `Status` (string, e.g., \"pending\", \"accepted\", \"rejected\"), `CreatedAt` (time.Time), `UpdatedAt` (time.Time).\n      - Embedded Fields: `Sender` (*User, optional, for joining), `Receiver` (*User, optional, for joining).\n  - Constants:\n    - `FriendRequestStatusPending`: String constant for a pending friend request.\n    - `FriendRequestStatusAccepted`: String constant for an accepted friend request.\n    - `FriendRequestStatusRejected`: String constant for a rejected friend request.\n- Notable Patterns or Logic: This is a standard domain entity definition, central to the application's friend management feature. It includes fields for tracking the lifecycle of a request and optional embedded `User` structs for convenience in data retrieval.\n",
  "backend/internal/domain/group.go": "- File Path: backend/internal/domain/group.go\n- High-Level Purpose: Defines the `Group` and `GroupMember` domain entities, representing chat groups and their associated user memberships within the application.\n- Definitions in the File:\n  - Constants:\n    - `GroupRoleOwner`: String constant for the \"owner\" role within a group.\n    - `GroupRoleMember`: String constant for the \"member\" role within a group.\n  - Structs:\n    - `Group`: Represents a chat group.\n      - Fields: `ID` (string), `Handle` (string), `Name` (string), `OwnerID` (string), `ProfilePicURL` (string), `CreatedAt` (time.Time), `UpdatedAt` (time.Time).\n    - `GroupMember`: Represents a user's membership in a specific group.\n      - Fields: `GroupID` (string), `UserID` (string), `Role` (string, e.g., \"owner\", \"member\"), `CreatedAt` (time.Time).\n      - Embedded Fields: `User` (*User, optional, used for joining with user details).\n- Notable Patterns or Logic: This file defines core domain entities, central to the application's group management feature. It includes constants for group roles to ensure consistency.\n",
  "backend/internal/domain/message.go": "",
  "backend/internal/domain/session.go": "- File Path: backend/internal/domain/session.go\n- High-Level Purpose: Defines the `Session` domain entity, representing a user's active session.\n- Definitions in the File:\n  - Structs:\n    - `Session`: Represents a user session.\n      - Fields: `ID` (string, acts as the refresh token), `UserID` (string), `ExpiresAt` (time.Time), `CreatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for session management.\n",
  "backend/internal/domain/user.go": "- File Path: backend/internal/domain/user.go\n- High-Level Purpose: Defines the `User` domain entity, representing a user in the system.\n- Definitions in the File:\n  - Structs:\n    - `User`: Represents a user account.\n      - Fields: `ID` (string), `Username` (string), `PasswordHash` (string, marked to be ignored in JSON serialization), `ProfilePicURL` (string), `CreatedAt` (time.Time), `UpdatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for user management.\n",
  "backend/internal/repository/event_repo.go": "- File Path: backend/internal/repository/event_repo.go\n- High-Level Purpose: Defines the interface for event data access operations, abstracting the underlying storage mechanisms for both temporary buffering (e.g., Redis) and persistent storage (e.g., PostgreSQL).\n- Definitions in the File:\n  - Interfaces:\n    - `EventRepository`: An interface defining methods for interacting with event data.\n      - `BufferEvent(ctx context.Context, event *domain.Event) error`: Stores an event temporarily, typically for offline users.\n      - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: Retrieves temporarily buffered events for a specific user.\n      - `ClearUserBuffer(ctx context.Context, userID string) error`: Removes all temporarily buffered events for a user.\n      - `StoreEvents(ctx context.Context, events []*domain.Event) error`: Persistently stores a batch of events.\n      - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: Retrieves persistently stored events that have not yet been delivered to a user.\n      - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: Updates the status of persistently stored events to mark them as delivered.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, providing a unified abstraction for event storage that can be implemented by different underlying technologies (e.g., Redis for buffering, PostgreSQL for persistence).\n",
  "backend/internal/repository/file_repo.go": "- File Path: backend/internal/repository/file_repo.go\n- High-Level Purpose: Defines the interface for file storage operations within the application's domain layer, specifically for handling profile pictures.\n- Definitions in the File:\n  - Interfaces:\n    - `FileRepository`: An interface defining methods for interacting with file storage.\n      - `SaveProfilePicture(ctx context.Context, fileData []byte, fileType string) (filename string, err error)`: Saves profile picture data and returns its generated filename.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying file storage mechanism for profile pictures.\n",
  "backend/internal/repository/friend_repo.go": "- File Path: backend/internal/repository/friend_repo.go\n- High-Level Purpose: Defines the interface for friend-related data access operations, abstracting the underlying storage mechanisms for friend requests and friendships.\n- Definitions in the File:\n  - Variables:\n    - `ErrFriendRequestExists`: A public error constant indicating a friend request already exists.\n    - `ErrNotFound`: A public error constant indicating a resource was not found.\n  - Interfaces:\n    - `FriendRepository`: An interface defining methods for interacting with friend data.\n      - `CreateRequest(ctx context.Context, req *domain.FriendRequest) error`: Creates a new friend request.\n      - `GetRequestByID(ctx context.Context, id string) (*domain.FriendRequest, error)`: Retrieves a friend request by its ID.\n      - `UpdateRequestStatus(ctx context.Context, id, status string) error`: Updates the status of a friend request.\n      - `AreFriends(ctx context.Context, userID1, userID2 string) (bool, error)`: Checks if two users are friends.\n      - `AddFriendship(ctx context.Context, userID1, userID2 string) error`: Establishes a friendship between two users.\n      - `RemoveFriendship(ctx context.Context, userID1, userID2 string) error`: Removes a friendship between two users.\n      - `GetPendingRequests(ctx context.Context, userID string) ([]*domain.FriendRequest, error)`: Retrieves all pending friend requests for a user.\n      - `GetFriendsByUserID(ctx context.Context, userID string) ([]*domain.User, error)`: Retrieves a list of users who are friends with the given user.\n      - `HasPendingRequest(ctx context.Context, userID1, userID2 string) (bool, error)`: Checks if a pending friend request exists between two users (in either direction).\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, providing a clean abstraction for friend data storage and retrieval, allowing different database implementations without affecting the business logic.\n",
  "backend/internal/repository/group_repo.go": "- File Path: backend/internal/repository/group_repo.go\n- High-Level Purpose: Defines the interface for group-related data access operations, abstracting the underlying storage mechanisms for groups and group members.\n- Definitions in the File:\n  - Variables:\n    - `ErrGroupHandleExists`: A public error constant indicating a group handle already exists.\n    - `ErrGroupMemberExists`: A public error constant indicating a user is already a member of a group.\n  - Interfaces:\n    - `GroupRepository`: An interface defining methods for interacting with group data.\n      - `Create(ctx context.Context, group *domain.Group) error`: Creates a new group record.\n      - `CreateMember(ctx context.Context, member *domain.GroupMember) error`: Adds a new member to a group.\n      - `GetByID(ctx context.Context, id string) (*domain.Group, error)`: Retrieves a group by its ID.\n      - `GetByHandle(ctx context.Context, handle string) (*domain.Group, error)`: Retrieves a group by its unique handle.\n      - `Update(ctx context.Context, group *domain.Group) error`: Updates an existing group record.\n      - `FindMember(ctx context.Context, groupID, userID string) (*domain.GroupMember, error)`: Finds a specific member within a group.\n      - `RemoveMember(ctx context.Context, groupID, userID string) error`: Removes a member from a group.\n      - `GetMembersWithUserDetails(ctx context.Context, groupID string) ([]*domain.GroupMember, error)`: Retrieves all members of a group, including their user details.\n      - `GetGroupsByUserID(ctx context.Context, userID string) ([]*domain.Group, error)`: Retrieves all groups a user is a member of.\n      - `SearchByHandle(ctx context.Context, query string) ([]*domain.Group, error)`: Searches for groups by their handle.\n      - `GetOldestMember(ctx context.Context, groupID, excludeUserID string) (*domain.GroupMember, error)`: Retrieves the oldest member of a group, excluding a specific user.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for group entities and members. It defines specific repository-level errors for common data conflicts.\n",
  "backend/internal/repository/message_repo.go": "- File Path: backend/internal/repository/message_repo.go\n- High-Level Purpose: Defines the interface for message data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `MessageRepository`: An interface defining methods for interacting with message data.\n      - `Create(ctx context.Context, message *domain.Message) error`: Creates a new message record.\n      - `GetByConversationID(ctx context.Context, conversationID string, before time.Time, limit int) ([]*domain.Message, error)`: Retrieves a paginated list of messages for a specific conversation, ordered by creation time.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for message entities.\n",
  "backend/internal/repository/session_repo.go": "- File Path: backend/internal/repository/session_repo.go\n- High-Level Purpose: Defines the interface for session data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `SessionRepository`: An interface defining methods for interacting with session data.\n      - `Store(ctx context.Context, session *domain.Session) error`: Stores a new session.\n      - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: Retrieves a session by its ID.\n      - `Delete(ctx context.Context, id string) error`: Deletes a session by its ID.\n      - `DeleteAllForUser(ctx context.Context, userID string) error`: Deletes all sessions for a specific user.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for session entities.\n",
  "backend/internal/repository/user_repo.go": "- File Path: backend/internal/repository/user_repo.go\n- High-Level Purpose: Defines the interface for user data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `UserRepository`: An interface defining methods for interacting with user data.\n      - `Create(ctx context.Context, user *domain.User) error`: Creates a new user record.\n      - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: Retrieves a user by their username.\n      - `GetByID(ctx context.Context, id string) (*domain.User, error)`: Retrieves a user by their ID.\n      - `Update(ctx context.Context, user *domain.User) error`: Updates an existing user record.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for user entities.\n",
  "backend/internal/service/auth_service.go": "- File Path: backend/internal/service/auth_service.go\n- High-Level Purpose: Implements the `AuthUsecase` interface, containing the core business logic for user authentication, registration, and session management.\n- Definitions in the File:\n  - Variables:\n    - `ErrUserExists`, `ErrUserNotFound`, `ErrInvalidCredentials`, `ErrInvalidUsername`, `ErrInvalidPassword`, `ErrSessionNotFound`, `ErrSessionExpired`: Public error constants representing specific authentication-related business logic errors.\n  - Structs:\n    - `authService`: An internal struct that holds dependencies: `UserRepository`, `SessionRepository`, and `Config`.\n  - Functions / Methods:\n    - `NewAuthService(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, cfg *config.Config) usecase.AuthUsecase`: A public constructor function that creates and returns a new `authService` instance as an `usecase.AuthUsecase` interface.\n    - `SignUp(ctx context.Context, input usecase.SignUpInput) (*domain.User, error)`: A public method on `authService` that handles user registration. It validates username and password, checks for existing users, hashes the password, and creates a new user in the repository.\n    - `Login(ctx context.Context, input usecase.LoginInput) (*usecase.AuthTokens, error)`: A public method on `authService` that handles user login. It retrieves the user, verifies the password hash, deletes any existing sessions for the user (single device policy), and creates a new session.\n    - `Refresh(ctx context.Context, refreshToken string) (*usecase.AuthTokens, error)`: A public method on `authService` that refreshes authentication tokens. It retrieves and validates the existing session (refresh token), checks for expiration, deletes the old session, and creates a new one.\n    - `Logout(ctx context.Context, refreshToken string) error`: A public method on `authService` that handles user logout by deleting the specified refresh token (session).\n    - `createSession(ctx context.Context, userID string) (*usecase.AuthTokens, error)`: An internal helper method that generates a new access token and creates a new session (refresh token) in the repository for a given user ID.\n    - `validateUsername(username string) error`: An internal helper function that validates the format and length of a username using a regular expression.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic and orchestrating interactions between repositories and utility functions. It also defines and handles specific business errors.",
  "backend/internal/service/event_service.go": "- File Path: backend/internal/service/event_service.go\n- High-Level Purpose: Implements the `EventUsecase` interface, providing the business logic for creating and buffering real-time events, and a placeholder for persisting buffered events to long-term storage.\n- Definitions in the File:\n  - Structs:\n    - `eventService`: An internal struct that holds dependencies: `redisEventRepo` (for buffering), `pgEventRepo` (for persistence), and `userRepo` (for user-related operations, though not directly used in current methods).\n  - Functions / Methods:\n    - `NewEventService(redisEventRepo, pgEventRepo repository.EventRepository, userRepo repository.UserRepository) usecase.EventUsecase`: A public constructor function that creates and returns a new `eventService` instance as a `usecase.EventUsecase` interface.\n    - `CreateAndBufferEvent(ctx context.Context, eventType string, payload interface{}, recipientID string) error`: A public method on `eventService` that marshals the event payload, creates a `domain.Event` object, and buffers it using the `redisEventRepo`.\n    - `PersistBufferedEvents(ctx context.Context)`: A public method on `eventService` intended to be run as a background job. It currently contains a placeholder log message, indicating that a scalable implementation would involve iterating through users with buffered events, retrieving them from Redis, storing them in PostgreSQL, and then clearing the Redis buffer.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern for event management. It orchestrates between the Redis and PostgreSQL event repositories, handling the initial buffering of events and outlining the strategy for eventual persistence. The `PersistBufferedEvents` method highlights a common pattern for background workers in event-driven architectures.\n",
  "backend/internal/service/friend_service.go": "- File Path: backend/internal/service/friend_service.go\n- High-Level Purpose: Implements the `FriendUsecase` interface, containing the core business logic for managing friend requests and friendships, including sending, accepting, rejecting requests, unfriending, and listing friends.\n- Definitions in the File:\n  - Variables:\n    - `ErrFriendRequestYourself`: A public error constant indicating a user tried to send a request to themselves.\n    - `ErrAlreadyFriends`: A public error constant indicating users are already friends.\n    - `ErrFriendRequestExists`: A public error constant indicating a pending request already exists.\n    - `ErrFriendRequestInvalid`: A public error constant for an invalid friend request (e.g., not found, wrong status).\n    - `ErrFriendRequestNotReceiver`: A public error constant indicating only the receiver can accept/reject a request.\n  - Structs:\n    - `friendService`: An internal struct that holds dependencies: `FriendRepository`, `UserRepository`, and `EventUsecase`.\n  - Functions / Methods:\n    - `NewFriendService(friendRepo repository.FriendRepository, userRepo repository.UserRepository, eventUsecase usecase.EventUsecase) usecase.FriendUsecase`: A public constructor function that creates and returns a new `friendService` instance as a `usecase.FriendUsecase` interface.\n    - `SendFriendRequest(ctx context.Context, senderID, receiverUsername string) (*domain.FriendRequest, error)`: A public method on `friendService` that handles sending a friend request. It validates sender/receiver, checks for existing friendships/requests, creates a new request, and buffers a \"friend_request_received\" event for the receiver.\n    - `AcceptFriendRequest(ctx context.Context, userID, requestID string) error`: A public method on `friendService` that handles accepting a friend request. It validates the request and user, adds a new friendship, updates the request status to \"accepted\", and buffers a \"friend_request_accepted\" event for the sender.\n    - `RejectFriendRequest(ctx context.Context, userID, requestID string) error`: A public method on `friendService` that handles rejecting a friend request. It validates the request and user, updates the request status to \"rejected\", and buffers a \"friend_request_rejected\" event for the other user involved.\n    - `Unfriend(ctx context.Context, userID, friendID string) error`: A public method on `friendService` that handles unfriending a user. It removes the friendship and buffers an \"unfriended\" event for the unfriended user.\n    - `GetPendingRequests(ctx context.Context, userID string) ([]*domain.FriendRequest, error)`: A public method on `friendService` that retrieves all pending friend requests for a given user.\n    - `ListFriends(ctx context.Context, userID string) ([]*domain.User, error)`: A public method on `friendService` that retrieves a list of all friends for a given user.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern for friend management. It orchestrates interactions between the `FriendRepository`, `UserRepository`, and `EventUsecase`, performs extensive input validation, and defines specific business errors. It also integrates with the event system to notify users of friendship-related actions.\n",
  "backend/internal/service/group_service.go": "- File Path: backend/internal/service/group_service.go\n- High-Level Purpose: Implements the `GroupUsecase` interface, providing the core business logic for group management, including creation, updates, membership, and ownership transfer.\n- Definitions in the File:\n  - Variables:\n    - `ErrInvalidGroupHandle`, `ErrNotGroupOwner`, `ErrNotGroupMember`, `ErrCannotRemoveOwner`, `ErrCannotLeaveAsOwner`, `ErrAddNotFriend`, `ErrTransferToNonMember`, `ErrTransferToSelf`, `ErrRemoveSelf`, `ErrLastMemberCannotLeave`: Public error constants representing specific group-related business logic errors.\n    - `groupHandleRegex`: A module-level regular expression for validating group handles.\n  - Structs:\n    - `groupService`: An internal struct that holds dependencies: `groupRepo` (repository.GroupRepository), `userRepo` (repository.UserRepository), `friendRepo` (repository.FriendRepository), `fileRepo` (repository.FileRepository), and `eventUsecase` (usecase.EventUsecase).\n  - Functions / Methods:\n    - `NewGroupService(groupRepo repository.GroupRepository, userRepo repository.UserRepository, friendRepo repository.FriendRepository, fileRepo repository.FileRepository, eventUsecase usecase.EventUsecase) usecase.GroupUsecase`: A public constructor function that creates and returns a new `groupService` instance.\n    - `validateGroupHandle(handle string) error`: An internal method on `groupService` that validates the format of a group handle (must start with '#' and match a regex).\n    - `CreateGroup(ctx context.Context, userID string, input usecase.CreateGroupInput, file multipart.File, fileHeader *multipart.FileHeader) (*domain.Group, error)`: A public method on `groupService` that handles group creation. It validates the handle, optionally saves a group picture (reusing user service logic), creates the group, and adds the creator as an owner member.\n    - `GetGroupDetails(ctx context.Context, groupID string) (*usecase.GroupDetails, error)`: A public method on `groupService` that retrieves group details along with its members.\n    - `UpdateGroup(ctx context.Context, userID, groupID string, input usecase.UpdateGroupInput, file multipart.File, fileHeader *multipart.FileHeader) (*domain.Group, error)`: A public method on `groupService` that updates a group's name and/or profile picture, ensuring the `userID` is the owner.\n    - `SearchGroups(ctx context.Context, query string) ([]*domain.Group, error)`: A public method on `groupService` that searches for groups by their handle.\n    - `JoinGroup(ctx context.Context, userID, groupHandle string) (*domain.Group, error)`: A public method on `groupService` that allows a user to join a group, handling cases where the user is already a member (idempotent).\n    - `LeaveGroup(ctx context.Context, userID, groupID string) error`: A public method on `groupService` that allows a user to leave a group. If the user is the owner and not the last member, it attempts to auto-transfer ownership to the oldest remaining member.\n    - `AddMember(ctx context.Context, currentUserID, groupID, friendID string) error`: A public method on `groupService` that adds a friend to a group, verifying that the `currentUserID` is a member and `friendID` is a friend.\n    - `RemoveMember(ctx context.Context, ownerID, groupID, memberID string) error`: A public method on `groupService` that removes a member from a group, ensuring the `ownerID` is the group owner and preventing removal of the owner or self.\n    - `TransferOwnership(ctx context.Context, currentOwnerID, groupID, newOwnerID string) error`: A public method on `groupService` that transfers group ownership, validating the current owner and ensuring the new owner is a member.\n    - `ListUserGroups(ctx context.Context, userID string) ([]*domain.Group, error)`: A public method on `groupService` that retrieves all groups a user is a member of.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic for group management. It orchestrates interactions between multiple repositories and the event use case, performs extensive input validation, and defines specific business errors. It reuses logic from `UserService` for profile picture handling.\n",
  "backend/internal/service/message_service.go": "- File Path: backend/internal/service/message_service.go\n- High-Level Purpose: Implements the `MessageUsecase` interface, providing the core business logic for sending messages, retrieving message history, and determining conversation recipients and user membership.\n- Definitions in the File:\n  - Variables:\n    - `ErrMessageTooLong`: A public error constant for messages exceeding character limits.\n    - `ErrInvalidConversation`: A public error constant for invalid conversation IDs or non-member access.\n  - Structs:\n    - `messageService`: An internal struct that holds dependencies: `messageRepo` (repository.MessageRepository), `userRepo` (repository.UserRepository), `groupRepo` (repository.GroupRepository), and `eventUsecase` (usecase.EventUsecase).\n  - Functions / Methods:\n    - `NewMessageService(messageRepo repository.MessageRepository, userRepo repository.UserRepository, groupRepo repository.GroupRepository, eventUsecase usecase.EventUsecase) usecase.MessageUsecase`: A public constructor function that creates and returns a new `messageService` instance.\n    - `SendMessage(ctx context.Context, senderID string, input usecase.SendMessageInput) (*domain.Message, error)`: A public method on `messageService` that handles sending a message. It validates message length, determines conversation recipients (P2P or group), creates the message in the repository, and buffers a \"new_message\" event for each recipient.\n    - `GetMessageHistory(ctx context.Context, userID, conversationID string, before time.Time, limit int) ([]*domain.Message, error)`: A public method on `messageService` that retrieves message history. It first verifies if the `userID` is a member of the `conversationID` before fetching messages from the repository.\n    - `getConversationRecipients(ctx context.Context, senderID, conversationID string) ([]string, error)`: An internal method on `messageService` that determines the recipient IDs for a given `conversationID`. It distinguishes between group conversations (UUID-based) and P2P conversations (colon-separated user IDs) and ensures the sender is a member.\n    - `isUserConversationMember(ctx context.Context, userID, conversationID string) (bool, error)`: An internal method on `messageService` that checks if a `userID` is a member of the specified `conversationID`, handling both group and P2P conversation types.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern for messaging. It orchestrates interactions between multiple repositories and the event use case, performs input validation, and defines specific business errors. It includes logic to dynamically determine conversation types and participants.\n",
  "backend/internal/service/user_service.go": "- File Path: backend/internal/service/user_service.go\n- High-Level Purpose: Implements the `UserUsecase` interface, containing the core business logic for user profile management, including fetching user details, updating profile information (username, password), and handling profile picture uploads.\n- Definitions in the File:\n  - Variables:\n    - `ErrProfileUpdateFailed`: A public error constant indicating a generic profile update failure.\n    - `ErrInvalidFileType`: A public error constant for unsupported profile picture file types.\n    - `ErrFileSizeExceeded`: A public error constant for profile pictures exceeding the size limit.\n  - Structs:\n    - `userService`: An internal struct that holds dependencies: `UserRepository` and `FileRepository`.\n  - Functions / Methods:\n    - `NewUserService(userRepo repository.UserRepository, fileRepo repository.FileRepository) usecase.UserUsecase`: A public constructor function that creates and returns a new `userService` instance as a `usecase.UserUsecase` interface.\n    - `GetProfile(ctx context.Context, userID string) (*domain.User, error)`: A public method on `userService` that retrieves a user's profile by their ID from the user repository.\n    - `GetUserByUsername(ctx context.Context, username string) (*domain.User, error)`: A public method on `userService` that retrieves a user's profile by their username from the user repository.\n    - `UpdateProfile(ctx context.Context, userID string, input usecase.UpdateUserInput) (*domain.User, error)`: A public method on `userService` that updates a user's username and/or password. It includes validation for username format/uniqueness and password length, and hashes new passwords.\n    - `UpdateProfilePicture(ctx context.Context, userID string, file multipart.File, fileHeader *multipart.FileHeader) (string, error)`: A public method on `userService` that handles uploading and updating a user's profile picture. It validates file size and type, saves the file using the file repository, and updates the user's `ProfilePicURL`.\n    - `validateUsername(username string) error`: An internal helper function that validates the format and length of a username using a regular expression.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic for user management. It orchestrates interactions between the user and file repositories, performs input validation, and defines specific business errors.\n",
  "backend/internal/usecase/auth_ucase.go": "- File Path: backend/internal/usecase/auth_ucase.go\n- High-Level Purpose: Defines the interface for authentication-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `SignUpInput`: DTO for user registration requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `LoginInput`: DTO for user login requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `AuthTokens`: DTO for returning authentication tokens.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n  - Interfaces:\n    - `AuthUsecase`: An interface defining the core authentication operations.\n      - `SignUp(ctx context.Context, input SignUpInput) (*domain.User, error)`: Registers a new user.\n      - `Login(ctx context.Context, input LoginInput) (*AuthTokens, error)`: Authenticates a user and issues tokens.\n      - `Refresh(ctx context.Context, refreshToken string) (*AuthTokens, error)`: Refreshes access and refresh tokens.\n      - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a refresh token/session.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input/output DTOs, separating business logic from delivery mechanisms.\n",
  "backend/internal/usecase/event_ucase.go": "- File Path: backend/internal/usecase/event_ucase.go\n- High-Level Purpose: Defines the interface for event-related business logic (use cases), outlining the operations for creating, buffering, and persisting events.\n- Definitions in the File:\n  - Interfaces:\n    - `EventUsecase`: An interface defining the core event management operations.\n      - `CreateAndBufferEvent(ctx context.Context, eventType string, payload interface{}, recipientID string) error`: Creates a new event and buffers it for a specific recipient.\n      - `PersistBufferedEvents(ctx context.Context)`: A method for a background process to move buffered events to persistent storage.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface for event management, separating the business logic from the specific implementation details of services and repositories.\n",
  "backend/internal/usecase/friend_ucase.go": "- File Path: backend/internal/usecase/friend_ucase.go\n- High-Level Purpose: Defines the interface for friend-related business logic (use cases), outlining the operations for managing friend requests and friendships within the application.\n- Definitions in the File:\n  - Interfaces:\n    - `FriendUsecase`: An interface defining the core friend management operations.\n      - `SendFriendRequest(ctx context.Context, senderID, receiverUsername string) (*domain.FriendRequest, error)`: Sends a friend request from one user to another.\n      - `AcceptFriendRequest(ctx context.Context, userID, requestID string) error`: Accepts a pending friend request.\n      - `RejectFriendRequest(ctx context.Context, userID, requestID string) error`: Rejects a pending friend request.\n      - `Unfriend(ctx context.Context, userID, friendID string) error`: Removes an existing friendship.\n      - `GetPendingRequests(ctx context.Context, userID string) ([]*domain.FriendRequest, error)`: Retrieves all pending friend requests for a specific user.\n      - `ListFriends(ctx context.Context, userID string) ([]*domain.User, error)`: Retrieves a list of all friends for a specific user.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface for friend management, separating the business logic contract from its concrete implementation details in the service layer.\n",
  "backend/internal/usecase/group_ucase.go": "- File Path: backend/internal/usecase/group_ucase.go\n- High-Level Purpose: Defines the interface for group-related business logic (use cases) and associated data transfer objects (DTOs) within the application.\n- Definitions in the File:\n  - Structs:\n    - `CreateGroupInput`: DTO for creating a new group.\n      - Fields: `Handle` (string), `Name` (string).\n    - `UpdateGroupInput`: DTO for updating group details.\n      - Fields: `Name` (*string, optional).\n    - `AddGroupMemberInput`: DTO for adding a member to a group.\n      - Fields: `UserID` (string).\n    - `TransferOwnershipInput`: DTO for transferring group ownership.\n      - Fields: `NewOwnerID` (string).\n    - `GroupDetails`: DTO for returning comprehensive group information, including its members.\n      - Fields: Embedded `*domain.Group`, `Members` ([]*domain.GroupMember).\n  - Interfaces:\n    - `GroupUsecase`: An interface defining the core operations for managing groups.\n      - `CreateGroup(ctx context.Context, userID string, input CreateGroupInput, file multipart.File, fileHeader *multipart.FileHeader) (*domain.Group, error)`: Creates a new group, optionally with a profile picture.\n      - `GetGroupDetails(ctx context.Context, groupID string) (*GroupDetails, error)`: Retrieves detailed information about a specific group, including its members.\n      - `UpdateGroup(ctx context.Context, userID, groupID string, input UpdateGroupInput, file multipart.File, fileHeader *multipart.FileHeader) (*domain.Group, error)`: Updates a group's name and/or profile picture.\n      - `SearchGroups(ctx context.Context, query string) ([]*domain.Group, error)`: Searches for groups based on a query string.\n      - `JoinGroup(ctx context.Context, userID, groupHandle string) (*domain.Group, error)`: Allows a user to join a group by its handle.\n      - `LeaveGroup(ctx context.Context, userID, groupID string) error`: Allows a user to leave a group.\n      - `AddMember(ctx context.Context, currentUserID, groupID, friendID string) error`: Adds a friend as a member to a group.\n      - `RemoveMember(ctx context.Context, ownerID, groupID, memberID string) error`: Removes a member from a group (only by owner).\n      - `TransferOwnership(ctx context.Context, currentOwnerID, groupID, newOwnerID string) error`: Transfers ownership of a group to another member.\n      - `ListUserGroups(ctx context.Context, userID string) ([]*domain.Group, error)`: Lists all groups a specific user is a member of.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input/output DTOs for group management, adhering to the principles of Clean Architecture by separating business logic contracts from their implementations.\n",
  "backend/internal/usecase/message_ucase.go": "- File Path: backend/internal/usecase/message_ucase.go\n- High-Level Purpose: Defines the interface for message-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `SendMessageInput`: DTO for sending messages.\n      - Fields: `ConversationID` (string), `Content` (string).\n  - Interfaces:\n    - `MessageUsecase`: An interface defining the core messaging operations.\n      - `SendMessage(ctx context.Context, senderID string, input SendMessageInput) (*domain.Message, error)`: Sends a new message within a conversation.\n      - `GetMessageHistory(ctx context.Context, userID, conversationID string, before time.Time, limit int) ([]*domain.Message, error)`: Retrieves a paginated history of messages for a given conversation.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input DTO, separating messaging business logic from delivery mechanisms.\n",
  "backend/internal/usecase/user_ucase.go": "- File Path: backend/internal/usecase/user_ucase.go\n- High-Level Purpose: Defines the interface for user-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `UpdateUserInput`: DTO for user profile update requests.\n      - Fields: `Username` (*string, optional), `Password` (*string, optional).\n  - Interfaces:\n    - `UserUsecase`: An interface defining the core user management operations.\n      - `GetProfile(ctx context.Context, userID string) (*domain.User, error)`: Retrieves the profile of a user by their ID.\n      - `GetUserByUsername(ctx context.Context, username string) (*domain.User, error)`: Retrieves the profile of a user by their username.\n      - `UpdateProfile(ctx context.Context, userID string, input UpdateUserInput) (*domain.User, error)`: Updates the username and/or password for a specific user.\n      - `UpdateProfilePicture(ctx context.Context, userID string, file multipart.File, fileHeader *multipart.FileHeader) (string, error)`: Updates the profile picture for a specific user, returning the new picture URL.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input DTO, separating user-related business logic from delivery mechanisms and data storage.",
  "backend/migrations/000001_create_users_table.up.sql": "- File Path: backend/migrations/000001_create_users_table.up.sql\n- High-Level Purpose: SQL script to create the `users` table and related extensions/indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `users`: Stores user information.\n      - Columns: `id` (UUID, primary key, default generated), `username` (CITEXT, unique, not null), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR, default empty), `created_at` (TIMESTAMPTZ, default now), `updated_at` (TIMESTAMPTZ, default now).\n  - Extensions:\n    - `uuid-ossp`: Enables UUID generation functions.\n    - `citext`: Provides a case-insensitive text type.\n  - Indexes:\n    - `users_username_idx`: An index on the `username` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/migrations/000002_create_sessions_table.up.sql": "- File Path: backend/migrations/000002_create_sessions_table.up.sql\n- High-Level Purpose: SQL script to create the `sessions` table and related indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `sessions`: Stores user session information.\n      - Columns: `id` (UUID, primary key), `user_id` (UUID, not null, foreign key referencing `users` with cascade delete), `expires_at` (TIMESTAMPTZ, not null), `created_at` (TIMESTAMPTZ, default now).\n  - Indexes:\n    - `sessions_user_id_idx`: An index on the `user_id` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/migrations/000003_create_events_table.up.sql": "- File Path: backend/migrations/000003_create_events_table.up.sql\n- High-Level Purpose: SQL script to create the `events` table in a PostgreSQL database, designed to store real-time events for later delivery or persistence.\n- Definitions in the File:\n  - Tables:\n    - `events`: Stores event data.\n      - Columns:\n        - `id`: UUID, primary key, defaults to a generated UUID.\n        - `type`: VARCHAR(50), not null, describes the event type.\n        - `payload`: JSONB, not null, stores the event's data as a JSON document.\n        - `recipient_id`: UUID, not null, foreign key referencing `users(id)` with cascade delete.\n        - `is_delivered`: BOOLEAN, not null, defaults to `FALSE`, indicates if the event has been delivered.\n        - `created_at`: TIMESTAMPTZ, not null, defaults to current timestamp.\n  - Indexes:\n    - `events_recipient_id_is_delivered_idx`: An index on `recipient_id` and `is_delivered` columns to optimize queries for undelivered events for a specific user.\n- Notable Patterns or Logic: This is a standard database migration script, used to define or update the schema for event storage. It uses `JSONB` for flexible payload storage and includes an index for efficient querying of undelivered events.\n",
  "backend/migrations/000004_create_friends_tables.up.sql": "- File Path: backend/migrations/000004_create_friends_tables.up.sql\n- High-Level Purpose: SQL script to create the `friend_requests` and `friendships` tables in a PostgreSQL database, along with necessary indexes, to support the application's friend management features.\n- Definitions in the File:\n  - Tables:\n    - `friend_requests`: Stores pending, accepted, or rejected friend requests.\n      - Columns: `id` (UUID, primary key, default generated), `sender_id` (UUID, not null, foreign key to `users`), `receiver_id` (UUID, not null, foreign key to `users`), `status` (VARCHAR(20), not null, with check constraint for 'pending', 'accepted', 'rejected'), `created_at` (TIMESTAMPTZ, not null, default now), `updated_at` (TIMESTAMPTZ, not null, default now).\n      - Constraints: `UNIQUE(sender_id, receiver_id)` to prevent duplicate requests.\n    - `friendships`: Stores confirmed friendships between two users.\n      - Columns: `user_id1` (UUID, not null, foreign key to `users`), `user_id2` (UUID, not null, foreign key to `users`), `created_at` (TIMESTAMPTZ, not null, default now).\n      - Constraints: `PRIMARY KEY (user_id1, user_id2)`, `CHECK (user_id1 \u003c user_id2)` to enforce a canonical order and prevent duplicate friendship entries.\n  - Indexes:\n    - `friend_requests` on `sender_id` and `receiver_id` for efficient lookups.\n    - `friendships` on `user_id1` and `user_id2` for efficient lookups.\n- Notable Patterns or Logic: This is a standard database migration script. It defines the schema for a many-to-many relationship (friendships) and a request-response pattern (friend requests), using UUIDs for primary keys, foreign keys for referential integrity, and specific constraints (UNIQUE, CHECK) to maintain data consistency.\n",
  "backend/migrations/000005_create_groups_tables.up.sql": "- File Path: backend/migrations/000005_create_groups_tables.up.sql\n- High-Level Purpose: SQL script to create the `groups` and `group_members` tables in a PostgreSQL database, along with necessary indexes and constraints, to support group chat functionality.\n- Definitions in the File:\n  - Tables:\n    - `groups`: Stores information about chat groups.\n      - Columns:\n        - `id`: UUID, primary key, defaults to a generated UUID.\n        - `handle`: VARCHAR(100), unique, not null, a unique identifier for the group.\n        - `name`: VARCHAR(100), not null, the display name of the group.\n        - `owner_id`: UUID, not null, foreign key referencing `users(id)` with `ON DELETE RESTRICT` (prevents owner deletion if group exists).\n        - `profile_pic_url`: VARCHAR(255), defaults to empty string, URL for the group's profile picture.\n        - `created_at`: TIMESTAMPTZ, not null, defaults to current timestamp.\n        - `updated_at`: TIMESTAMPTZ, not null, defaults to current timestamp.\n    - `group_members`: Stores the membership of users in groups.\n      - Columns:\n        - `group_id`: UUID, not null, foreign key referencing `groups(id)` with `ON DELETE CASCADE`.\n        - `user_id`: UUID, not null, foreign key referencing `users(id)` with `ON DELETE CASCADE`.\n        - `role`: VARCHAR(20), not null, with a `CHECK` constraint ensuring values are 'owner' or 'member'.\n        - `created_at`: TIMESTAMPTZ, not null, defaults to current timestamp.\n      - Constraints: `PRIMARY KEY (group_id, user_id)` ensures unique membership for each user in a group.\n  - Indexes:\n    - `groups_handle_idx`: An index on the `handle` column of the `groups` table for efficient lookups.\n    - `group_members_user_id_idx`: An index on the `user_id` column of the `group_members` table for efficient lookups of groups a user belongs to.\n    - `group_members_created_at_idx`: An index on the `created_at` column of the `group_members` table.\n- Notable Patterns or Logic: This is a standard database migration script. It defines a many-to-many relationship between `users` and `groups` using the `group_members` join table. It uses UUIDs for primary keys, foreign keys for referential integrity, and specific constraints (UNIQUE, CHECK) to maintain data consistency and enforce business rules.\n",
  "backend/migrations/000006_create_messages_table.up.sql": "- File Path: backend/migrations/000006_create_messages_table.up.sql\n- High-Level Purpose: SQL script to create the `messages` table and an index in a PostgreSQL database, designed to store chat messages.\n- Definitions in the File:\n  - Tables:\n    - `messages`: Stores individual chat messages.\n      - Columns: `id` (UUID, primary key, default generated), `conversation_id` (VARCHAR(100), not null), `sender_id` (UUID, not null, foreign key referencing `users` with cascade delete), `content` (TEXT, not null), `created_at` (TIMESTAMPTZ, not null, default now).\n  - Indexes:\n    - `messages_conversation_id_created_at_idx`: An index on `conversation_id` and `created_at` (descending) for efficient retrieval of message history within a conversation.\n- Notable Patterns or Logic: This is a standard database migration script, used to define or update the schema for message storage.\n",
  "backend/pkg/config/config.go": "- File Path: backend/pkg/config/config.go\n- High-Level Purpose: Manages the application's configuration, loading values from environment variables or a `.env` file and providing them in a structured `Config` object.\n- Definitions in the File:\n  - Structs:\n    - `Config`: A struct that holds all application configuration parameters.\n      - Fields: `Port` (string), `DatabaseURL` (string), `RedisURL` (string), `JWTSecret` (string), `AccessTokenTTL` (time.Duration), `RefreshTokenTTL` (time.Duration), `UploadDir` (string).\n  - Functions / Methods:\n    - `Load() *Config`: A public function that loads environment variables (first from `.env` if present, then system environment) and returns a populated `Config` struct with default values for missing variables.\n    - `getEnv(key, fallback string) string`: An internal helper function to retrieve an environment variable by `key` or return a `fallback` value if not found.\n- Notable Patterns or Logic: This file implements a configuration loading pattern, centralizing access to environment-dependent settings and providing sensible defaults.\n",
  "backend/pkg/util/hash.go": "- File Path: backend/pkg/util/hash.go\n- High-Level Purpose: Provides utility functions for securely hashing passwords and comparing plain text passwords against hashes using bcrypt.\n- Definitions in the File:\n  - Functions / Methods:\n    - `HashPassword(password string) (string, error)`: A public function that takes a plain text password and returns its bcrypt hash.\n    - `CheckPasswordHash(password, hash string) bool`: A public function that compares a plain text password with a bcrypt hash, returning `true` if they match, `false` otherwise.\n- Notable Patterns or Logic: This file contains cryptographic utility functions, specifically for password management.\n",
  "backend/pkg/util/jwt.go": "- File Path: backend/pkg/util/jwt.go\n- High-Level Purpose: Provides utility functions for generating and validating JSON Web Tokens (JWTs) for authentication.\n- Definitions in the File:\n  - Structs:\n    - `Claims`: A custom struct embedding `jwt.RegisteredClaims` and adding a `UserID` field, used for JWT payload.\n  - Functions / Methods:\n    - `GenerateAccessToken(userID, secret string, ttl time.Duration) (string, error)`: A public function that creates and signs a new JWT (access token) with the given user ID, secret key, and time-to-live (TTL).\n    - `ValidateToken(tokenString, secret string) (*Claims, error)`: A public function that parses and validates a JWT string using the provided secret key. It returns the custom `Claims` if the token is valid, otherwise an error.\n- Notable Patterns or Logic: This file encapsulates JWT-related operations, providing a clear interface for token management.\n",
  "backend/pkg/util/uuid.go": "- File Path: backend/pkg/util/uuid.go\n- High-Level Purpose: Provides utility functions for generating new UUIDs and parsing UUID strings.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewUUID() string`: A public function that generates and returns a new universally unique identifier (UUID) as a string.\n    - `ParseUUID(s string) (uuid.UUID, error)`: A public function that attempts to parse a string into a `uuid.UUID` type, returning an error if the string is not a valid UUID.\n- Notable Patterns or Logic: This file contains general utility functions for UUID management.\n",
  "backend/web/static/css/style.css": "- File Path: backend/web/static/css/style.css\n- High-Level Purpose: This file serves as a placeholder for compiled CSS styles, likely generated by a CSS framework or preprocessor.\n- Definitions in the File:\n  - None.\n- Notable Patterns or Logic: This is a standard CSS file, currently empty, indicating that styling is either minimal, handled inline, or generated from another source (e.g., Tailwind CSS JIT compilation).\n",
  "backend/web/static/js/api.js": "- File Path: backend/web/static/js/api.js\n- High-Level Purpose: Provides a JavaScript client for interacting with the backend API, abstracting HTTP requests for authentication, user management, friend management, group management, and messaging.\n- Definitions in the File:\n  - Typedefs: `User`, `AuthTokens`, `Group`, `Message` (for API response structures).\n  - Constants: `API_BASE` (base URL for API endpoints).\n  - Functions / Methods:\n    - `request(endpoint, options = {})`: An internal generic asynchronous function that handles API requests, including adding authorization headers (JWT), setting content types, and parsing responses/errors. It also handles 401 Unauthorized responses by clearing tokens and redirecting to the login page.\n    - `signup(username, password)`: Sends a POST request to register a new user.\n    - `login(username, password)`: Sends a POST request to authenticate a user and receive tokens.\n    - `logout()`: Clears local authentication tokens.\n    - `getMe()`: Retrieves the profile of the authenticated user.\n    - `updateProfile(formData)`: Sends a PUT request to update the authenticated user's profile (username, password, profile picture).\n    - `getUserByUsername(username)`: Retrieves a user's profile by username.\n    - `sendFriendRequest(username)`: Sends a POST request to send a friend request.\n    - `getPendingFriendRequests()`: Retrieves pending friend requests for the authenticated user.\n    - `acceptFriendRequest(requestID)`: Sends a PUT request to accept a friend request.\n    - `rejectFriendRequest(requestID)`: Sends a PUT request to reject a friend request.\n    - `unfriendUser(userID)`: Sends a DELETE request to unfriend a user.\n    - `listFriends()`: Retrieves a list of friends for the authenticated user.\n    - `createGroup(formData)`: Sends a POST request to create a new group.\n    - `searchGroups(query)`: Searches for groups by handle.\n    - `joinGroup(handle)`: Sends a POST request to join a group.\n    - `getGroupDetails(groupId)`: Retrieves details for a specific group.\n    - `updateGroup(groupId, formData)`: Sends a PUT request to update group details.\n    - `addGroupMember(groupId, friendId)`: Sends a POST request to add a friend to a group.\n    - `removeGroupMember(groupId, memberId)`: Sends a DELETE request to remove a member from a group.\n    - `leaveGroup(groupId)`: Sends a POST request to leave a group.\n    - `transferGroupOwnership(groupId, newOwnerId)`: Sends a PUT request to transfer group ownership.\n    - `listMyGroups()`: Retrieves a list of groups the authenticated user is a member of.\n    - `getMessageHistory(conversationId, before = null, limit = 50)`: Retrieves paginated message history for a conversation.\n- Notable Patterns or Logic: This file implements an \"API Client\" pattern, centralizing all HTTP request logic. It handles JWT token inclusion, error handling, and provides a clear, function-based interface for interacting with the backend.\n",
  "backend/web/static/js/main.js": "- File Path: backend/web/static/js/main.js\n- High-Level Purpose: The main client-side JavaScript module that orchestrates the application's behavior, handling page initialization, user authentication, profile management, friend and group interactions, and real-time messaging via WebSockets.\n- Definitions in the File:\n  - Functions / Methods:\n    - `handleAuthFormSubmit(event)`: Handles form submissions for login and signup, calling the API, setting tokens, and redirecting.\n    - `initAuthPage()`: Initializes event listeners for the authentication forms.\n    - `handleProfileUpdateFormSubmit(event)`: Handles profile update form submission, including file uploads, and updates the UI.\n    - `handleLogout()`: Clears tokens and redirects to the login page.\n    - `handleAddFriendSubmit(event)`: Handles sending friend requests.\n    - `handleFriendAction(event)`: Handles accepting, rejecting, or unfriending actions via event delegation.\n    - `handleCreateGroupSubmit(event)`: Handles creating new groups.\n    - `handleSearchGroup(event)`: Handles searching for groups with a debounce mechanism.\n    - `handleJoinGroupClick(event)`: Handles joining a group from search results.\n    - `handleMessageSubmit(event)`: Handles sending chat messages via WebSocket.\n    - `handleNewMessage(message)`: Public function to process and display new incoming messages, updating the UI or showing notifications.\n    - `selectChat(event)`: Handles selecting a chat (friend or group), setting the active chat, clearing previous messages, rendering the chat window, and loading message history.\n    - `refreshFriendsList()`: Fetches and renders the updated list of friends.\n    - `refreshPendingRequests()`: Fetches and renders the updated list of pending friend requests.\n    - `refreshGroupsList()`: Fetches and renders the updated list of groups.\n    - `initChatPage()`: Initializes the chat page by fetching initial user data, friends, groups, pending requests, connecting to WebSocket, and setting up all chat-related event listeners.\n  - Event Listeners: Numerous event listeners are set up for form submissions, button clicks, and input changes across both auth and chat pages.\n- Notable Patterns or Logic: This file serves as the \"Client-Side Application Controller\". It orchestrates interactions between the `api`, `store`, and `ui` modules, implementing the core logic for the Single Page Application (SPA). It uses event delegation for dynamic UI elements and manages the overall flow of the chat application.\n",
  "backend/web/static/js/store.js": "- File Path: backend/web/static/js/store.js\n- High-Level Purpose: Manages the client-side application state, including user authentication tokens, current user details, lists of friends, pending friend requests, groups, and the currently active chat. It uses `localStorage` for token persistence.\n- Definitions in the File:\n  - Typedefs: `User`, `Group` (from `api.js`), `FriendRequest`, `ActiveChat` (custom types for state management).\n  - Variables:\n    - `state`: A module-level object that holds the entire client-side application state.\n      - Fields: `currentUser` (User | null), `accessToken` (string, from localStorage), `refreshToken` (string, from localStorage), `friends` (User[]), `pendingRequests` (FriendRequest[]), `groups` (Group[]), `activeChat` (ActiveChat).\n  - Functions / Methods:\n    - `setCurrentUser(user)`: Sets the `currentUser` in the state.\n    - `getCurrentUser()`: Returns the `currentUser` from the state.\n    - `setTokens(access, refresh)`: Sets `accessToken` and `refreshToken` in both the state and `localStorage`.\n    - `getAccessToken()`: Returns the `accessToken` from the state.\n    - `getRefreshToken()`: Returns the `refreshToken` from the state.\n    - `clearTokens()`: Clears all authentication tokens from state and `localStorage`, and resets other user-specific state.\n    - `setFriends(friends)`: Sets the list of friends in the state.\n    - `getFriends()`: Returns the list of friends.\n    - `setPendingRequests(requests)`: Sets the list of pending friend requests.\n    - `getPendingRequests()`: Returns the list of pending friend requests.\n    - `setGroups(groups)`: Sets the list of groups in the state.\n    - `getGroups()`: Returns the list of groups.\n    - `setActiveChat(type, id, name)`: Sets the currently active chat's type, ID, and display name.\n    - `getActiveChat()`: Returns the currently active chat object.\n- Notable Patterns or Logic: This file implements a \"Client-Side State Management\" pattern, centralizing all application data. It uses `localStorage` for persisting authentication tokens across sessions and provides getter/setter functions for controlled access to the state.\n",
  "backend/web/static/js/ui.js": "- File Path: backend/web/static/js/ui.js\n- High-Level Purpose: Provides a collection of JavaScript functions responsible for rendering various UI components, displaying notifications, managing modals, and updating the chat interface dynamically.\n- Definitions in the File:\n  - Typedefs: `User`, `FriendRequest`, `Group`, `Message` (imported from `api.js` and `store.js`).\n  - Functions / Methods:\n    - `toggleAuthForms()`: Toggles visibility between login and signup forms.\n    - `showError(formId, message)`: Displays an error message within a specified form.\n    - `showNotification(message, type = 'info')`: Displays a temporary notification message (info, success, or error).\n    - `openModal(modalId)`: Opens a modal dialog, adds an overlay, and sets up close handlers.\n    - `closeModal(modalId)`: Closes a modal dialog and cleans up event listeners.\n    - `renderProfile(user)`: Renders the authenticated user's profile information in the sidebar.\n    - `renderFriendList(friends, selectChatHandler)`: Renders a list of friends, attaching a chat selection handler.\n    - `renderGroupList(groups, selectChatHandler)`: Renders a list of groups, attaching a chat selection handler.\n    - `renderPendingRequests(requests, currentUserID)`: Renders a list of incoming and outgoing friend requests.\n    - `renderGroupSearchResults(groups, joinHandler)`: Renders search results for groups, attaching a join handler.\n    - `renderChatWindow(chat)`: Renders the header of the active chat window or displays a welcome screen if no chat is selected.\n    - `renderMessage(message, currentUserID)`: An internal helper function that generates HTML for a single chat message, distinguishing between own and other users' messages.\n    - `appendMessage(message, currentUserID)`: Appends a new message to the chat messages container and scrolls to the bottom.\n    - `prependMessages(messages, currentUserID)`: Prepends a list of messages to the chat messages container (for history loading) and adjusts scroll position.\n    - `clearMessages()`: Clears all messages from the chat messages container.\n- Notable Patterns or Logic: This file acts as the UI layer for the frontend, encapsulating all DOM manipulation and rendering logic. It uses event delegation for dynamic lists and provides reusable components for notifications and modals.\n",
  "backend/web/static/js/ws.js": "- File Path: backend/web/static/js/ws.js\n- High-Level Purpose: Manages the WebSocket connection for real-time communication, handling connection establishment, reconnection logic, sending messages, and dispatching incoming events to other client-side modules.\n- Definitions in the File:\n  - Variables:\n    - `socket`: A module-level variable to hold the WebSocket instance.\n    - `reconnectInterval`: A number representing the current delay before attempting to reconnect.\n  - Functions / Methods:\n    - `handleIncomingEvent(event)`: An internal function that parses incoming WebSocket messages, logs them, and dispatches actions based on the event `type` (e.g., `new_message`, `friend_request_received`, `friend_request_accepted`, `unfriended`, `group_joined`).\n    - `connect()`: A public function that establishes a WebSocket connection to the backend. It retrieves the access token, constructs the WebSocket URL, sets up `onopen`, `onmessage`, `onclose`, and `onerror` handlers, and implements an exponential backoff strategy for reconnection attempts. It also sends an initial \"auth\" event upon connection.\n    - `send(type, payload)`: A public function that sends a structured message (type and payload) over the active WebSocket connection. It checks if the socket is open before sending.\n- Notable Patterns or Logic: This file implements a \"WebSocket Client\" pattern, centralizing all real-time communication logic. It includes robust reconnection logic with exponential backoff and acts as an event dispatcher for various real-time updates received from the server.",
  "backend/web/templates/chat.html": "- File Path: backend/web/templates/chat.html\n- High-Level Purpose: Defines the HTML structure for the main chat application interface, including the sidebar for user profile, friends, groups, and pending requests, the main chat window, and various modal dialogs.\n- Definitions in the File:\n  - HTML Elements:\n    - `notification-container`: A `div` for displaying temporary notifications.\n    - `profile-container`: A `div` for displaying the authenticated user's profile.\n    - `friends-container`, `friends-list`: Sections for displaying and managing friends.\n    - `groups-container`, `groups-list`: Sections for displaying and managing groups.\n    - `pending-requests-container`, `pending-requests-list`: Sections for displaying pending friend requests.\n    - `profile-update-form`: A form for updating user profile details (username, password, profile picture).\n    - `logout-button`: A button for logging out.\n    - `chat-container`: The main chat area, initially hidden.\n    - `chat-header`: Displays the active chat's name and picture.\n    - `messages-container`: Displays chat messages.\n    - `message-form`: A form for typing and sending messages.\n    - `welcome-screen`: A default screen shown when no chat is selected.\n    - `add-friend-modal`: A modal dialog for sending friend requests.\n    - `create-group-modal`: A modal dialog for creating new groups.\n    - `search-group-modal`: A modal dialog for searching and joining groups.\n  - External Resources:\n    - `https://cdn.tailwindcss.com`: Imports Tailwind CSS for styling.\n    - `/static/js/main.js`: Imports the main client-side JavaScript module.\n- Notable Patterns or Logic: This is a standard HTML template for a Single Page Application (SPA). It uses a flexible layout (flexbox) for the sidebar and main content, and relies heavily on JavaScript to dynamically populate and manage its content, including modals for various user actions.\n",
  "backend/web/templates/index.html": "- File Path: backend/web/templates/index.html\n- High-Level Purpose: Defines the HTML structure for the application's landing page, primarily featuring user login and signup forms.\n- Definitions in the File:\n  - HTML Elements:\n    - `login-container`: A `div` containing the login form.\n    - `login-form`: A `form` for user login.\n      - Inputs: `login-username`, `login-password`.\n      - Links: `show-signup-form` (to toggle to signup).\n    - `signup-container`: A `div` containing the signup form, initially hidden.\n    - `signup-form`: A `form` for new user registration.\n      - Inputs: `signup-username`, `signup-password`.\n      - Links: `show-login-form` (to toggle to login).\n    - `error-message`: A `p` tag within each form to display error messages.\n  - External Resources:\n    - `https://cdn.tailwindcss.com`: Imports Tailwind CSS for styling.\n    - `/static/js/main.js`: Imports the main client-side JavaScript module.\n- Notable Patterns or Logic: This is a standard HTML template, designed for user authentication. It uses Tailwind CSS for styling and relies on JavaScript for form toggling and submission handling.\n",
  "docker-compose.yml": "- File Path: docker-compose.yml\n- High-Level Purpose: Defines and configures the multi-container Docker environment for the chat application, including PostgreSQL and Redis services.\n- Definitions in the File:\n  - Services:\n    - `postgres`: A PostgreSQL database service.\n      - Image: `postgres:13`\n      - Restart policy: `always`\n      - Environment variables: `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB`.\n      - Ports: `5432:5432` (exposes Postgres port to host).\n      - Volumes: `postgres_data` (for persistent data).\n    - `redis`: A Redis in-memory data store service.\n      - Image: `redis:6-alpine`\n      - Restart policy: `always`\n      - Ports: `6379:6379` (exposes Redis port to host).\n      - Volumes: `redis_data` (for persistent data).\n  - Volumes:\n    - `postgres_data`: A named Docker volume for PostgreSQL data persistence.\n    - `redis_data`: A named Docker volume for Redis data persistence.\n- Notable Patterns or Logic: This is a standard Docker Compose configuration file, used for defining and running multi-container Docker applications.\n"
}