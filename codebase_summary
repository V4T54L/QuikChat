{
  ".env.example": "- **High-Level Purpose**: Provides an example configuration file for environment variables used by the application, detailing server, database, Redis, JWT, and file storage settings.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `SERVER_PORT`: (string) The port on which the server will listen.\n    - `DB_HOST`: (string) PostgreSQL database host.\n    - `DB_PORT`: (string) PostgreSQL database port.\n    - `DB_USER`: (string) PostgreSQL database user.\n    - `DB_PASSWORD`: (string) PostgreSQL database password.\n    - `DB_NAME`: (string) PostgreSQL database name.\n    - `DB_SSLMODE`: (string) PostgreSQL SSL mode (e.g., `disable`).\n    - `REDIS_ADDR`: (string) Redis server address.\n    - `JWT_SECRET`: (string) Secret key used for signing JWTs.\n    - `JWT_ACCESS_TOKEN_EXP_MIN`: (integer) Access token expiration time in minutes.\n    - `JWT_REFRESH_TOKEN_EXP_HOUR`: (integer) Refresh token expiration time in hours.\n    - `PROFILE_PIC_DIR`: (string) Local directory path for storing user profile pictures.\n    - `STATIC_FILES_DIR`: (string) Local directory path for general static files.\n    - `PROFILE_PIC_ROUTE`: (string) URL route prefix for serving profile pictures.\n",
  "Makefile": "- **High-Level Purpose**: Defines common commands for building, running, and managing the application's Docker containers.\n- **Definitions in the File**:\n  - **Functions / Methods**: (N/A, this is a build script)\n  - **Variables / Constants**: (N/A, uses shell commands)\n- **Notable Patterns or Logic**:\n  - `run`: Target to execute the Go backend server.\n  - `docker-up`: Target to start the application's services (PostgreSQL, Redis) using Docker Compose in detached mode.\n  - `docker-down`: Target to stop the application's services using Docker Compose.\n",
  "backend/adapter/filesystem/local_storage.go": "- **High-Level Purpose**: Implements the `FileRepository` interface to save uploaded files to the local filesystem and generate their public URLs.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `localStorage`: Private struct implementing `repository.FileRepository`.\n      - Fields:\n        - `storageDir` (string): The local directory path where files will be stored.\n        - `routePath` (string): The base URL path from which stored files will be served.\n  - **Functions / Methods**:\n    - `NewLocalStorage(storageDir, routePath string) repository.FileRepository`: Public constructor. Creates and returns a new `localStorage` instance.\n    - `(*localStorage) Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Public method. Saves an uploaded `multipart.File` to the configured `storageDir` with a newly generated UUID filename, preserving the original extension. Returns the public URL path to the saved file.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction for file storage.\n  - Local filesystem interaction: Uses `os.Create`, `io.Copy`, and `filepath` for file operations.\n  - Unique filenames: Generates UUIDs for filenames to prevent collisions.\n",
  "backend/adapter/handler/http/auth_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for authentication-related API endpoints, such as user login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `loginRequest`: Private struct for decoding the JSON payload of a login request.\n      - Fields: `Username` (string), `Password` (string).\n    - `loginResponse`: Private struct for encoding the JSON payload of a successful login response.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n    - `refreshRequest`: Private struct for decoding the JSON payload of a refresh token request.\n      - Fields: `RefreshToken` (string).\n    - `refreshResponse`: Private struct for encoding the JSON payload of a successful refresh token response.\n      - Fields: `AccessToken` (string).\n    - `logoutRequest`: Private struct for decoding the JSON payload of a logout request.\n      - Fields: `RefreshToken` (string).\n  - **Functions / Methods**:\n    - `(*AuthHandler) Login(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user login. Decodes the request body, calls the `AuthUsecase` to perform login, and responds with access/refresh tokens or appropriate error messages.\n    - `(*AuthHandler) Refresh(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for refreshing access tokens. Decodes the request body, calls the `AuthUsecase` to refresh the token, and responds with a new access token or error.\n    - `(*AuthHandler) Logout(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user logout. Decodes the request body, calls the `AuthUsecase` to invalidate the session, and responds with a success message or error.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `AuthUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses.\n",
  "backend/adapter/handler/http/friend_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for friend-related API endpoints, enabling users to send, accept, reject, and list friend requests, as well as unfriend other users.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `req` (anonymous struct in `SendRequest`): Private struct for decoding the JSON payload of a friend request.\n      - Fields: `Username` (string).\n    - `req` (anonymous struct in `RespondToRequest`): Private struct for decoding the JSON payload of a friend request response.\n      - Fields: `Action` (string, \"accept\" or \"reject\").\n  - **Functions / Methods**:\n    - `(*FriendHandler) SendRequest(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to send a friend request to another user by username. Extracts the sender's ID from the context and the target username from the request body. Responds with `http.StatusCreated` or appropriate error codes (e.g., `StatusNotFound`, `StatusConflict`).\n    - `(*FriendHandler) RespondToRequest(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP PUT requests to accept or reject a pending friend request. Extracts the recipient's ID from the context, the requester's ID from the URL parameter, and the action (\"accept\"/\"reject\") from the request body. Responds with `http.StatusOK` or `StatusNotFound`.\n    - `(*FriendHandler) Unfriend(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP DELETE requests to remove an existing friend. Extracts the user's ID from the context and the friend's ID from the URL parameter. Responds with `http.StatusNoContent` or `StatusNotFound`.\n    - `(*FriendHandler) ListFriends(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to list all accepted friends of the authenticated user. Extracts the user's ID from the context. Responds with `http.StatusOK` and a list of user profiles.\n    - `(*FriendHandler) ListPendingRequests(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to list all pending friend requests for the authenticated user. Extracts the user's ID from the context. Responds with `http.StatusOK` and a list of user profiles.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `FriendUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Context usage: Retrieves authenticated `userID` from the request context, set by authentication middleware.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n",
  "backend/adapter/handler/http/group_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for group-related API endpoints, enabling users to create, join, leave, add/remove members from groups, and search for groups.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `req` (anonymous struct in `JoinGroup`, `AddMember`): Private struct for decoding JSON payloads.\n      - Fields: `Handle` (string) for `JoinGroup`, `Username` (string) for `AddMember`.\n  - **Variables / Constants**:\n    - `maxGroupPhotoSize` (int): Constant defining the maximum allowed size for group photos (200 KB).\n  - **Functions / Methods**:\n    - `(*GroupHandler) CreateGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to create a new group. Expects multipart form data for `handle`, `name`, and an optional `photo` file. Extracts the owner's ID from the context. Responds with `http.StatusCreated` and the new group details or appropriate error codes.\n    - `(*GroupHandler) JoinGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to join an existing group by its handle. Extracts the user's ID from the context and the group handle from the request body. Responds with `http.StatusOK` or `StatusNotFound`/`StatusConflict`.\n    - `(*GroupHandler) LeaveGroup(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to leave a group. Extracts the user's ID from the context and the `groupID` from the URL parameter. Responds with `http.StatusOK` or `StatusNotFound`.\n    - `(*GroupHandler) AddMember(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests to add a member to a group. Extracts the adder's ID from the context, `groupID` from the URL, and the new member's username from the request body. Responds with `http.StatusCreated` or `StatusForbidden`/`StatusConflict`.\n    - `(*GroupHandler) RemoveMember(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP DELETE requests to remove a member from a group. Extracts the owner's ID from the context, `groupID` and `memberID` from URL parameters. Responds with `http.StatusNoContent` or `StatusForbidden`/`StatusNotFound`.\n    - `(*GroupHandler) SearchGroups(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to search for groups by a query string in their handle. Extracts the query from URL parameters. Responds with `http.StatusOK` and a list of matching groups.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `GroupUsecase`.\n  - Multipart form parsing: Handles file uploads for group photos.\n  - Context usage: Retrieves authenticated `userID` (or `ownerID`/`adderID`) from the request context.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n",
  "backend/adapter/handler/http/handler.go": "- **High-Level Purpose**: Defines the base structs for various HTTP handlers and their constructors, facilitating dependency injection of use cases.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthHandler`: Public struct to hold the `AuthUsecase` dependency.\n      - Fields: `authUsecase` (usecase.AuthUsecase).\n    - `UserHandler`: Public struct to hold the `UserUsecase` dependency.\n      - Fields: `userUsecase` (usecase.UserUsecase).\n    - `FriendHandler`: Public struct to hold the `FriendUsecase` dependency.\n      - Fields: `friendUsecase` (usecase.FriendUsecase).\n    - `GroupHandler`: Public struct to hold the `GroupUsecase` dependency.\n      - Fields: `groupUsecase` (usecase.GroupUsecase).\n  - **Functions / Methods**:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: Public constructor. Creates a new `AuthHandler` instance.\n    - `NewUserHandler(userUsecase usecase.UserUsecase) *UserHandler`: Public constructor. Creates a new `UserHandler` instance.\n    - `NewFriendHandler(friendUsecase usecase.FriendUsecase) *FriendHandler`: Public constructor. Creates a new `FriendHandler` instance.\n    - `NewGroupHandler(groupUsecase usecase.GroupUsecase) *GroupHandler`: Public constructor. Creates a new `GroupHandler` instance.\n- **Notable Patterns or Logic**:\n  - Dependency Injection: Handlers are constructed with their required use case interfaces, promoting loose coupling.\n  - Handler Composition: Each handler struct encapsulates the logic for a specific domain (Auth, User, Friend, Group).\n",
  "backend/adapter/handler/http/user_handler.go": "- **High-Level Purpose**: Provides HTTP handlers for user-related API endpoints, including user registration, retrieving user profiles, and updating user profiles.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `registerRequest`: Private struct for decoding the JSON payload of a user registration request.\n      - Fields: `Username` (string), `Password` (string).\n  - **Functions / Methods**:\n    - `(*UserHandler) Register(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP POST requests for user registration. Decodes the request body, calls the `UserUsecase` to register the user, and responds with the created user details or appropriate error messages.\n    - `(*UserHandler) GetUserByUsername(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP GET requests to retrieve a user by their username. Extracts the username from the URL path, calls the `UserUsecase`, and responds with user details or `http.StatusNotFound` if not found.\n    - `(*UserHandler) UpdateProfile(w http.ResponseWriter, r *http.Request)`: Public method. Handles HTTP PUT requests to update a user's profile. It extracts the authenticated `userID` from the request context, parses multipart form data for optional username, password, and profile picture updates, calls the `UserUsecase`, and responds with the updated user details or various validation/conflict errors.\n- **Notable Patterns or Logic**:\n  - HTTP Handler pattern: Maps HTTP requests to business logic via the `UserUsecase`.\n  - JSON marshalling/unmarshalling: Uses `encoding/json` for request/response bodies.\n  - Multipart form parsing: Handles file uploads for profile pictures.\n  - Error handling: Uses `util.RespondWithError` for consistent error responses and maps specific use case errors to appropriate HTTP status codes.\n  - Context usage: Retrieves `userID` from the request context, which is set by authentication middleware.\n",
  "backend/adapter/middleware/auth.go": "- **High-Level Purpose**: Provides an HTTP middleware for authenticating requests using JWT access tokens and injecting the authenticated user's ID into the request context.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `AuthMiddleware`: Public struct to hold the JWT secret.\n      - Fields:\n        - `jwtSecret` (string): The secret key used to validate JWTs.\n  - **Functions / Methods**:\n    - `NewAuthMiddleware(jwtSecret string) *AuthMiddleware`: Public constructor. Creates a new `AuthMiddleware` instance.\n    - `(*AuthMiddleware) Validate(next http.Handler) http.Handler`: Public method. Returns an `http.Handler` that acts as middleware. It validates the \"Authorization: Bearer \u003ctoken\u003e\" header, parses the JWT, verifies its signature and validity, extracts the `user_id` claim, and injects it into the request context. Responds with `http.StatusUnauthorized` if validation fails.\n  - **Variables / Constants**:\n    - `UserIDKey` (contextKey): A private constant key used to store and retrieve the authenticated user's UUID from the request context.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add authentication logic.\n  - JWT validation: Uses `github.com/golang-jwt/jwt/v5` for token parsing and validation.\n",
  "backend/adapter/middleware/logging.go": "- **High-Level Purpose**: Provides a simple HTTP middleware for logging incoming requests and their processing time.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `Logging(next http.Handler) http.Handler`: Public function. Returns an `http.Handler` that logs the HTTP method, request URI, and the duration of the request processing to standard output.\n- **Notable Patterns or Logic**:\n  - Middleware pattern: Wraps an `http.Handler` to add logging functionality.\n",
  "backend/adapter/postgres/db.go": "- **High-Level Purpose**: Provides a function to establish and verify a connection to a PostgreSQL database.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `NewDB(cfg *config.Config) (*sql.DB, error)`: Public function. Connects to a PostgreSQL database using the provided configuration, opens the connection, and pings the database to ensure connectivity. Returns a `*sql.DB` instance or an error.\n",
  "backend/adapter/postgres/friendship_repo.go": "- **High-Level Purpose**: Implements the `FriendshipRepository` interface, providing PostgreSQL-specific data access operations for managing user friendships and friend requests.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresFriendshipRepository`: Private struct implementing `repository.FriendshipRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresFriendshipRepository(db *sql.DB) repository.FriendshipRepository`: Public constructor. Creates and returns a new `postgresFriendshipRepository` instance.\n    - `normalizeUserIDs(userID1, userID2 uuid.UUID) (uuid.UUID, uuid.UUID)`: Private helper function. Ensures that `userID1` is always lexicographically smaller than `userID2` to maintain a canonical order for friendship records, preventing duplicate entries (e.g., A-B and B-A).\n    - `(*postgresFriendshipRepository) Create(ctx context.Context, friendship *models.Friendship) error`: Public method. Inserts a new friendship record into the `friendships` table. Handles `unique_violation` errors by returning `models.ErrFriendRequestExists`.\n    - `(*postgresFriendshipRepository) UpdateStatus(ctx context.Context, userID1, userID2 uuid.UUID, status models.FriendshipStatus) error`: Public method. Updates the status of an existing friendship record. Returns `models.ErrFriendRequestNotFound` if no record is updated.\n    - `(*postgresFriendshipRepository) Delete(ctx context.Context, userID1, userID2 uuid.UUID) error`: Public method. Deletes a friendship record from the `friendships` table. Returns `models.ErrNotFriends` if no record is deleted.\n    - `(*postgresFriendshipRepository) Find(ctx context.Context, userID1, userID2 uuid.UUID) (*models.Friendship, error)`: Public method. Retrieves a friendship record by the two user IDs. Returns `models.ErrFriendRequestNotFound` if no record is found.\n    - `(*postgresFriendshipRepository) ListByUserID(ctx context.Context, userID uuid.UUID, status models.FriendshipStatus) ([]*models.User, error)`: Public method. Lists users involved in friendships with a given `userID` that match a specific `status` (e.g., accepted friends, pending requests).\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for friendships.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Canonical ID ordering: `normalizeUserIDs` ensures consistent storage and retrieval of friendship pairs.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrFriendRequestNotFound` and PostgreSQL unique constraint errors to `models.ErrFriendRequestExists`.\n",
  "backend/adapter/postgres/group_repo.go": "- **High-Level Purpose**: Implements the `GroupRepository` interface, providing PostgreSQL-specific data access operations for managing groups and their members.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresGroupRepository`: Private struct implementing `repository.GroupRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresGroupRepository(db *sql.DB) repository.GroupRepository`: Public constructor. Creates and returns a new `postgresGroupRepository` instance.\n    - `(*postgresGroupRepository) Create(ctx context.Context, group *models.Group) error`: Public method. Inserts a new group into the `groups` table and immediately adds the owner as a member in a single transaction. Handles `unique_violation` errors for group handles.\n    - `(*postgresGroupRepository) Update(ctx context.Context, group *models.Group) error`: Public method. Updates a group's `name`, `photo_url`, and `owner_id`. Returns `models.ErrGroupNotFound` if no group is updated.\n    - `(*postgresGroupRepository) Delete(ctx context.Context, groupID uuid.UUID) error`: Public method. Deletes a group by its ID.\n    - `(*postgresGroupRepository) FindByID(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Public method. Retrieves a group from the `groups` table by its UUID. Returns `models.ErrGroupNotFound` if no group is found.\n    - `(*postgresGroupRepository) FindByHandle(ctx context.Context, handle string) (*models.Group, error)`: Public method. Retrieves a group from the `groups` table by its handle (case-insensitive). Returns `models.ErrGroupNotFound` if no group is found.\n    - `(*postgresGroupRepository) FuzzySearchByHandle(ctx context.Context, query string, limit int) ([]*models.Group, error)`: Public method. Performs a case-insensitive `LIKE` search on group handles.\n    - `(*postgresGroupRepository) AddMember(ctx context.Context, member *models.GroupMember) error`: Public method. Inserts a new member into the `group_members` table. Handles `unique_violation` errors by returning `models.ErrAlreadyGroupMember`.\n    - `(*postgresGroupRepository) RemoveMember(ctx context.Context, groupID, userID uuid.UUID) error`: Public method. Deletes a member from the `group_members` table. Returns `models.ErrNotGroupMember` if no member is removed.\n    - `(*postgresGroupRepository) FindMember(ctx context.Context, groupID, userID uuid.UUID) (*models.GroupMember, error)`: Public method. Retrieves a specific group member record. Returns `models.ErrNotGroupMember` if not found.\n    - `(*postgresGroupRepository) ListMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Public method. Lists all users who are members of a specific group, ordered by join time.\n    - `(*postgresGroupRepository) GetOldestMember(ctx context.Context, groupID uuid.UUID) (*models.User, error)`: Public method. Retrieves the user who joined the group earliest. Returns `models.ErrGroupNotFound` if no members are found.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for groups and members.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Transaction management: `Create` uses a transaction to ensure atomicity of group creation and owner membership.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrGroupNotFound`/`models.ErrNotGroupMember` and PostgreSQL unique constraint errors to `models.ErrGroupHandleTaken`/`models.ErrAlreadyGroupMember`.\n",
  "backend/adapter/postgres/migrations/000001_init.sql": "- **High-Level Purpose**: SQL script for initializing the PostgreSQL database schema, creating tables for users and sessions, and setting up necessary indexes.\n- **Definitions in the File**:\n  - **Tables**:\n    - `users`: Stores user accounts with `id` (UUID primary key), `username` (unique, VARCHAR), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR), and `created_at` (TIMESTAMPTZ).\n    - `sessions`: Stores user sessions with `refresh_token` (UUID primary key), `user_id` (UUID foreign key referencing `users`), and `expires_at` (TIMESTAMPTZ).\n  - **Indexes**:\n    - `idx_users_username`: B-tree index on the lowercase `username` for efficient case-insensitive lookups.\n    - `idx_sessions_user_id`: B-tree index on `user_id` for efficient session retrieval by user.\n  - **Extensions**:\n    - `uuid-ossp`: Enables generation of UUIDs within PostgreSQL.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines the initial state of the database schema.\n  - Foreign key constraints: `sessions.user_id` references `users.id` with `ON DELETE CASCADE`.\n",
  "backend/adapter/postgres/migrations/000002_add_social_features.sql": "- **High-Level Purpose**: SQL migration script to extend the database schema with tables and types required for social features, specifically friendships and groups.\n- **Definitions in the File**:\n  - **Types**:\n    - `friendship_status`: An ENUM type defining possible states for a friendship (`pending`, `accepted`).\n  - **Tables**:\n    - `friendships`: Stores friendship relationships between users.\n      - Columns: `user_id1` (UUID, foreign key to `users`), `user_id2` (UUID, foreign key to `users`), `status` (friendship_status), `created_at` (TIMESTAMPTZ).\n      - Constraints: Primary key on (`user_id1`, `user_id2`), `ON DELETE CASCADE` for user IDs, `CHECK (user_id1 \u003c user_id2)` for canonical ordering.\n    - `groups`: Stores information about chat groups.\n      - Columns: `id` (UUID primary key), `handle` (VARCHAR, unique), `name` (VARCHAR), `photo_url` (VARCHAR), `owner_id` (UUID, foreign key to `users`), `created_at` (TIMESTAMPTZ).\n      - Constraints: `ON DELETE SET NULL` for `owner_id`.\n    - `group_members`: Stores the many-to-many relationship between groups and users.\n      - Columns: `group_id` (UUID, foreign key to `groups`), `user_id` (UUID, foreign key to `users`), `joined_at` (TIMESTAMPTZ).\n      - Constraints: Primary key on (`group_id`, `user_id`), `ON DELETE CASCADE` for both foreign keys.\n  - **Indexes**:\n    - `idx_friendships_user_id1`: B-tree index on `user_id1` in `friendships`.\n    - `idx_friendships_user_id2`: B-tree index on `user_id2` in `friendships`.\n    - `idx_groups_handle`: B-tree index on the lowercase `handle` in `groups` for case-insensitive lookups.\n    - `idx_group_members_group_id`: B-tree index on `group_id` in `group_members`.\n    - `idx_group_members_user_id`: B-tree index on `user_id` in `group_members`.\n- **Notable Patterns or Logic**:\n  - Database migration: Defines schema changes using `+migrate Up` and `+migrate Down` directives.\n  - ENUM type: Introduces a custom type for friendship status.\n  - Canonical ordering: The `CHECK (user_id1 \u003c user_id2)` constraint on `friendships` ensures that each pair of users has only one friendship record, regardless of the order of IDs provided.\n  - Foreign key constraints: Ensures data integrity and defines cascading behavior on deletion.\n",
  "backend/adapter/postgres/session_repo.go": "- **High-Level Purpose**: Implements the `SessionRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresSessionRepository`: Private struct implementing `repository.SessionRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresSessionRepository(db *sql.DB) repository.SessionRepository`: Public constructor. Creates and returns a new `postgresSessionRepository` instance.\n    - `(*postgresSessionRepository) Create(ctx context.Context, session *models.Session) error`: Public method. Inserts a new session into the `sessions` table. If a session with the same `refresh_token` already exists, it updates the `expires_at` field (UPSERT).\n    - `(*postgresSessionRepository) Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Public method. Retrieves a session from the `sessions` table by its `refresh_token`. Returns `models.ErrSessionNotFound` if no session is found.\n    - `(*postgresSessionRepository) Delete(ctx context.Context, refreshToken uuid.UUID) error`: Public method. Deletes a session from the `sessions` table by its `refresh_token`.\n    - `(*postgresSessionRepository) DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Public method. Deletes all sessions associated with a given `user_id` from the `sessions` table.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for sessions.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - UPSERT logic for session creation/update.\n",
  "backend/adapter/postgres/user_repo.go": "- **High-Level Purpose**: Implements the `UserRepository` interface using PostgreSQL as the underlying data store.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `postgresUserRepository`: Private struct implementing `repository.UserRepository`.\n      - Fields:\n        - `db` (*sql.DB): The PostgreSQL database connection.\n  - **Functions / Methods**:\n    - `NewPostgresUserRepository(db *sql.DB) repository.UserRepository`: Public constructor. Creates and returns a new `postgresUserRepository` instance.\n    - `(*postgresUserRepository) Create(ctx context.Context, user *models.User) error`: Public method. Inserts a new user into the `users` table. Handles `unique_violation` errors for the username.\n    - `(*postgresUserRepository) FindByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their username (case-insensitive). Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Public method. Retrieves a user from the `users` table by their UUID. Returns `models.ErrUserNotFound` if no user is found.\n    - `(*postgresUserRepository) Update(ctx context.Context, user *models.User) error`: Public method. Updates an existing user's `username`, `password_hash`, and `profile_pic_url` in the `users` table. Handles `unique_violation` errors for the username.\n- **Notable Patterns or Logic**:\n  - Repository pattern: Provides an abstraction over database operations for users.\n  - PostgreSQL interaction: Uses `database/sql` for executing SQL queries.\n  - Error handling: Maps `sql.ErrNoRows` to `models.ErrUserNotFound` and PostgreSQL unique constraint errors to `models.ErrUsernameTaken`.\n",
  "backend/adapter/util/password.go": "- **High-Level Purpose**: Provides utility functions for securely hashing and verifying user passwords using bcrypt.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `HashPassword(password string) (string, error)`: Public function. Generates a bcrypt hash of the given plain-text password with a cost of 14.\n    - `CheckPasswordHash(password, hash string) bool`: Public function. Compares a plain-text password against a bcrypt hash, returning `true` if they match, `false` otherwise.\n",
  "backend/adapter/util/response.go": "- **High-Level Purpose**: Provides utility functions for sending standardized JSON and error HTTP responses.\n- **Functions / Methods**:\n  - `RespondWithError(w http.ResponseWriter, code int, message string)`: Public function. Sends an HTTP error response with a given status code and message, formatted as JSON.\n  - `RespondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Public function. Sends an HTTP JSON response with a given status code and payload.\n",
  "backend/adapter/util/token.go": "- **High-Level Purpose**: Provides an interface and implementation for generating JWT access tokens and UUID-based refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `TokenGenerator`: Interface for token generation.\n      - Methods:\n        - `GenerateAccessToken(userID uuid.UUID) (string, error)`: Generates a signed JWT access token.\n        - `GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Generates a UUID refresh token and its expiration time.\n        - `GetRefreshTokenExp() time.Duration`: Returns the configured refresh token expiration duration.\n  - **Classes / Structs**:\n    - `tokenGenerator`: Private struct implementing the `TokenGenerator` interface.\n      - Fields:\n        - `jwtSecret` (string): The secret key for signing JWTs.\n        - `accessTokenExp` (time.Duration): Duration for access token validity.\n        - `refreshTokenExp` (time.Duration): Duration for refresh token validity.\n  - **Functions / Methods**:\n    - `NewTokenGenerator(secret string, accessExp, refreshExp time.Duration) TokenGenerator`: Public constructor. Creates and returns a new `TokenGenerator` instance.\n    - `(*tokenGenerator) GenerateAccessToken(userID uuid.UUID) (string, error)`: Public method. Creates a new JWT with `user_id`, `exp` (expiration), and `iat` (issued at) claims, then signs it using HMAC-SHA256 with the configured secret.\n    - `(*tokenGenerator) GenerateRefreshToken() (uuid.UUID, time.Time, error)`: Public method. Generates a new UUID and calculates its expiration time based on `refreshTokenExp`.\n    - `(*tokenGenerator) GetRefreshTokenExp() time.Duration`: Public method. Returns the configured `refreshTokenExp`.\n- **Notable Patterns or Logic**:\n  - Token generation utility: Centralizes the logic for creating different types of tokens.\n  - JWT (JSON Web Token) usage: Employs `github.com/golang-jwt/jwt/v5` for access token creation.\n",
  "backend/adapter/util/validation.go": "- **High-Level Purpose**: Provides utility functions for validating common input patterns and file properties, such as usernames, group handles, passwords, and profile pictures.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `usernameRegex` (*regexp.Regexp): Private regular expression for validating usernames (4-50 lowercase letters, digits, underscores).\n    - `groupHandleRegex` (*regexp.Regexp): Private regular expression for validating the group name part of a handle (4-50 lowercase letters, digits, underscores).\n  - **Functions / Methods**:\n    - `ValidateUsername(username string) error`: Public function. Validates if a username matches the defined regex pattern and length constraints.\n    - `ValidateGroupHandle(handle string) error`: Public function. Validates if a group handle is in the format \"prefix#groupname\" and if the \"groupname\" part matches the defined regex pattern and length constraints.\n    - `ValidatePassword(password string) error`: Public function. Validates if a password meets minimum length requirements (at least 8 characters).\n    - `ValidateProfilePic(header *multipart.FileHeader) error`: Public function. Validates the size (max 200 KB) and content type (png, jpg, jpeg, webp) of an uploaded profile picture.\n- **Notable Patterns or Logic**:\n  - Input Validation: Centralizes validation logic to ensure data integrity and security.\n  - Regular Expressions: Uses `regexp` package for pattern matching.\n  - File Validation: Checks both size and MIME type for uploaded files.\n",
  "backend/cmd/server/main.go": "- **High-Level Purpose**: The main entry point for the backend Go application. It initializes all necessary components (configuration, database, repositories, use cases, HTTP handlers, and middleware), sets up the HTTP router with routes for authentication, user management, friends, and groups, and starts the HTTP server.\n- **Definitions in the File**:\n  - **Functions / Methods**:\n    - `main()`: Public function. Loads configuration, connects to PostgreSQL, initializes all repository, utility, use case, and handler layers. Sets up the `chi` router with middleware (logging, CORS, authentication) and defines public and protected API routes. Serves static files for profile pictures and starts the HTTP server.\n    - `fileServer(r chi.Router, path string, root http.FileSystem)`: Private helper function. Configures a file server to serve static files from a given `root` directory at a specified `path` on the router. It handles redirects for trailing slashes and strips the path prefix.\n- **Notable Patterns or Logic**:\n  - Application Bootstrap: Orchestrates the startup sequence of the entire backend.\n  - Dependency Injection: Manually wires up dependencies (repositories into use cases, use cases into handlers).\n  - HTTP Routing: Uses `github.com/go-chi/chi/v5` for defining API endpoints and grouping them into public and authenticated routes.\n  - Middleware Chain: Applies `chi_middleware.Logger`, `cors.Handler`, and `authMiddleware.Validate` globally or to specific route groups.\n  - Static File Serving: Configures a handler to serve user profile pictures.\n",
  "backend/config/config.go": "- **High-Level Purpose**: Defines the application's configuration structure and provides a mechanism to load these settings from environment variables or a `.env` file.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Config`: Public struct holding all application configuration parameters.\n      - Fields: `ServerPort`, `DBHost`, `DBPort`, `DBUser`, `DBPassword`, `DBName`, `DBSslMode`, `RedisAddr`, `JWTSecret`, `AccessTokenExp` (time.Duration), `RefreshTokenExp` (time.Duration), `ProfilePicDir`, `ProfilePicRoute`.\n  - **Functions / Methods**:\n    - `Load() (*Config, error)`: Public function. Loads configuration from `.env` file (if present) and environment variables, applying default values if not explicitly set. It also ensures the `ProfilePicDir` exists.\n    - `getEnv(key, fallback string) string`: Private helper function. Retrieves the value of an environment variable by `key`, returning a `fallback` value if the variable is not set.\n- **Notable Patterns or Logic**:\n  - Configuration management: Centralized loading of application settings.\n  - Environment variable parsing: Uses `os.LookupEnv` and `strconv` for type conversion.\n  - `.env` file support: Uses `github.com/joho/godotenv` for local development.\n",
  "backend/models/error.go": "- **High-Level Purpose**: Defines a collection of custom, application-specific error variables used throughout the codebase to provide more granular and descriptive error handling.\n- **Definitions in the File**:\n  - **Variables / Constants**:\n    - `ErrUserNotFound` (error): Indicates a user could not be found.\n    - `ErrUsernameTaken` (error): Indicates a username is already in use.\n    - `ErrInvalidCredentials` (error): Indicates incorrect username or password during authentication.\n    - `ErrSessionNotFound` (error): Indicates a session is not found or has expired.\n    - `ErrInvalidToken` (error): Indicates a JWT token is invalid.\n    - `ErrUnauthorized` (error): Indicates a user is not authorized to perform an action.\n    - `ErrInternalServer` (error): Generic error for unexpected server issues.\n    - `ErrBadRequest` (error): Generic error for malformed requests.\n    - `ErrFriendRequestExists` (error): Indicates a friend request between two users already exists.\n    - `ErrAlreadyFriends` (error): Indicates two users are already friends.\n    - `ErrNotFriends` (error): Indicates two users are not friends.\n    - `ErrFriendRequestNotFound` (error): Indicates a specific friend request could not be found.\n    - `ErrCannotFriendSelf` (error): Indicates a user attempted to send a friend request to themselves.\n    - `ErrGroupNotFound` (error): Indicates a group could not be found.\n    - `ErrGroupHandleTaken` (error): Indicates a group handle is already in use.\n    - `ErrNotGroupOwner` (error): Indicates a user is not the owner of a group.\n    - `ErrNotGroupMember` (error): Indicates a user is not a member of a group.\n    - `ErrAlreadyGroupMember` (error): Indicates a user is already a member of a group.\n    - `ErrCannotRemoveOwner` (error): Indicates an attempt to remove the group owner from a group.\n- **Notable Patterns or Logic**:\n  - Custom Error Definitions: Uses `errors.New` to create distinct error types.\n  - Centralized Error Management: Provides a single file for defining common application errors, promoting consistency.\n",
  "backend/models/friendship.go": "- **High-Level Purpose**: Defines the data structure for a friendship relationship between two users and enumerates possible friendship statuses.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Friendship`: Public struct representing a friendship or friend request.\n      - Fields:\n        - `UserID1` (uuid.UUID): The ID of the first user in the friendship.\n        - `UserID2` (uuid.UUID): The ID of the second user in the friendship.\n        - `Status` (FriendshipStatus): The current status of the friendship (e.g., pending, accepted).\n        - `CreatedAt` (time.Time): The timestamp when the friendship record was created.\n  - **Variables / Constants**:\n    - `FriendshipStatusPending` (FriendshipStatus): Constant indicating a pending friend request.\n    - `FriendshipStatusAccepted` (FriendshipStatus): Constant indicating an accepted friendship.\n",
  "backend/models/group.go": "- **High-Level Purpose**: Defines the data structures for a chat group and its members.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Group`: Public struct representing a chat group.\n      - Fields:\n        - `ID` (uuid.UUID): The unique identifier for the group.\n        - `Handle` (string): A unique, user-friendly handle for the group.\n        - `Name` (string): The display name of the group.\n        - `PhotoURL` (string): The URL or path to the group's profile picture.\n        - `OwnerID` (uuid.UUID): The ID of the user who owns the group.\n        - `CreatedAt` (time.Time): The timestamp when the group was created.\n    - `GroupMember`: Public struct representing a member's association with a group.\n      - Fields:\n        - `GroupID` (uuid.UUID): The ID of the group.\n        - `UserID` (uuid.UUID): The ID of the user who is a member.\n        - `JoinedAt` (time.Time): The timestamp when the user joined the group.\n",
  "backend/models/session.go": "- **High-Level Purpose**: Defines the data structure representing a user session, primarily used for refresh tokens.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `Session`: Public struct representing a user's session.\n      - Fields:\n        - `RefreshToken` (uuid.UUID): The unique identifier for the refresh token.\n        - `UserID` (uuid.UUID): The ID of the user associated with this session.\n        - `ExpiresAt` (time.Time): The timestamp when this session expires.\n",
  "backend/models/user.go": "- **High-Level Purpose**: Defines the data structure representing a user entity in the application.\n- **Definitions in the File**:\n  - **Classes / Structs**:\n    - `User`: Public struct representing a user.\n      - Fields:\n        - `ID` (uuid.UUID): The unique identifier for the user.\n        - `Username` (string): The user's unique username.\n        - `PasswordHash` (string): The bcrypt hash of the user's password (excluded from JSON serialization).\n        - `ProfilePicURL` (string): The URL or path to the user's profile picture.\n        - `CreatedAt` (time.Time): The timestamp when the user account was created.\n",
  "backend/repository/file_repository.go": "- **High-Level Purpose**: Defines the interface for file storage operations within the repository layer.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FileRepository`: Interface for saving files.\n      - Methods:\n        - `Save(file multipart.File, header *multipart.FileHeader) (string, error)`: Saves a file and returns its unique identifier or URL.\n",
  "backend/repository/friendship_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to friendship entities. This interface abstracts the underlying data storage mechanism for friend requests and accepted friendships.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FriendshipRepository`: Interface for managing friendship data.\n      - Methods:\n        - `Create(ctx context.Context, friendship *models.Friendship) error`: Creates a new friendship record (e.g., a pending request).\n        - `UpdateStatus(ctx context.Context, userID1, userID2 uuid.UUID, status models.FriendshipStatus) error`: Updates the status of an existing friendship (e.g., from pending to accepted).\n        - `Delete(ctx context.Context, userID1, userID2 uuid.UUID) error`: Deletes a friendship record.\n        - `Find(ctx context.Context, userID1, userID2 uuid.UUID) (*models.Friendship, error)`: Retrieves a friendship record between two specific users.\n        - `ListByUserID(ctx context.Context, userID uuid.UUID, status models.FriendshipStatus) ([]*models.User, error)`: Lists users involved in friendships with a given `userID` that match a specific status.",
  "backend/repository/group_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to groups and their members. This interface abstracts the underlying data storage mechanism for group-related entities.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `GroupRepository`: Interface for managing group data and membership.\n      - Methods:\n        - `Create(ctx context.Context, group *models.Group) error`: Creates a new group record.\n        - `Update(ctx context.Context, group *models.Group) error`: Updates an existing group's details.\n        - `Delete(ctx context.Context, groupID uuid.UUID) error`: Deletes a group by its ID.\n        - `FindByID(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Retrieves a group by its unique ID.\n        - `FindByHandle(ctx context.Context, handle string) (*models.Group, error)`: Retrieves a group by its unique handle.\n        - `FuzzySearchByHandle(ctx context.Context, query string, limit int) ([]*models.Group, error)`: Searches for groups whose handles partially match a given query, with a result limit.\n        - `AddMember(ctx context.Context, member *models.GroupMember) error`: Adds a user as a member to a group.\n        - `RemoveMember(ctx context.Context, groupID, userID uuid.UUID) error`: Removes a user from a group.\n        - `FindMember(ctx context.Context, groupID, userID uuid.UUID) (*models.GroupMember, error)`: Retrieves a specific group member record.\n        - `ListMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Lists all users who are members of a specific group.\n        - `GetOldestMember(ctx context.Context, groupID uuid.UUID) (*models.User, error)`: Retrieves the user who has been a member of the group for the longest time.\n",
  "backend/repository/session_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user sessions, typically managed by refresh tokens.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `SessionRepository`: Interface for managing user sessions.\n      - Methods:\n        - `Create(ctx context.Context, session *models.Session) error`: Creates a new session or updates an existing one.\n        - `Find(ctx context.Context, refreshToken uuid.UUID) (*models.Session, error)`: Retrieves a session by its refresh token.\n        - `Delete(ctx context.Context, refreshToken uuid.UUID) error`: Deletes a session by its refresh token.\n        - `DeleteByUserID(ctx context.Context, userID uuid.UUID) error`: Deletes all sessions associated with a specific user ID.\n",
  "backend/repository/user_repository.go": "- **High-Level Purpose**: Defines the interface for data access operations related to user entities.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserRepository`: Interface for managing user data.\n      - Methods:\n        - `Create(ctx context.Context, user *models.User) error`: Creates a new user record.\n        - `FindByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `FindByID(ctx context.Context, id uuid.UUID) (*models.User, error)`: Retrieves a user by their unique ID.\n        - `Update(ctx context.Context, user *models.User) error`: Updates an existing user's record.\n",
  "backend/usecase/auth_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user authentication, including login, token refresh, and logout.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `AuthUsecase`: Interface defining authentication operations.\n      - Methods:\n        - `Login(ctx context.Context, username, password string) (accessToken string, refreshToken string, err error)`: Authenticates a user and generates access and refresh tokens.\n        - `Refresh(ctx context.Context, refreshToken string) (newAccessToken string, err error)`: Refreshes an expired access token using a valid refresh token.\n        - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a user's session by deleting the refresh token.\n  - **Classes / Structs**:\n    - `authUsecase`: Private struct implementing the `AuthUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `sessionRepo` (repository.SessionRepository): Dependency for session data access.\n        - `tokenGen` (util.TokenGenerator): Dependency for generating tokens.\n  - **Functions / Methods**:\n    - `NewAuthUsecase(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, tokenGen util.TokenGenerator) AuthUsecase`: Public constructor. Creates and returns a new `AuthUsecase` instance with injected dependencies.\n    - `(*authUsecase) Login(ctx context.Context, username, password string) (string, string, error)`: Public method. Handles user login, validates credentials, generates access and refresh tokens, and creates a session. It enforces a single-device policy by deleting old sessions.\n    - `(*authUsecase) Refresh(ctx context.Context, refreshTokenStr string) (string, error)`: Public method. Refreshes an access token using a refresh token, validates the session's expiry, and extends its validity (sliding window).\n    - `(*authUsecase) Logout(ctx context.Context, refreshTokenStr string) error`: Public method. Invalidates a user's session by deleting the provided refresh token.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for repositories and token generation.\n  - Single-device policy for sessions during login.\n  - Sliding window for refresh token expiry.\n",
  "backend/usecase/friend_usecase.go": "- **High-Level Purpose**: Implements the core business logic for managing friend relationships between users, including sending, accepting, rejecting requests, and unfriending.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `FriendUsecase`: Interface defining friend management operations.\n      - Methods:\n        - `SendRequest(ctx context.Context, fromUserID uuid.UUID, toUsername string) error`: Sends a friend request from one user to another.\n        - `AcceptRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Accepts a pending friend request.\n        - `RejectRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Rejects a pending friend request.\n        - `Unfriend(ctx context.Context, userID, friendID uuid.UUID) error`: Removes an existing friend relationship.\n        - `ListFriends(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Lists all accepted friends of a user.\n        - `ListPendingRequests(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Lists all pending friend requests for a user.\n  - **Classes / Structs**:\n    - `friendUsecase`: Private struct implementing the `FriendUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `friendRepo` (repository.FriendshipRepository): Dependency for friendship data access.\n  - **Functions / Methods**:\n    - `NewFriendUsecase(userRepo repository.UserRepository, friendRepo repository.FriendshipRepository) FriendUsecase`: Public constructor. Creates and returns a new `FriendUsecase` instance with injected dependencies.\n    - `(*friendUsecase) SendRequest(ctx context.Context, fromUserID uuid.UUID, toUsername string) error`: Public method. Finds the target user, checks for self-friending, existing friendships/requests, and then creates a new pending friendship record.\n    - `(*friendUsecase) AcceptRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Public method. Finds the pending request and updates its status to \"accepted\".\n    - `(*friendUsecase) RejectRequest(ctx context.Context, userID, requesterID uuid.UUID) error`: Public method. Finds the pending request and deletes it.\n    - `(*friendUsecase) Unfriend(ctx context.Context, userID, friendID uuid.UUID) error`: Public method. Finds the accepted friendship and deletes it.\n    - `(*friendUsecase) ListFriends(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Public method. Retrieves a list of users who are accepted friends with the given `userID`.\n    - `(*friendUsecase) ListPendingRequests(ctx context.Context, userID uuid.UUID) ([]*models.User, error)`: Public method. Retrieves a list of users who have pending friend requests with the given `userID`.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules for friend management.\n  - Dependency Injection: Constructor takes interfaces for user and friendship repositories.\n  - State Management: Handles transitions between \"pending\" and \"accepted\" friendship statuses.\n  - Error Handling: Maps repository errors and business logic conditions to specific `models.Err` types.\n",
  "backend/usecase/group_usecase.go": "- **High-Level Purpose**: Implements the core business logic for managing chat groups, including creation, updates, membership changes, ownership transfer, and searching. It orchestrates interactions between group, user, friend, and file repositories.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `GroupUsecase`: Interface defining group management operations.\n      - Methods:\n        - `CreateGroup(ctx context.Context, ownerID uuid.UUID, handle, name string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Creates a new group.\n        - `UpdateGroup(ctx context.Context, userID, groupID uuid.UUID, name *string, photo multipart.File, photoHeader *multipart.FileHeader) (*models.Group, error)`: Updates group details (name, photo).\n        - `JoinGroup(ctx context.Context, userID uuid.UUID, groupHandle string) error`: Allows a user to join a group.\n        - `LeaveGroup(ctx context.Context, userID, groupID uuid.UUID) error`: Allows a user to leave a group, handling ownership transfer if the owner leaves.\n        - `AddMember(ctx context.Context, adderID uuid.UUID, newMemberUsername string, groupID uuid.UUID) error`: Adds a new member to a group (requires the adder to be a member and friends with the new member).\n        - `RemoveMember(ctx context.Context, ownerID, memberID, groupID uuid.UUID) error`: Removes a member from a group (requires the caller to be the owner).\n        - `TransferOwnership(ctx context.Context, currentOwnerID, newOwnerID, groupID uuid.UUID) error`: Transfers group ownership to another member.\n        - `SearchGroups(ctx context.Context, query string) ([]*models.Group, error)`: Searches for groups by handle.\n        - `GetGroupDetails(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Retrieves details of a specific group.\n        - `ListGroupMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Lists all members of a group.\n  - **Classes / Structs**:\n    - `groupUsecase`: Private struct implementing the `GroupUsecase` interface.\n      - Fields:\n        - `groupRepo` (repository.GroupRepository): Dependency for group data access.\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `friendRepo` (repository.FriendshipRepository): Dependency for friendship data access.\n        - `fileRepo` (repository.FileRepository): Dependency for file storage operations.\n  - **Functions / Methods**:\n    - `NewGroupUsecase(groupRepo repository.GroupRepository, userRepo repository.UserRepository, friendRepo repository.FriendshipRepository, fileRepo repository.FileRepository) GroupUsecase`: Public constructor. Creates and returns a new `GroupUsecase` instance with injected dependencies.\n    - `(*groupUsecase) CreateGroup(...) (*models.Group, error)`: Public method. Validates group handle and photo, saves photo if provided, creates the group, and adds the owner as the first member.\n    - `(*groupUsecase) UpdateGroup(...) (*models.Group, error)`: Public method. Updates group name and/or photo, ensuring the caller is the group owner.\n    - `(*groupUsecase) JoinGroup(ctx context.Context, userID uuid.UUID, groupHandle string) error`: Public method. Finds the group by handle and adds the user as a member.\n    - `(*groupUsecase) LeaveGroup(ctx context.Context, userID, groupID uuid.UUID) error`: Public method. Removes a user from a group. If the owner leaves, ownership is transferred to the oldest remaining member; if no members are left, the group is deleted.\n    - `(*groupUsecase) AddMember(ctx context.Context, adderID uuid.UUID, newMemberUsername string, groupID uuid.UUID) error`: Public method. Adds a user to a group, verifying that the `adderID` is a current member and is friends with `newMemberUsername`.\n    - `(*groupUsecase) RemoveMember(ctx context.Context, ownerID, memberID, groupID uuid.UUID) error`: Public method. Removes a member from a group, ensuring the caller is the group owner and preventing the owner from removing themselves.\n    - `(*groupUsecase) TransferOwnership(ctx context.Context, currentOwnerID, newOwnerID, groupID uuid.UUID) error`: Public method. Transfers group ownership, verifying the `currentOwnerID` and that `newOwnerID` is a group member.\n    - `(*groupUsecase) SearchGroups(ctx context.Context, query string) ([]*models.Group, error)`: Public method. Delegates to the repository for fuzzy searching groups by handle.\n    - `(*groupUsecase) GetGroupDetails(ctx context.Context, groupID uuid.UUID) (*models.Group, error)`: Public method. Retrieves group details by ID.\n    - `(*groupUsecase) ListGroupMembers(ctx context.Context, groupID uuid.UUID) ([]*models.User, error)`: Public method. Lists all members of a group.\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates complex business rules for group management.\n  - Dependency Injection: Constructor takes interfaces for various repositories.\n  - Input Validation: Uses `util.ValidateGroupHandle` and `util.ValidateProfilePic`.\n  - Ownership Transfer Logic: Handles the scenario where the group owner leaves, transferring ownership to the oldest member or deleting the group.\n  - Friendship Requirement: `AddMember` enforces that the adder and new member must be friends.\n",
  "backend/usecase/user_usecase.go": "- **High-Level Purpose**: Implements the core business logic for user management, including registration, retrieving user details, and updating user profiles.\n- **Definitions in the File**:\n  - **Interfaces**:\n    - `UserUsecase`: Interface defining user management operations.\n      - Methods:\n        - `Register(ctx context.Context, username, password string) (*models.User, error)`: Registers a new user.\n        - `GetByUsername(ctx context.Context, username string) (*models.User, error)`: Retrieves a user by their username.\n        - `UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Updates a user's profile information.\n  - **Classes / Structs**:\n    - `userUsecase`: Private struct implementing the `UserUsecase` interface.\n      - Fields:\n        - `userRepo` (repository.UserRepository): Dependency for user data access.\n        - `fileRepo` (repository.FileRepository): Dependency for file storage operations.\n  - **Functions / Methods**:\n    - `NewUserUsecase(userRepo repository.UserRepository, fileRepo repository.FileRepository) UserUsecase`: Public constructor. Creates and returns a new `UserUsecase` instance with injected dependencies.\n    - `(*userUsecase) Register(ctx context.Context, username, password string) (*models.User, error)`: Public method. Registers a new user after validating username and password, checking for username uniqueness, hashing the password, and persisting the user.\n    - `(*userUsecase) GetByUsername(ctx context.Context, username string) (*models.User, error)`: Public method. Retrieves a user's details by their username.\n    - `(*userUsecase) UpdateProfile(ctx context.Context, userID uuid.UUID, username, password *string, profilePic multipart.File, profilePicHeader *multipart.FileHeader) (*models.User, error)`: Public method. Updates a user's profile, allowing changes to username (with uniqueness check), password (with hashing), and profile picture (with validation and storage).\n- **Notable Patterns or Logic**:\n  - Usecase pattern: Encapsulates application-specific business rules.\n  - Dependency Injection: Constructor takes interfaces for user and file repositories.\n  - Input validation: Utilizes `util.ValidateUsername`, `util.ValidatePassword`, and `util.ValidateProfilePic`.\n",
  "docker-compose.yml": "- **High-Level Purpose**: Defines and configures Docker services for the application's core dependencies: PostgreSQL for the database and Redis for caching/session management.\n- **Definitions in the File**:\n  - **Services**:\n    - `postgres`: Defines a PostgreSQL database service.\n      - Image: `postgres:13`.\n      - Environment: Configured with `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB` from environment variables or defaults.\n      - Ports: Maps host port `DB_PORT` (default 5432) to container port 5432.\n      - Volumes: Persists database data to `postgres_data` volume and mounts SQL migration scripts to be run on startup.\n      - Restart policy: `unless-stopped`.\n    - `redis`: Defines a Redis in-memory data store service.\n      - Image: `redis:6.2-alpine`.\n      - Ports: Maps host port 6379 to container port 6379.\n      - Restart policy: `unless-stopped`.\n  - **Volumes**:\n    - `postgres_data`: A named Docker volume for persistent PostgreSQL data storage.\n- **Notable Patterns or Logic**:\n  - Docker Compose: Used for defining and running multi-container Docker applications.\n  - Environment variable interpolation: Uses `${VAR:-default}` syntax to allow configuration via `.env` files.\n  - Database migrations: Automatically applies SQL scripts from `./backend/adapter/postgres/migrations` on container startup.\n"
}