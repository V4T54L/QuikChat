{
  "Makefile": "- File Path: Makefile\n- High-Level Purpose: Provides a set of convenient commands (targets) for managing the development lifecycle of the chat application, including Docker operations, database migrations, and Go application build/run.\n- Definitions in the File:\n  - Targets:\n    - `up`: Starts Docker containers defined in `docker-compose.yml`.\n    - `down`: Stops Docker containers.\n    - `logs`: Tails logs from Docker containers.\n    - `psql`: Connects to the PostgreSQL container using `psql`.\n    - `migrate-up`: Applies database migration SQL scripts to the PostgreSQL database.\n    - `run`: Executes the Go backend application directly.\n    - `build`: Compiles the Go backend application into an executable binary.\n- Notable Patterns or Logic: This is a standard Makefile, used for automating common development and deployment tasks.\n",
  "backend/cmd/server/main.go": "- File Path: backend/cmd/server/main.go\n- High-Level Purpose: The main entry point for the QuikChat backend application. It initializes all necessary components, including configuration, database connections, repositories, services, the WebSocket hub, and the HTTP router, then starts the HTTP server and a background event persistence worker.\n- Definitions in the File:\n  - Functions / Methods:\n    - `main()`: The primary function that executes when the server starts. It performs the following steps:\n      1.  Loads application configuration.\n      2.  Initializes PostgreSQL database connection.\n      3.  Initializes Redis client connection.\n      4.  Creates instances of all repositories (PostgreSQL user, session, event; Redis event; local file).\n      5.  Creates instances of all use cases/services (authentication, user, event).\n      6.  Initializes the WebSocket `Hub` and starts its `Run` method in a goroutine.\n      7.  Starts a background goroutine that periodically calls `eventUsecase.PersistBufferedEvents`.\n      8.  Initializes the HTTP router with all handlers and middleware.\n      9.  Starts the HTTP server, listening on the configured port.\n- Notable Patterns or Logic: This file demonstrates the application's bootstrap process, including manual dependency injection, initialization of infrastructure components, and the setup of concurrent background tasks (WebSocket hub, event persistence worker). It centralizes the wiring of the entire backend application.\n",
  "backend/go.mod": "- File Path: backend/go.mod\n- High-Level Purpose: Defines the Go module path and the required Go version for the `chat-app` project.\n- Definitions in the File:\n  - Module: `chat-app`\n  - Go Version: `1.24.0`\n- Notable Patterns or Logic: This is a standard Go module definition file, managing project dependencies and Go version.\n",
  "backend/internal/adapter/localfile/file_repository.go": "- File Path: backend/internal/adapter/localfile/file_repository.go\n- High-Level Purpose: Implements the `FileRepository` interface to save files (specifically profile pictures) to the local filesystem.\n- Definitions in the File:\n  - Structs:\n    - `localFileRepository`: An internal struct that stores the base directory for file uploads (`uploadDir`).\n  - Functions / Methods:\n    - `NewLocalFileRepository(uploadDir string) (repository.FileRepository, error)`: A public constructor function that creates the specified `uploadDir` if it doesn't exist and returns a new `localFileRepository` instance as a `repository.FileRepository` interface.\n    - `SaveProfilePicture(_ context.Context, fileData []byte, fileType string) (string, error)`: A public method on `localFileRepository` that saves the provided `fileData` to the `uploadDir`. It determines the file extension based on `fileType`, generates a unique filename using a UUID, and writes the file to disk.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `FileRepository` interface, providing a concrete implementation for local filesystem storage. It handles file I/O operations and ensures the upload directory exists.\n",
  "backend/internal/adapter/postgres/event_repository.go": "- File Path: backend/internal/adapter/postgres/event_repository.go\n- High-Level Purpose: Implements the `EventRepository` interface for PostgreSQL, providing methods to store events, retrieve undelivered events for a user, and mark events as delivered.\n- Definitions in the File:\n  - Structs:\n    - `postgresEventRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresEventRepository(db *pgxpool.Pool) repository.EventRepository`: A public constructor function that returns a new instance of `postgresEventRepository` as a `repository.EventRepository` interface.\n    - `StoreEvents(ctx context.Context, events []*domain.Event) error`: A public method on `postgresEventRepository` that stores a batch of events into the `events` table within a single transaction.\n    - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: A public method on `postgresEventRepository` that retrieves all events for a specific `userID` that have not yet been marked as delivered, ordered by creation time.\n    - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: A public method on `postgresEventRepository` that updates the `is_delivered` status to `TRUE` for a given list of event IDs.\n    - `BufferEvent(ctx context.Context, event *domain.Event) error`: An internal no-op method, as this functionality is handled by the Redis event repository.\n    - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: An internal no-op method, as this functionality is handled by the Redis event repository.\n    - `ClearUserBuffer(ctx context.Context, userID string) error`: An internal no-op method, as this functionality is handled by the Redis event repository.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `EventRepository` interface, providing a concrete PostgreSQL implementation. It uses database transactions for batch inserts and handles querying and updating event delivery status. It explicitly marks Redis-specific methods as no-ops.\n",
  "backend/internal/adapter/postgres/postgres.go": "- File Path: backend/internal/adapter/postgres/postgres.go\n- High-Level Purpose: Provides a utility function to establish and verify a connection to a PostgreSQL database.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewDB(databaseURL string) *pgxpool.Pool`: A public function that creates a new PostgreSQL connection pool using the provided `databaseURL`, pings the database to ensure connectivity, and returns the connection pool. It logs fatal errors if connection fails.\n- Notable Patterns or Logic: This file acts as a database connection factory, centralizing the logic for connecting to PostgreSQL.\n",
  "backend/internal/adapter/postgres/session_repository.go": "- File Path: backend/internal/adapter/postgres/session_repository.go\n- High-Level Purpose: Implements the `SessionRepository` interface using PostgreSQL as the persistent storage.\n- Definitions in the File:\n  - Structs:\n    - `postgresSessionRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresSessionRepository(db *pgxpool.Pool) repository.SessionRepository`: A public constructor function that returns a new instance of `postgresSessionRepository` as a `repository.SessionRepository` interface.\n    - `Store(ctx context.Context, session *domain.Session) error`: A public method on `postgresSessionRepository` that inserts a new session record into the `sessions` table.\n    - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: A public method on `postgresSessionRepository` that retrieves a session by its ID from the `sessions` table. Returns `nil, nil` if not found.\n    - `Delete(ctx context.Context, id string) error`: A public method on `postgresSessionRepository` that deletes a session by its ID from the `sessions` table.\n    - `DeleteAllForUser(ctx context.Context, userID string) error`: A public method on `postgresSessionRepository` that deletes all sessions associated with a specific user ID from the `sessions` table.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `SessionRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for session management.\n",
  "backend/internal/adapter/postgres/user_repository.go": "- File Path: backend/internal/adapter/postgres/user_repository.go\n- High-Level Purpose: Implements the `UserRepository` interface using PostgreSQL as the persistent storage for user data.\n- Definitions in the File:\n  - Structs:\n    - `postgresUserRepository`: An internal struct that holds the PostgreSQL connection pool (`db`).\n  - Functions / Methods:\n    - `NewPostgresUserRepository(db *pgxpool.Pool) repository.UserRepository`: A public constructor function that returns a new instance of `postgresUserRepository` as a `repository.UserRepository` interface.\n    - `Create(ctx context.Context, user *domain.User) error`: A public method on `postgresUserRepository` that inserts a new user record into the `users` table.\n    - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their username from the `users` table. Returns `nil, nil` if not found.\n    - `GetByID(ctx context.Context, id string) (*domain.User, error)`: A public method on `postgresUserRepository` that retrieves a user by their ID from the `users` table. Returns `nil, nil` if not found.\n    - `Update(ctx context.Context, user *domain.User) error`: A public method on `postgresUserRepository` that updates an existing user's `username`, `password_hash`, `profile_pic_url`, and `updated_at` fields in the `users` table.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `UserRepository` interface, providing a concrete PostgreSQL implementation. It handles database interactions for user management, including creating, retrieving, and updating user records.\n",
  "backend/internal/adapter/redis/event_repository.go": "- File Path: backend/internal/adapter/redis/event_repository.go\n- High-Level Purpose: Implements the `EventRepository` interface for Redis, specifically for buffering real-time events for offline users.\n- Definitions in the File:\n  - Constants:\n    - `userEventBufferKeyPrefix`: A string constant used as a prefix for Redis keys storing user event buffers.\n    - `bufferTTL`: A `time.Duration` constant defining the time-to-live for buffered events in Redis (48 hours).\n  - Structs:\n    - `redisEventRepository`: An internal struct that holds the Redis client (`client`).\n  - Functions / Methods:\n    - `NewRedisEventRepository(client *redis.Client) repository.EventRepository`: A public constructor function that returns a new instance of `redisEventRepository` as a `repository.EventRepository` interface.\n    - `userBufferKey(userID string) string`: An internal helper method that generates the Redis key for a user's event buffer.\n    - `BufferEvent(ctx context.Context, event *domain.Event) error`: A public method on `redisEventRepository` that marshals an event to JSON, pushes it to the left of a Redis list (acting as a buffer) for the recipient user, and sets an expiration for the list.\n    - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: A public method on `redisEventRepository` that retrieves all buffered events for a given user from their Redis list, unmarshaling them back into `domain.Event` objects.\n    - `ClearUserBuffer(ctx context.Context, userID string) error`: A public method on `redisEventRepository` that deletes the Redis list containing buffered events for a specific user.\n    - `StoreEvents(ctx context.Context, events []*domain.Event) error`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n    - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n    - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: An internal no-op method, as this functionality is handled by the PostgreSQL event repository.\n- Notable Patterns or Logic: This file is an \"adapter\" for the `EventRepository` interface, providing a concrete Redis implementation for event buffering. It uses Redis lists as a message queue/buffer and sets TTLs for temporary storage. It explicitly marks PostgreSQL-specific methods as no-ops.\n",
  "backend/internal/adapter/redis/redis.go": "- File Path: backend/internal/adapter/redis/redis.go\n- High-Level Purpose: Provides a utility function to establish and verify a connection to a Redis server.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewClient(redisURL string) *redis.Client`: A public function that parses a Redis connection URL, creates a new Redis client, pings the Redis server to ensure connectivity, and returns the client. It logs fatal errors if connection fails.\n- Notable Patterns or Logic: This file acts as a Redis client factory, centralizing the logic for connecting to Redis.\n",
  "backend/internal/delivery/http/handler/auth_handler.go": "- File Path: backend/internal/delivery/http/handler/auth_handler.go\n- High-Level Purpose: Implements HTTP handlers for authentication-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - Structs:\n    - `AuthHandler`: Holds a reference to the `usecase.AuthUsecase` to perform authentication operations.\n  - Functions / Methods:\n    - `NewAuthHandler(authUsecase usecase.AuthUsecase) *AuthHandler`: A public constructor function that creates and returns a new `AuthHandler` instance.\n    - `SignUp(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user registration. It decodes the request body, calls the `SignUp` use case, and responds with the created user or an error.\n    - `Login(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user login. It decodes the request body, calls the `Login` use case, and responds with authentication tokens or an error.\n    - `Refresh(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for refreshing authentication tokens. It decodes the refresh token from the request body, calls the `Refresh` use case, and responds with new tokens or an error.\n    - `Logout(w http.ResponseWriter, r *http.Request)`: A public method on `AuthHandler` that handles HTTP POST requests for user logout. It decodes the refresh token, calls the `Logout` use case, and responds with a `204 No Content` status or an error.\n    - `handleAuthError(w http.ResponseWriter, err error)`: An internal helper function that maps specific authentication service errors to appropriate HTTP status codes and error messages for client responses.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern, acting as the entry point for HTTP requests and orchestrating the interaction with the use case layer.\n",
  "backend/internal/delivery/http/handler/user_handler.go": "- File Path: backend/internal/delivery/http/handler/user_handler.go\n- High-Level Purpose: Implements HTTP handlers for user-related API endpoints, including fetching user profiles and updating the authenticated user's profile.\n- Definitions in the File:\n  - Structs:\n    - `UserHandler`: Holds a reference to the `usecase.UserUsecase` to perform user-related operations.\n  - Functions / Methods:\n    - `NewUserHandler(uc usecase.UserUsecase) *UserHandler`: A public constructor function that creates and returns a new `UserHandler` instance.\n    - `GetMyProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP GET requests for the authenticated user's profile. It extracts the user ID from the request context and calls the `GetProfile` use case.\n    - `GetUserProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP GET requests for a user's profile by username. It extracts the username from the URL parameter and calls the `GetUserByUsername` use case.\n    - `UpdateMyProfile(w http.ResponseWriter, r *http.Request)`: A public method on `UserHandler` that handles HTTP PUT requests for updating the authenticated user's profile. It parses multipart form data for username, password, and profile picture, calls the `UpdateProfile` and `UpdateProfilePicture` use cases, and responds with the updated user or an error.\n- Notable Patterns or Logic: This file implements the \"Handler\" pattern for user management, acting as the entry point for HTTP requests and orchestrating interaction with the user use case layer. It specifically handles multipart form data for file uploads.\n",
  "backend/internal/delivery/http/handler/websocket_handler.go": "- File Path: backend/internal/delivery/http/handler/websocket_handler.go\n- High-Level Purpose: Provides an HTTP handler responsible for upgrading standard HTTP requests to WebSocket connections and integrating new WebSocket clients into the application's real-time `Hub`.\n- Definitions in the File:\n  - Variables:\n    - `upgrader`: A global `websocket.Upgrader` instance configured for WebSocket handshake, allowing all origins for development.\n  - Structs:\n    - `WebSocketHandler`: An internal struct that holds a reference to the `websocket.Hub`.\n  - Functions / Methods:\n    - `NewWebSocketHandler(hub *ws.Hub) *WebSocketHandler`: A public constructor function that creates and returns a new `WebSocketHandler` instance.\n    - `ServeWS(w http.ResponseWriter, r *http.Request)`: A public method on `WebSocketHandler` that serves the WebSocket endpoint. It extracts the `userID` from the request context (set by authentication middleware), upgrades the HTTP connection to a WebSocket, creates a new `websocket.Client`, registers it with the `Hub`, and starts `readPump` and `writePump` goroutines for the client.\n- Notable Patterns or Logic: This file acts as an HTTP handler for WebSocket connections, leveraging the `gorilla/websocket` library. It integrates with the authentication middleware to secure WebSocket connections and uses a `Hub` to manage multiple clients.\n",
  "backend/internal/delivery/http/middleware/auth_middleware.go": "- File Path: backend/internal/delivery/http/middleware/auth_middleware.go\n- High-Level Purpose: Provides an HTTP middleware function to authenticate incoming requests using JWTs and inject the authenticated user's ID into the request context.\n- Definitions in the File:\n  - Types:\n    - `contextKey`: A custom string type used for context keys to avoid collisions.\n  - Constants:\n    - `UserIDContextKey`: A `contextKey` constant used to store and retrieve the authenticated user's ID from the request context.\n  - Functions / Methods:\n    - `AuthMiddleware(cfg *config.Config) func(next http.Handler) http.Handler`: A public function that returns an `http.Handler` middleware. This middleware extracts a Bearer token from the Authorization header, validates it using the JWT secret from the config, and if valid, adds the `UserID` from the token claims to the request context before passing it to the next handler.\n- Notable Patterns or Logic: This file implements an HTTP middleware pattern, specifically for authentication and context enrichment.\n",
  "backend/internal/delivery/http/router.go": "- File Path: backend/internal/delivery/http/router.go\n- High-Level Purpose: Configures the HTTP server's routing, defining API endpoints, applying middleware, and serving static frontend assets, including a Single Page Application (SPA) fallback.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewRouter(cfg *config.Config, authUsecase usecase.AuthUsecase, userUsecase usecase.UserUsecase, hub *ws.Hub) http.Handler`: A public function that initializes and returns a new `chi.Mux` router. It sets up global middleware (logger, recoverer, heartbeat), creates handlers for authentication, users, and WebSockets, and defines public and protected API routes. It also configures serving of static files and an SPA fallback.\n    - `FileServer(r chi.Router, path string, root http.FileSystem)`: A public helper function that serves static files from the specified `root` directory. It includes logic to redirect paths without trailing slashes and provides a fallback to `chat.html` for any non-existent file requests, supporting SPA routing.\n- Notable Patterns or Logic: This file implements an HTTP routing pattern using `go-chi/chi`. It demonstrates clear separation of public and protected routes using middleware, and includes a robust static file server with an SPA fallback mechanism.\n",
  "backend/internal/delivery/websocket/client.go": "- File Path: backend/internal/delivery/websocket/client.go\n- High-Level Purpose: Represents an individual WebSocket client connection, managing its communication with the `Hub` and handling low-level WebSocket operations like reading, writing, and connection keep-alives.\n- Definitions in the File:\n  - Constants:\n    - `writeWait`: `time.Duration` for write deadline.\n    - `pongWait`: `time.Duration` for read deadline (pong timeout).\n    - `pingPeriod`: `time.Duration` for sending ping messages.\n    - `maxMessageSize`: Maximum allowed message size in bytes.\n  - Variables:\n    - `newline`: Byte slice representing a newline character.\n    - `space`: Byte slice representing a space character.\n  - Structs:\n    - `Client`: An internal struct that represents an active WebSocket client.\n      - Fields: `hub` (`*Hub`), `conn` (`*websocket.Conn`), `send` (buffered channel for outbound messages), `userID` (string, authenticated user ID).\n  - Functions / Methods:\n    - `readPump()`: An internal method on `Client` that runs in a goroutine. It continuously reads messages from the WebSocket connection, sets read deadlines, handles pong messages, and logs incoming messages. It unregisters the client from the hub and closes the connection on error or unexpected close.\n    - `writePump()`: An internal method on `Client` that runs in a goroutine. It continuously sends messages from the `send` channel to the WebSocket connection, handles write deadlines, and sends periodic ping messages to keep the connection alive. It closes the connection if the `send` channel is closed or on write errors.\n    - `SendEvent(event interface{})`: A public method on `Client` that marshals a given event object to JSON and sends it to the client's `send` channel for transmission over the WebSocket.\n- Notable Patterns or Logic: This file implements the core logic for managing a single WebSocket client. It uses goroutines for concurrent reading and writing, implements ping/pong for connection keep-alives, and handles message buffering and error conditions.\n",
  "backend/internal/delivery/websocket/hub.go": "- File Path: backend/internal/delivery/websocket/hub.go\n- High-Level Purpose: Manages the lifecycle of all active WebSocket clients, handling their registration and unregistration, and providing mechanisms to broadcast or send targeted events.\n- Definitions in the File:\n  - Structs:\n    - `Hub`: An internal struct that maintains the state of the WebSocket system.\n      - Fields: `clients` (map of `userID` to `*Client`), `broadcast` (channel for inbound messages to be broadcast), `register` (channel for new client registrations), `unregister` (channel for client disconnections), `eventUsecase` (for buffering events).\n  - Functions / Methods:\n    - `NewHub(eventUsecase usecase.EventUsecase) *Hub`: A public constructor function that creates and returns a new `Hub` instance, initializing its channels and client map.\n    - `Run()`: A public method on `Hub` that runs in a goroutine, continuously listening for `register`, `unregister`, and `broadcast` events. It adds/removes clients from the `clients` map and handles message broadcasting.\n    - `BroadcastEvent(ctx context.Context, eventType string, payload interface{}, recipientID string)`: A public method on `Hub` that sends an event to a specific `recipientID`. If the recipient is online, the event is sent directly via their WebSocket connection; otherwise, it uses the `eventUsecase` to buffer the event for later delivery.\n- Notable Patterns or Logic: This file implements a \"WebSocket Hub\" pattern, centralizing client management and message dispatch for real-time communication. It uses Go channels for concurrent client registration/deregistration and message handling. It also incorporates logic for handling offline users by buffering events.\n",
  "backend/internal/domain/event.go": "- File Path: backend/internal/domain/event.go\n- High-Level Purpose: Defines the `Event` domain entity, representing a real-time event that can be sent to users or persisted.\n- Definitions in the File:\n  - Structs:\n    - `Event`: Represents a real-time event within the application.\n      - Fields:\n        - `ID` (string): Unique identifier for the event.\n        - `Type` (string): The type of event (e.g., \"new_message\", \"friend_request\").\n        - `Payload` (json.RawMessage): The actual data associated with the event, stored as raw JSON.\n        - `RecipientID` (string): The ID of the user intended to receive this event.\n        - `IsDelivered` (bool): A flag indicating whether the event has been delivered to the recipient.\n        - `CreatedAt` (time.Time): Timestamp when the event was created.\n- Notable Patterns or Logic: This is a standard domain entity definition, central to the application's event-driven architecture. The use of `json.RawMessage` for `Payload` allows for flexible event data structures.",
  "backend/internal/domain/session.go": "- File Path: backend/internal/domain/session.go\n- High-Level Purpose: Defines the `Session` domain entity, representing a user's active session.\n- Definitions in the File:\n  - Structs:\n    - `Session`: Represents a user session.\n      - Fields: `ID` (string, acts as the refresh token), `UserID` (string), `ExpiresAt` (time.Time), `CreatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for session management.\n",
  "backend/internal/domain/user.go": "- File Path: backend/internal/domain/user.go\n- High-Level Purpose: Defines the `User` domain entity, representing a user in the system.\n- Definitions in the File:\n  - Structs:\n    - `User`: Represents a user account.\n      - Fields: `ID` (string), `Username` (string), `PasswordHash` (string, marked to be ignored in JSON serialization), `ProfilePicURL` (string), `CreatedAt` (time.Time), `UpdatedAt` (time.Time).\n- Notable Patterns or Logic: This is a domain entity definition, central to the application's business logic for user management.\n",
  "backend/internal/repository/event_repo.go": "- File Path: backend/internal/repository/event_repo.go\n- High-Level Purpose: Defines the interface for event data access operations, abstracting the underlying storage mechanisms for both temporary buffering (e.g., Redis) and persistent storage (e.g., PostgreSQL).\n- Definitions in the File:\n  - Interfaces:\n    - `EventRepository`: An interface defining methods for interacting with event data.\n      - `BufferEvent(ctx context.Context, event *domain.Event) error`: Stores an event temporarily, typically for offline users.\n      - `GetBufferedEventsForUser(ctx context.Context, userID string) ([]*domain.Event, error)`: Retrieves temporarily buffered events for a specific user.\n      - `ClearUserBuffer(ctx context.Context, userID string) error`: Removes all temporarily buffered events for a user.\n      - `StoreEvents(ctx context.Context, events []*domain.Event) error`: Persistently stores a batch of events.\n      - `GetUndeliveredEvents(ctx context.Context, userID string) ([]*domain.Event, error)`: Retrieves persistently stored events that have not yet been delivered to a user.\n      - `MarkEventsAsDelivered(ctx context.Context, eventIDs []string) error`: Updates the status of persistently stored events to mark them as delivered.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, providing a unified abstraction for event storage that can be implemented by different underlying technologies (e.g., Redis for buffering, PostgreSQL for persistence).\n",
  "backend/internal/repository/file_repo.go": "- File Path: backend/internal/repository/file_repo.go\n- High-Level Purpose: Defines the interface for file storage operations within the application's domain layer, specifically for handling profile pictures.\n- Definitions in the File:\n  - Interfaces:\n    - `FileRepository`: An interface defining methods for interacting with file storage.\n      - `SaveProfilePicture(ctx context.Context, fileData []byte, fileType string) (filename string, err error)`: Saves profile picture data and returns its generated filename.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying file storage mechanism for profile pictures.\n",
  "backend/internal/repository/session_repo.go": "- File Path: backend/internal/repository/session_repo.go\n- High-Level Purpose: Defines the interface for session data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `SessionRepository`: An interface defining methods for interacting with session data.\n      - `Store(ctx context.Context, session *domain.Session) error`: Stores a new session.\n      - `GetByID(ctx context.Context, id string) (*domain.Session, error)`: Retrieves a session by its ID.\n      - `Delete(ctx context.Context, id string) error`: Deletes a session by its ID.\n      - `DeleteAllForUser(ctx context.Context, userID string) error`: Deletes all sessions for a specific user.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for session entities.\n",
  "backend/internal/repository/user_repo.go": "- File Path: backend/internal/repository/user_repo.go\n- High-Level Purpose: Defines the interface for user data access operations within the application's domain layer.\n- Definitions in the File:\n  - Interfaces:\n    - `UserRepository`: An interface defining methods for interacting with user data.\n      - `Create(ctx context.Context, user *domain.User) error`: Creates a new user record.\n      - `GetByUsername(ctx context.Context, username string) (*domain.User, error)`: Retrieves a user by their username.\n      - `GetByID(ctx context.Context, id string) (*domain.User, error)`: Retrieves a user by their ID.\n      - `Update(ctx context.Context, user *domain.User) error`: Updates an existing user record.\n- Notable Patterns or Logic: This file establishes a \"Repository\" pattern interface, abstracting the underlying data storage for user entities.\n",
  "backend/internal/service/auth_service.go": "- File Path: backend/internal/service/auth_service.go\n- High-Level Purpose: Implements the `AuthUsecase` interface, containing the core business logic for user authentication, registration, and session management.\n- Definitions in the File:\n  - Variables:\n    - `ErrUserExists`, `ErrUserNotFound`, `ErrInvalidCredentials`, `ErrInvalidUsername`, `ErrInvalidPassword`, `ErrSessionNotFound`, `ErrSessionExpired`: Public error constants representing specific authentication-related business logic errors.\n  - Structs:\n    - `authService`: An internal struct that holds dependencies: `UserRepository`, `SessionRepository`, and `Config`.\n  - Functions / Methods:\n    - `NewAuthService(userRepo repository.UserRepository, sessionRepo repository.SessionRepository, cfg *config.Config) usecase.AuthUsecase`: A public constructor function that creates and returns a new `authService` instance as an `usecase.AuthUsecase` interface.\n    - `SignUp(ctx context.Context, input usecase.SignUpInput) (*domain.User, error)`: A public method on `authService` that handles user registration. It validates username and password, checks for existing users, hashes the password, and creates a new user in the repository.\n    - `Login(ctx context.Context, input usecase.LoginInput) (*usecase.AuthTokens, error)`: A public method on `authService` that handles user login. It retrieves the user, verifies the password hash, deletes any existing sessions for the user (single device policy), and creates a new session.\n    - `Refresh(ctx context.Context, refreshToken string) (*usecase.AuthTokens, error)`: A public method on `authService` that refreshes authentication tokens. It retrieves and validates the existing session (refresh token), checks for expiration, deletes the old session, and creates a new one.\n    - `Logout(ctx context.Context, refreshToken string) error`: A public method on `authService` that handles user logout by deleting the specified refresh token (session).\n    - `createSession(ctx context.Context, userID string) (*usecase.AuthTokens, error)`: An internal helper method that generates a new access token and creates a new session (refresh token) in the repository for a given user ID.\n    - `validateUsername(username string) error`: An internal helper function that validates the format and length of a username using a regular expression.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic and orchestrating interactions between repositories and utility functions. It also defines and handles specific business errors.",
  "backend/internal/service/event_service.go": "- File Path: backend/internal/service/event_service.go\n- High-Level Purpose: Implements the `EventUsecase` interface, providing the business logic for creating and buffering real-time events, and a placeholder for persisting buffered events to long-term storage.\n- Definitions in the File:\n  - Structs:\n    - `eventService`: An internal struct that holds dependencies: `redisEventRepo` (for buffering), `pgEventRepo` (for persistence), and `userRepo` (for user-related operations, though not directly used in current methods).\n  - Functions / Methods:\n    - `NewEventService(redisEventRepo, pgEventRepo repository.EventRepository, userRepo repository.UserRepository) usecase.EventUsecase`: A public constructor function that creates and returns a new `eventService` instance as a `usecase.EventUsecase` interface.\n    - `CreateAndBufferEvent(ctx context.Context, eventType string, payload interface{}, recipientID string) error`: A public method on `eventService` that marshals the event payload, creates a `domain.Event` object, and buffers it using the `redisEventRepo`.\n    - `PersistBufferedEvents(ctx context.Context)`: A public method on `eventService` intended to be run as a background job. It currently contains a placeholder log message, indicating that a scalable implementation would involve iterating through users with buffered events, retrieving them from Redis, storing them in PostgreSQL, and then clearing the Redis buffer.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern for event management. It orchestrates between the Redis and PostgreSQL event repositories, handling the initial buffering of events and outlining the strategy for eventual persistence. The `PersistBufferedEvents` method highlights a common pattern for background workers in event-driven architectures.\n",
  "backend/internal/service/user_service.go": "- File Path: backend/internal/service/user_service.go\n- High-Level Purpose: Implements the `UserUsecase` interface, containing the core business logic for user profile management, including fetching user details, updating profile information (username, password), and handling profile picture uploads.\n- Definitions in the File:\n  - Variables:\n    - `ErrProfileUpdateFailed`: A public error constant indicating a generic profile update failure.\n    - `ErrInvalidFileType`: A public error constant for unsupported profile picture file types.\n    - `ErrFileSizeExceeded`: A public error constant for profile pictures exceeding the size limit.\n  - Structs:\n    - `userService`: An internal struct that holds dependencies: `UserRepository` and `FileRepository`.\n  - Functions / Methods:\n    - `NewUserService(userRepo repository.UserRepository, fileRepo repository.FileRepository) usecase.UserUsecase`: A public constructor function that creates and returns a new `userService` instance as a `usecase.UserUsecase` interface.\n    - `GetProfile(ctx context.Context, userID string) (*domain.User, error)`: A public method on `userService` that retrieves a user's profile by their ID from the user repository.\n    - `GetUserByUsername(ctx context.Context, username string) (*domain.User, error)`: A public method on `userService` that retrieves a user's profile by their username from the user repository.\n    - `UpdateProfile(ctx context.Context, userID string, input usecase.UpdateUserInput) (*domain.User, error)`: A public method on `userService` that updates a user's username and/or password. It includes validation for username format/uniqueness and password length, and hashes new passwords.\n    - `UpdateProfilePicture(ctx context.Context, userID string, file multipart.File, fileHeader *multipart.FileHeader) (string, error)`: A public method on `userService` that handles uploading and updating a user's profile picture. It validates file size and type, saves the file using the file repository, and updates the user's `ProfilePicURL`.\n    - `validateUsername(username string) error`: An internal helper function that validates the format and length of a username using a regular expression.\n- Notable Patterns or Logic: This file implements the \"Service\" or \"Use Case\" pattern, containing the core business logic for user management. It orchestrates interactions between the user and file repositories, performs input validation, and defines specific business errors.\n",
  "backend/internal/usecase/auth_ucase.go": "- File Path: backend/internal/usecase/auth_ucase.go\n- High-Level Purpose: Defines the interface for authentication-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `SignUpInput`: DTO for user registration requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `LoginInput`: DTO for user login requests.\n      - Fields: `Username` (string), `Password` (string).\n    - `AuthTokens`: DTO for returning authentication tokens.\n      - Fields: `AccessToken` (string), `RefreshToken` (string).\n  - Interfaces:\n    - `AuthUsecase`: An interface defining the core authentication operations.\n      - `SignUp(ctx context.Context, input SignUpInput) (*domain.User, error)`: Registers a new user.\n      - `Login(ctx context.Context, input LoginInput) (*AuthTokens, error)`: Authenticates a user and issues tokens.\n      - `Refresh(ctx context.Context, refreshToken string) (*AuthTokens, error)`: Refreshes access and refresh tokens.\n      - `Logout(ctx context.Context, refreshToken string) error`: Invalidates a refresh token/session.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input/output DTOs, separating business logic from delivery mechanisms.\n",
  "backend/internal/usecase/event_ucase.go": "- File Path: backend/internal/usecase/event_ucase.go\n- High-Level Purpose: Defines the interface for event-related business logic (use cases), outlining the operations for creating, buffering, and persisting events.\n- Definitions in the File:\n  - Interfaces:\n    - `EventUsecase`: An interface defining the core event management operations.\n      - `CreateAndBufferEvent(ctx context.Context, eventType string, payload interface{}, recipientID string) error`: Creates a new event and buffers it for a specific recipient.\n      - `PersistBufferedEvents(ctx context.Context)`: A method for a background process to move buffered events to persistent storage.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface for event management, separating the business logic from the specific implementation details of services and repositories.\n",
  "backend/internal/usecase/user_ucase.go": "- File Path: backend/internal/usecase/user_ucase.go\n- High-Level Purpose: Defines the interface for user-related business logic (use cases) and associated data transfer objects (DTOs).\n- Definitions in the File:\n  - Structs:\n    - `UpdateUserInput`: DTO for user profile update requests.\n      - Fields: `Username` (*string, optional), `Password` (*string, optional).\n  - Interfaces:\n    - `UserUsecase`: An interface defining the core user management operations.\n      - `GetProfile(ctx context.Context, userID string) (*domain.User, error)`: Retrieves the profile of a user by their ID.\n      - `GetUserByUsername(ctx context.Context, username string) (*domain.User, error)`: Retrieves the profile of a user by their username.\n      - `UpdateProfile(ctx context.Context, userID string, input UpdateUserInput) (*domain.User, error)`: Updates the username and/or password for a specific user.\n      - `UpdateProfilePicture(ctx context.Context, userID string, file multipart.File, fileHeader *multipart.FileHeader) (string, error)`: Updates the profile picture for a specific user, returning the new picture URL.\n- Notable Patterns or Logic: This file defines the \"Use Case\" layer interface and its associated input DTO, separating user-related business logic from delivery mechanisms and data storage.",
  "backend/migrations/000001_create_users_table.up.sql": "- File Path: backend/migrations/000001_create_users_table.up.sql\n- High-Level Purpose: SQL script to create the `users` table and related extensions/indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `users`: Stores user information.\n      - Columns: `id` (UUID, primary key, default generated), `username` (CITEXT, unique, not null), `password_hash` (VARCHAR), `profile_pic_url` (VARCHAR, default empty), `created_at` (TIMESTAMPTZ, default now), `updated_at` (TIMESTAMPTZ, default now).\n  - Extensions:\n    - `uuid-ossp`: Enables UUID generation functions.\n    - `citext`: Provides a case-insensitive text type.\n  - Indexes:\n    - `users_username_idx`: An index on the `username` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/migrations/000002_create_sessions_table.up.sql": "- File Path: backend/migrations/000002_create_sessions_table.up.sql\n- High-Level Purpose: SQL script to create the `sessions` table and related indexes in a PostgreSQL database.\n- Definitions in the File:\n  - Tables:\n    - `sessions`: Stores user session information.\n      - Columns: `id` (UUID, primary key), `user_id` (UUID, not null, foreign key referencing `users` with cascade delete), `expires_at` (TIMESTAMPTZ, not null), `created_at` (TIMESTAMPTZ, default now).\n  - Indexes:\n    - `sessions_user_id_idx`: An index on the `user_id` column for efficient lookups.\n- Notable Patterns or Logic: This is a database migration script, designed to be run to set up or update the database schema.\n",
  "backend/migrations/000003_create_events_table.up.sql": "- File Path: backend/migrations/000003_create_events_table.up.sql\n- High-Level Purpose: SQL script to create the `events` table in a PostgreSQL database, designed to store real-time events for later delivery or persistence.\n- Definitions in the File:\n  - Tables:\n    - `events`: Stores event data.\n      - Columns:\n        - `id`: UUID, primary key, defaults to a generated UUID.\n        - `type`: VARCHAR(50), not null, describes the event type.\n        - `payload`: JSONB, not null, stores the event's data as a JSON document.\n        - `recipient_id`: UUID, not null, foreign key referencing `users(id)` with cascade delete.\n        - `is_delivered`: BOOLEAN, not null, defaults to `FALSE`, indicates if the event has been delivered.\n        - `created_at`: TIMESTAMPTZ, not null, defaults to current timestamp.\n  - Indexes:\n    - `events_recipient_id_is_delivered_idx`: An index on `recipient_id` and `is_delivered` columns to optimize queries for undelivered events for a specific user.\n- Notable Patterns or Logic: This is a standard database migration script, used to define or update the schema for event storage. It uses `JSONB` for flexible payload storage and includes an index for efficient querying of undelivered events.\n",
  "backend/pkg/config/config.go": "- File Path: backend/pkg/config/config.go\n- High-Level Purpose: Manages the application's configuration, loading values from environment variables or a `.env` file and providing them in a structured `Config` object.\n- Definitions in the File:\n  - Structs:\n    - `Config`: A struct that holds all application configuration parameters.\n      - Fields: `Port` (string), `DatabaseURL` (string), `RedisURL` (string), `JWTSecret` (string), `AccessTokenTTL` (time.Duration), `RefreshTokenTTL` (time.Duration), `UploadDir` (string).\n  - Functions / Methods:\n    - `Load() *Config`: A public function that loads environment variables (first from `.env` if present, then system environment) and returns a populated `Config` struct with default values for missing variables.\n    - `getEnv(key, fallback string) string`: An internal helper function to retrieve an environment variable by `key` or return a `fallback` value if not found.\n- Notable Patterns or Logic: This file implements a configuration loading pattern, centralizing access to environment-dependent settings and providing sensible defaults.\n",
  "backend/pkg/util/hash.go": "- File Path: backend/pkg/util/hash.go\n- High-Level Purpose: Provides utility functions for securely hashing passwords and comparing plain text passwords against hashes using bcrypt.\n- Definitions in the File:\n  - Functions / Methods:\n    - `HashPassword(password string) (string, error)`: A public function that takes a plain text password and returns its bcrypt hash.\n    - `CheckPasswordHash(password, hash string) bool`: A public function that compares a plain text password with a bcrypt hash, returning `true` if they match, `false` otherwise.\n- Notable Patterns or Logic: This file contains cryptographic utility functions, specifically for password management.\n",
  "backend/pkg/util/jwt.go": "- File Path: backend/pkg/util/jwt.go\n- High-Level Purpose: Provides utility functions for generating and validating JSON Web Tokens (JWTs) for authentication.\n- Definitions in the File:\n  - Structs:\n    - `Claims`: A custom struct embedding `jwt.RegisteredClaims` and adding a `UserID` field, used for JWT payload.\n  - Functions / Methods:\n    - `GenerateAccessToken(userID, secret string, ttl time.Duration) (string, error)`: A public function that creates and signs a new JWT (access token) with the given user ID, secret key, and time-to-live (TTL).\n    - `ValidateToken(tokenString, secret string) (*Claims, error)`: A public function that parses and validates a JWT string using the provided secret key. It returns the custom `Claims` if the token is valid, otherwise an error.\n- Notable Patterns or Logic: This file encapsulates JWT-related operations, providing a clear interface for token management.\n",
  "backend/pkg/util/uuid.go": "- File Path: backend/pkg/util/uuid.go\n- High-Level Purpose: Provides utility functions for generating new UUIDs and parsing UUID strings.\n- Definitions in the File:\n  - Functions / Methods:\n    - `NewUUID() string`: A public function that generates and returns a new universally unique identifier (UUID) as a string.\n    - `ParseUUID(s string) (uuid.UUID, error)`: A public function that attempts to parse a string into a `uuid.UUID` type, returning an error if the string is not a valid UUID.\n- Notable Patterns or Logic: This file contains general utility functions for UUID management.\n",
  "backend/web/static/css/style.css": "- File Path: backend/web/static/css/style.css\n- High-Level Purpose: This file serves as a placeholder for compiled CSS styles, likely generated by a CSS framework or preprocessor.\n- Definitions in the File:\n  - None.\n- Notable Patterns or Logic: This is a standard CSS file, currently empty, indicating that styling is either minimal, handled inline, or generated from another source (e.g., Tailwind CSS JIT compilation).\n",
  "backend/web/static/js/api.js": "- File Path: backend/web/static/js/api.js\n- High-Level Purpose: Provides a client-side API client for interacting with the backend, encapsulating HTTP request logic, authentication token management, and error handling.\n- Definitions in the File:\n  - Types:\n    - `User`: A JSDoc typedef for the user object structure returned by the API.\n    - `AuthTokens`: A JSDoc typedef for the authentication tokens object structure.\n  - Constants:\n    - `API_BASE`: A string constant defining the base path for API endpoints.\n  - Functions / Methods:\n    - `request(endpoint, options = {})`: An internal asynchronous function that serves as a generic HTTP request wrapper. It constructs the URL, adds `Content-Type` and `Authorization` headers (if an access token exists), handles `FormData` bodies, and processes API responses, throwing an error for non-OK statuses.\n    - `signup(username, password)`: A public function that sends a POST request to the `/auth/signup` endpoint.\n    - `login(username, password)`: A public asynchronous function that sends a POST request to `/auth/login`, and if successful, stores the received access and refresh tokens.\n    - `logout()`: A public asynchronous function that clears locally stored authentication tokens.\n    - `getMe()`: A public function that sends a GET request to `/users/me` to fetch the authenticated user's profile.\n    - `updateProfile(formData)`: A public function that sends a PUT request to `/users/me` with `FormData` to update the user's profile.\n    - `getUserByUsername(username)`: A public function that sends a GET request to `/users/{username}` to fetch another user's profile.\n- Notable Patterns or Logic: This module implements an API client pattern, centralizing all HTTP requests to the backend. It includes logic for JWT token management (retrieval and storage) and standardized error handling for API responses.\n",
  "backend/web/static/js/main.js": "- File Path: backend/web/static/js/main.js\n- High-Level Purpose: This is the main client-side JavaScript file that orchestrates user interface interactions, handles authentication and profile updates, and initializes WebSocket communication. It acts as the central hub for client-side application logic.\n- Definitions in the File:\n  - Imports:\n    - `api`: For interacting with the backend API.\n    - `store`: For managing client-side application state (e.g., user data, tokens).\n    - `ui`: For user interface manipulations and rendering.\n    - `ws`: For WebSocket communication.\n  - Functions / Methods:\n    - `handleAuthFormSubmit(event)`: An internal asynchronous function that handles form submissions for both login and signup. It calls the appropriate API function, stores tokens, and redirects to the chat page on success, or displays an error.\n    - `handleProfileUpdateFormSubmit(event)`: An internal asynchronous function that handles the submission of the profile update form. It constructs `FormData`, calls the API to update the profile, updates the local store and UI, and shows notifications.\n    - `handleLogout()`: An internal asynchronous function that logs the user out by calling the API, clearing local tokens, and redirecting to the home page.\n    - `initAuthPage()`: An internal function that initializes event listeners for the login and signup forms and their toggle buttons on the authentication page.\n    - `initChatPage()`: An internal asynchronous function that initializes event listeners for the logout button and profile update form on the chat page. It fetches the authenticated user's profile, renders it, and connects to the WebSocket service.\n- Notable Patterns or Logic: This file implements client-side routing based on the URL path, event-driven UI interactions, and integrates various client-side modules (`api`, `store`, `ui`, `ws`) to manage application flow. It also includes error handling and redirects for authentication failures.\n",
  "backend/web/static/js/store.js": "- File Path: backend/web/static/js/store.js\n- High-Level Purpose: Manages the client-side application state, specifically holding the current authenticated user's data and authentication tokens (access and refresh tokens).\n- Definitions in the File:\n  - Types:\n    - `User`: A JSDoc typedef for the user object structure.\n  - Variables:\n    - `state`: An internal object holding the `currentUser` (User | null), `accessToken` (string | null), and `refreshToken` (string | null).\n  - Functions / Methods:\n    - `setCurrentUser(user)`: A public function to set the `currentUser` in the state.\n    - `getCurrentUser()`: A public function to retrieve the `currentUser` from the state.\n    - `setTokens(access, refresh)`: A public function to set both `accessToken` and `refreshToken` in the state.\n    - `getAccessToken()`: A public function to retrieve the `accessToken` from the state.\n    - `getRefreshToken()`: A public function to retrieve the `refreshToken` from the state.\n    - `clearTokens()`: A public function to clear all authentication tokens and the current user from the state.\n- Notable Patterns or Logic: This module implements a simple client-side state management pattern, providing a centralized place to store and retrieve global application data related to authentication and user identity.\n",
  "backend/web/static/js/ui.js": "- File Path: backend/web/static/js/ui.js\n- High-Level Purpose: Provides a collection of utility functions for manipulating the client-side user interface, such as toggling visibility of elements, displaying error messages, rendering user profiles, and showing temporary notifications.\n- Definitions in the File:\n  - Types:\n    - `User`: A JSDoc typedef for the user object structure.\n  - Functions / Methods:\n    - `toggleAuthForms()`: A public function that toggles the visibility of the login and signup containers.\n    - `showError(formId, message)`: A public function that displays an error message within a specific form's error message element.\n    - `renderProfile(user)`: A public function that takes a `User` object and dynamically updates the `profile-container` HTML element with the user's profile picture, username, and join date.\n    - `showNotification(message, type = 'info')`: A public function that creates and displays a temporary notification message at the bottom right of the screen, with customizable styling based on `type` (success, error, info).\n- Notable Patterns or Logic: This module encapsulates UI-specific logic, promoting separation of concerns by keeping DOM manipulation and rendering details out of the main application logic.\n",
  "backend/web/static/js/ws.js": "- File Path: backend/web/static/js/ws.js\n- High-Level Purpose: Manages the client-side WebSocket connection, enabling real-time communication with the backend for events like new messages or notifications.\n- Definitions in the File:\n  - Imports:\n    - `getAccessToken` from `./store.js`: To retrieve the authentication token for WebSocket connection.\n    - `showNotification` from `./ui.js`: To display UI notifications.\n  - Variables:\n    - `socket`: An internal variable (`WebSocket | null`) that holds the current WebSocket connection instance.\n  - Functions / Methods:\n    - `connect()`: A public function that establishes a WebSocket connection to the backend. It checks for an access token, constructs the WebSocket URL, and sets up event handlers for `onopen`, `onmessage`, `onclose`, and `onerror`. It sends a success notification on open and error/disconnect notifications on failure/close.\n    - `send(messageType, payload)`: A public function that sends a structured JSON message over the WebSocket connection if it's open.\n    - `handleIncomingEvent(event)`: An internal function that processes incoming WebSocket messages. It parses the JSON event and uses a `switch` statement to handle different event types (e.g., `new_message`, `friend_request_received`), displaying notifications.\n- Notable Patterns or Logic: This module implements a WebSocket client, handling connection lifecycle, authentication via JWT (implicitly through the initial HTTP upgrade), and a basic event-driven message dispatch system. It includes error logging and user notifications.\n",
  "backend/web/templates/chat.html": "- File Path: backend/web/templates/chat.html\n- High-Level Purpose: Defines the HTML structure for the main chat application page, including sections for user profile display, profile updates, and the chat window.\n- Definitions in the File:\n  - HTML Elements:\n    - `notification-container`: A `div` to display dynamic notifications.\n    - `profile-container`: A `div` where user profile information will be rendered by JavaScript.\n    - `profile-update-form`: A `form` for users to update their username, password, and profile picture.\n      - Inputs: `username`, `password`, `profile_pic` (file input).\n    - `logout-button`: A `button` to trigger the logout action.\n    - Main Chat Area: A `div` placeholder for future chat messages and conversation selection.\n  - External Resources:\n    - `https://cdn.tailwindcss.com`: Imports Tailwind CSS for styling.\n    - `/static/js/main.js`: Imports the main client-side JavaScript module.\n- Notable Patterns or Logic: This is a standard HTML template, designed to be dynamically populated and interactive via JavaScript. It uses Tailwind CSS for a utility-first styling approach.\n",
  "backend/web/templates/index.html": "- File Path: backend/web/templates/index.html\n- High-Level Purpose: Defines the HTML structure for the application's landing page, primarily featuring user login and signup forms.\n- Definitions in the File:\n  - HTML Elements:\n    - `login-container`: A `div` containing the login form.\n    - `login-form`: A `form` for user login.\n      - Inputs: `login-username`, `login-password`.\n      - Links: `show-signup-form` (to toggle to signup).\n    - `signup-container`: A `div` containing the signup form, initially hidden.\n    - `signup-form`: A `form` for new user registration.\n      - Inputs: `signup-username`, `signup-password`.\n      - Links: `show-login-form` (to toggle to login).\n    - `error-message`: A `p` tag within each form to display error messages.\n  - External Resources:\n    - `https://cdn.tailwindcss.com`: Imports Tailwind CSS for styling.\n    - `/static/js/main.js`: Imports the main client-side JavaScript module.\n- Notable Patterns or Logic: This is a standard HTML template, designed for user authentication. It uses Tailwind CSS for styling and relies on JavaScript for form toggling and submission handling.\n",
  "docker-compose.yml": "- File Path: docker-compose.yml\n- High-Level Purpose: Defines and configures the multi-container Docker environment for the chat application, including PostgreSQL and Redis services.\n- Definitions in the File:\n  - Services:\n    - `postgres`: A PostgreSQL database service.\n      - Image: `postgres:13`\n      - Restart policy: `always`\n      - Environment variables: `POSTGRES_USER`, `POSTGRES_PASSWORD`, `POSTGRES_DB`.\n      - Ports: `5432:5432` (exposes Postgres port to host).\n      - Volumes: `postgres_data` (for persistent data).\n    - `redis`: A Redis in-memory data store service.\n      - Image: `redis:6-alpine`\n      - Restart policy: `always`\n      - Ports: `6379:6379` (exposes Redis port to host).\n      - Volumes: `redis_data` (for persistent data).\n  - Volumes:\n    - `postgres_data`: A named Docker volume for PostgreSQL data persistence.\n    - `redis_data`: A named Docker volume for Redis data persistence.\n- Notable Patterns or Logic: This is a standard Docker Compose configuration file, used for defining and running multi-container Docker applications.\n"
}